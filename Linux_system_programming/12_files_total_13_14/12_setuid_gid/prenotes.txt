Every process has six or more IDs associated with it.

who we really are
====================
	real user ID
	real group ID

used for file access permission checks
=========================================
	effective user ID
	effective group ID

saved by exec functions
=============================
	saved set-user-ID
	saved set-group-ID

The real user ID and real group ID identify who we really are.
These two fields are taken from our entry in the password file when we log in

The effective user ID, effective group ID, and supplementary group IDs determine our file access permissions. We will describe later

The effective user ID may change under various rules to allow a process to execute with the rights of a different users.

The saved set-user-ID and saved set-group-ID contain copies of the effective user ID and the effective group ID, respectively, when a program is executed.

To find out user id and group id , type 'id' command

Another command to find out user id is : echo $UID

Normally, the effective user ID equals the real user ID, and the effective group ID equals the real group ID.


Every file has an owner and a group owner. 

The owner is specified by the st_uid member of the stat structure; the group owner, by the st_gid member.

When we execute a program file, the effective user ID of the process is usually the real user ID, and the effective group ID is usually the real group ID.

However, we can also set a special flag in the file’s mode word (st_mode) that says, ‘‘When this file is executed, set the effective user ID of the process to be the owner of the file (st_uid).’’

Similarly, we can set another bit in the file’s mode word that causes the effective group ID to be the group owner of the file (st_gid).

These two bits in the file’s mode word are called the set-user-ID bit and the set-group-ID bit.

For example, if the owner of the file is the superuser and if the file’s set-user-ID bit is set, then while that program file is running as a process, it has superuser privileges.
This happens regardless of the real user ID of the process that executes the file.

As an example, the UNIX System program that allows anyone to change his or her password, passwd(1), is a set-user-ID program.

This is required so that the program can write the new password to the password file, typically either /etc/passwd or /etc/shadow, files that should be writable only by the superuser

Returning to the stat function, the set-user-ID bit and the set-group-ID bit are contained in the file’s st_mode value. These two bits can be tested against the constants S_ISUID and S_ISGID, respectively



