
2_semihosting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003d8c  08003d8c  00013d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003df8  08003df8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003df8  08003df8  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e00  08003e00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e00  08003e00  00013e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e04  08003e04  00013e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000070  08003e78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08003e78  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a1dc  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000180d  00000000  00000000  0002a2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b8  00000000  00000000  0002bad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006a7  00000000  00000000  0002c388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025895  00000000  00000000  0002ca2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae45  00000000  00000000  000522c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e78cc  00000000  00000000  0005d109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c5c  00000000  00000000  001449d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00147634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d74 	.word	0x08003d74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003d74 	.word	0x08003d74

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fa18 	bl	800090c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f80c 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f88c 	bl	80005fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f85a 	bl	800059c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  initialise_monitor_handles();
 80004e8:	f003 fbc8 	bl	8003c7c <initialise_monitor_handles>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	printf("test\r\n");
 80004ec:	4801      	ldr	r0, [pc, #4]	; (80004f4 <main+0x20>)
 80004ee:	f002 fe0b 	bl	8003108 <puts>
  {
 80004f2:	e7fb      	b.n	80004ec <main+0x18>
 80004f4:	08003d8c 	.word	0x08003d8c

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b096      	sub	sp, #88	; 0x58
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	2244      	movs	r2, #68	; 0x44
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f002 fede 	bl	80032c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	463b      	mov	r3, r7
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800051a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800051e:	f000 fd27 	bl	8000f70 <HAL_PWREx_ControlVoltageScaling>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000528:	f000 f8ce 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052c:	2302      	movs	r3, #2
 800052e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000534:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000536:	2310      	movs	r3, #16
 8000538:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053a:	2302      	movs	r3, #2
 800053c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053e:	2302      	movs	r3, #2
 8000540:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000542:	2301      	movs	r3, #1
 8000544:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000546:	230a      	movs	r3, #10
 8000548:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800054a:	2307      	movs	r3, #7
 800054c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800054e:	2302      	movs	r3, #2
 8000550:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000552:	2302      	movs	r3, #2
 8000554:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fd5e 	bl	800101c <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000566:	f000 f8af 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	230f      	movs	r3, #15
 800056c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	2303      	movs	r3, #3
 8000570:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	2104      	movs	r1, #4
 8000582:	4618      	mov	r0, r3
 8000584:	f001 f926 	bl	80017d4 <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800058e:	f000 f89b 	bl	80006c8 <Error_Handler>
  }
}
 8000592:	bf00      	nop
 8000594:	3758      	adds	r7, #88	; 0x58
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005a2:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <MX_USART2_UART_Init+0x5c>)
 80005a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005c2:	220c      	movs	r2, #12
 80005c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005e0:	f001 ffd8 	bl	8002594 <HAL_UART_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005ea:	f000 f86d 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000008c 	.word	0x2000008c
 80005f8:	40004400 	.word	0x40004400

080005fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	; 0x28
 8000600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a2a      	ldr	r2, [pc, #168]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000618:	f043 0304 	orr.w	r3, r3, #4
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0304 	and.w	r3, r3, #4
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062a:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <MX_GPIO_Init+0xc4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	4a24      	ldr	r2, [pc, #144]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000636:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	4a1e      	ldr	r2, [pc, #120]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2120      	movs	r1, #32
 8000676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067a:	f000 fc53 	bl	8000f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000684:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <MX_GPIO_Init+0xc8>)
 8000696:	f000 fa9b 	bl	8000bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800069a:	2320      	movs	r3, #32
 800069c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	2301      	movs	r3, #1
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b4:	f000 fa8c 	bl	8000bd0 <HAL_GPIO_Init>

}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	48000800 	.word	0x48000800

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>
	...

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_MspInit+0x44>)
 80006dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006de:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <HAL_MspInit+0x44>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6613      	str	r3, [r2, #96]	; 0x60
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_MspInit+0x44>)
 80006e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_MspInit+0x44>)
 80006f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_MspInit+0x44>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	6593      	str	r3, [r2, #88]	; 0x58
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_MspInit+0x44>)
 8000700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000

0800071c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b0ac      	sub	sp, #176	; 0xb0
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	2288      	movs	r2, #136	; 0x88
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f002 fdc3 	bl	80032c8 <memset>
  if(huart->Instance==USART2)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a21      	ldr	r2, [pc, #132]	; (80007cc <HAL_UART_MspInit+0xb0>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d13b      	bne.n	80007c4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800074c:	2302      	movs	r3, #2
 800074e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000750:	2300      	movs	r3, #0
 8000752:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fa5f 	bl	8001c1c <HAL_RCCEx_PeriphCLKConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000764:	f7ff ffb0 	bl	80006c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000768:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <HAL_UART_MspInit+0xb4>)
 800076a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800076c:	4a18      	ldr	r2, [pc, #96]	; (80007d0 <HAL_UART_MspInit+0xb4>)
 800076e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000772:	6593      	str	r3, [r2, #88]	; 0x58
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <HAL_UART_MspInit+0xb4>)
 8000776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <HAL_UART_MspInit+0xb4>)
 8000782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000784:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <HAL_UART_MspInit+0xb4>)
 8000786:	f043 0301 	orr.w	r3, r3, #1
 800078a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <HAL_UART_MspInit+0xb4>)
 800078e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000790:	f003 0301 	and.w	r3, r3, #1
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000798:	230c      	movs	r3, #12
 800079a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	2302      	movs	r3, #2
 80007a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007b0:	2307      	movs	r3, #7
 80007b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007ba:	4619      	mov	r1, r3
 80007bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c0:	f000 fa06 	bl	8000bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007c4:	bf00      	nop
 80007c6:	37b0      	adds	r7, #176	; 0xb0
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40004400 	.word	0x40004400
 80007d0:	40021000 	.word	0x40021000

080007d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <NMI_Handler+0x4>

080007da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <MemManage_Handler+0x4>

080007e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <BusFault_Handler+0x4>

080007ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <UsageFault_Handler+0x4>

080007f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000820:	f000 f8d0 	bl	80009c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}

08000828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000830:	4a14      	ldr	r2, [pc, #80]	; (8000884 <_sbrk+0x5c>)
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <_sbrk+0x60>)
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <_sbrk+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d102      	bne.n	800084a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <_sbrk+0x64>)
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <_sbrk+0x68>)
 8000848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <_sbrk+0x64>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	429a      	cmp	r2, r3
 8000856:	d207      	bcs.n	8000868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000858:	f002 fd84 	bl	8003364 <__errno>
 800085c:	4603      	mov	r3, r0
 800085e:	220c      	movs	r2, #12
 8000860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000862:	f04f 33ff 	mov.w	r3, #4294967295
 8000866:	e009      	b.n	800087c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <_sbrk+0x64>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800086e:	4b07      	ldr	r3, [pc, #28]	; (800088c <_sbrk+0x64>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	4a05      	ldr	r2, [pc, #20]	; (800088c <_sbrk+0x64>)
 8000878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800087a:	68fb      	ldr	r3, [r7, #12]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20018000 	.word	0x20018000
 8000888:	00000400 	.word	0x00000400
 800088c:	20000110 	.word	0x20000110
 8000890:	20000310 	.word	0x20000310

08000894 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <SystemInit+0x20>)
 800089a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800089e:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <SystemInit+0x20>)
 80008a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008bc:	f7ff ffea 	bl	8000894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008c2:	490d      	ldr	r1, [pc, #52]	; (80008f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c4:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <LoopForever+0xe>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c8:	e002      	b.n	80008d0 <LoopCopyDataInit>

080008ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ce:	3304      	adds	r3, #4

080008d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d4:	d3f9      	bcc.n	80008ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d6:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d8:	4c0a      	ldr	r4, [pc, #40]	; (8000904 <LoopForever+0x16>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008dc:	e001      	b.n	80008e2 <LoopFillZerobss>

080008de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e0:	3204      	adds	r2, #4

080008e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e4:	d3fb      	bcc.n	80008de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008e6:	f002 fd43 	bl	8003370 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ea:	f7ff fdf3 	bl	80004d4 <main>

080008ee <LoopForever>:

LoopForever:
    b LoopForever
 80008ee:	e7fe      	b.n	80008ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008fc:	08003e08 	.word	0x08003e08
  ldr r2, =_sbss
 8000900:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000904:	20000310 	.word	0x20000310

08000908 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000908:	e7fe      	b.n	8000908 <ADC1_2_IRQHandler>
	...

0800090c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000912:	2300      	movs	r3, #0
 8000914:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <HAL_Init+0x3c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <HAL_Init+0x3c>)
 800091c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000920:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000922:	2003      	movs	r0, #3
 8000924:	f000 f920 	bl	8000b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000928:	2000      	movs	r0, #0
 800092a:	f000 f80f 	bl	800094c <HAL_InitTick>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d002      	beq.n	800093a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000934:	2301      	movs	r3, #1
 8000936:	71fb      	strb	r3, [r7, #7]
 8000938:	e001      	b.n	800093e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800093a:	f7ff fecb 	bl	80006d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800093e:	79fb      	ldrb	r3, [r7, #7]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40022000 	.word	0x40022000

0800094c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000954:	2300      	movs	r3, #0
 8000956:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <HAL_InitTick+0x6c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d023      	beq.n	80009a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <HAL_InitTick+0x70>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <HAL_InitTick+0x6c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f91d 	bl	8000bb6 <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d10f      	bne.n	80009a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d809      	bhi.n	800099c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f000 f8f5 	bl	8000b7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000994:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_InitTick+0x74>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
 800099a:	e007      	b.n	80009ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	73fb      	strb	r3, [r7, #15]
 80009a0:	e004      	b.n	80009ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	73fb      	strb	r3, [r7, #15]
 80009a6:	e001      	b.n	80009ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000004 	.word	0x20000004

080009c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_IncTick+0x20>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x24>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_IncTick+0x24>)
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000114 	.word	0x20000114

080009ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <HAL_GetTick+0x14>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000114 	.word	0x20000114

08000a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	60d3      	str	r3, [r2, #12]
}
 8000a3c:	bf00      	nop
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <__NVIC_GetPriorityGrouping+0x18>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	f003 0307 	and.w	r3, r3, #7
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db0a      	blt.n	8000a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	490c      	ldr	r1, [pc, #48]	; (8000ab4 <__NVIC_SetPriority+0x4c>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	0112      	lsls	r2, r2, #4
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a90:	e00a      	b.n	8000aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4908      	ldr	r1, [pc, #32]	; (8000ab8 <__NVIC_SetPriority+0x50>)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	3b04      	subs	r3, #4
 8000aa0:	0112      	lsls	r2, r2, #4
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	761a      	strb	r2, [r3, #24]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b089      	sub	sp, #36	; 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	f1c3 0307 	rsb	r3, r3, #7
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	bf28      	it	cs
 8000ada:	2304      	movcs	r3, #4
 8000adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	2b06      	cmp	r3, #6
 8000ae4:	d902      	bls.n	8000aec <NVIC_EncodePriority+0x30>
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3b03      	subs	r3, #3
 8000aea:	e000      	b.n	8000aee <NVIC_EncodePriority+0x32>
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	f04f 32ff 	mov.w	r2, #4294967295
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43da      	mvns	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	401a      	ands	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b04:	f04f 31ff 	mov.w	r1, #4294967295
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	43d9      	mvns	r1, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	4313      	orrs	r3, r2
         );
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3724      	adds	r7, #36	; 0x24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b34:	d301      	bcc.n	8000b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00f      	b.n	8000b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <SysTick_Config+0x40>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b42:	210f      	movs	r1, #15
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f7ff ff8e 	bl	8000a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <SysTick_Config+0x40>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b52:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <SysTick_Config+0x40>)
 8000b54:	2207      	movs	r2, #7
 8000b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	e000e010 	.word	0xe000e010

08000b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff47 	bl	8000a04 <__NVIC_SetPriorityGrouping>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b90:	f7ff ff5c 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 8000b94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	6978      	ldr	r0, [r7, #20]
 8000b9c:	f7ff ff8e 	bl	8000abc <NVIC_EncodePriority>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff5d 	bl	8000a68 <__NVIC_SetPriority>
}
 8000bae:	bf00      	nop
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ffb0 	bl	8000b24 <SysTick_Config>
 8000bc4:	4603      	mov	r3, r0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bde:	e17f      	b.n	8000ee0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	2101      	movs	r1, #1
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bec:	4013      	ands	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f000 8171 	beq.w	8000eda <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d005      	beq.n	8000c10 <HAL_GPIO_Init+0x40>
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d130      	bne.n	8000c72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68da      	ldr	r2, [r3, #12]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c46:	2201      	movs	r2, #1
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	091b      	lsrs	r3, r3, #4
 8000c5c:	f003 0201 	and.w	r2, r3, #1
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 0303 	and.w	r3, r3, #3
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d118      	bne.n	8000cb0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c84:	2201      	movs	r2, #1
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	08db      	lsrs	r3, r3, #3
 8000c9a:	f003 0201 	and.w	r2, r3, #1
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	d017      	beq.n	8000cec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d123      	bne.n	8000d40 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	08da      	lsrs	r2, r3, #3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3208      	adds	r2, #8
 8000d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	f003 0307 	and.w	r3, r3, #7
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	220f      	movs	r2, #15
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	691a      	ldr	r2, [r3, #16]
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	08da      	lsrs	r2, r3, #3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3208      	adds	r2, #8
 8000d3a:	6939      	ldr	r1, [r7, #16]
 8000d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0203 	and.w	r2, r3, #3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f000 80ac 	beq.w	8000eda <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	4b5f      	ldr	r3, [pc, #380]	; (8000f00 <HAL_GPIO_Init+0x330>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	4a5e      	ldr	r2, [pc, #376]	; (8000f00 <HAL_GPIO_Init+0x330>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8e:	4b5c      	ldr	r3, [pc, #368]	; (8000f00 <HAL_GPIO_Init+0x330>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d9a:	4a5a      	ldr	r2, [pc, #360]	; (8000f04 <HAL_GPIO_Init+0x334>)
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	3302      	adds	r3, #2
 8000da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	220f      	movs	r2, #15
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dc4:	d025      	beq.n	8000e12 <HAL_GPIO_Init+0x242>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a4f      	ldr	r2, [pc, #316]	; (8000f08 <HAL_GPIO_Init+0x338>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d01f      	beq.n	8000e0e <HAL_GPIO_Init+0x23e>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a4e      	ldr	r2, [pc, #312]	; (8000f0c <HAL_GPIO_Init+0x33c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d019      	beq.n	8000e0a <HAL_GPIO_Init+0x23a>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a4d      	ldr	r2, [pc, #308]	; (8000f10 <HAL_GPIO_Init+0x340>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d013      	beq.n	8000e06 <HAL_GPIO_Init+0x236>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a4c      	ldr	r2, [pc, #304]	; (8000f14 <HAL_GPIO_Init+0x344>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d00d      	beq.n	8000e02 <HAL_GPIO_Init+0x232>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a4b      	ldr	r2, [pc, #300]	; (8000f18 <HAL_GPIO_Init+0x348>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d007      	beq.n	8000dfe <HAL_GPIO_Init+0x22e>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a4a      	ldr	r2, [pc, #296]	; (8000f1c <HAL_GPIO_Init+0x34c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d101      	bne.n	8000dfa <HAL_GPIO_Init+0x22a>
 8000df6:	2306      	movs	r3, #6
 8000df8:	e00c      	b.n	8000e14 <HAL_GPIO_Init+0x244>
 8000dfa:	2307      	movs	r3, #7
 8000dfc:	e00a      	b.n	8000e14 <HAL_GPIO_Init+0x244>
 8000dfe:	2305      	movs	r3, #5
 8000e00:	e008      	b.n	8000e14 <HAL_GPIO_Init+0x244>
 8000e02:	2304      	movs	r3, #4
 8000e04:	e006      	b.n	8000e14 <HAL_GPIO_Init+0x244>
 8000e06:	2303      	movs	r3, #3
 8000e08:	e004      	b.n	8000e14 <HAL_GPIO_Init+0x244>
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	e002      	b.n	8000e14 <HAL_GPIO_Init+0x244>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e000      	b.n	8000e14 <HAL_GPIO_Init+0x244>
 8000e12:	2300      	movs	r3, #0
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	f002 0203 	and.w	r2, r2, #3
 8000e1a:	0092      	lsls	r2, r2, #2
 8000e1c:	4093      	lsls	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e24:	4937      	ldr	r1, [pc, #220]	; (8000f04 <HAL_GPIO_Init+0x334>)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	089b      	lsrs	r3, r3, #2
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e32:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <HAL_GPIO_Init+0x350>)
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e56:	4a32      	ldr	r2, [pc, #200]	; (8000f20 <HAL_GPIO_Init+0x350>)
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e5c:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <HAL_GPIO_Init+0x350>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d003      	beq.n	8000e80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e80:	4a27      	ldr	r2, [pc, #156]	; (8000f20 <HAL_GPIO_Init+0x350>)
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e86:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <HAL_GPIO_Init+0x350>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000eaa:	4a1d      	ldr	r2, [pc, #116]	; (8000f20 <HAL_GPIO_Init+0x350>)
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <HAL_GPIO_Init+0x350>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ed4:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <HAL_GPIO_Init+0x350>)
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	3301      	adds	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f47f ae78 	bne.w	8000be0 <HAL_GPIO_Init+0x10>
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	371c      	adds	r7, #28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40010000 	.word	0x40010000
 8000f08:	48000400 	.word	0x48000400
 8000f0c:	48000800 	.word	0x48000800
 8000f10:	48000c00 	.word	0x48000c00
 8000f14:	48001000 	.word	0x48001000
 8000f18:	48001400 	.word	0x48001400
 8000f1c:	48001800 	.word	0x48001800
 8000f20:	40010400 	.word	0x40010400

08000f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]
 8000f30:	4613      	mov	r3, r2
 8000f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f34:	787b      	ldrb	r3, [r7, #1]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f40:	e002      	b.n	8000f48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f42:	887a      	ldrh	r2, [r7, #2]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <HAL_PWREx_GetVoltageRange+0x18>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40007000 	.word	0x40007000

08000f70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f7e:	d130      	bne.n	8000fe2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f8c:	d038      	beq.n	8001000 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2232      	movs	r2, #50	; 0x32
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000faa:	fba2 2303 	umull	r2, r3, r2, r3
 8000fae:	0c9b      	lsrs	r3, r3, #18
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fb4:	e002      	b.n	8000fbc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fc8:	d102      	bne.n	8000fd0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f2      	bne.n	8000fb6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fdc:	d110      	bne.n	8001000 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e00f      	b.n	8001002 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fee:	d007      	beq.n	8001000 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ff8:	4a05      	ldr	r2, [pc, #20]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ffe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40007000 	.word	0x40007000
 8001014:	20000000 	.word	0x20000000
 8001018:	431bde83 	.word	0x431bde83

0800101c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e3ca      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800102e:	4b97      	ldr	r3, [pc, #604]	; (800128c <HAL_RCC_OscConfig+0x270>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001038:	4b94      	ldr	r3, [pc, #592]	; (800128c <HAL_RCC_OscConfig+0x270>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 80e4 	beq.w	8001218 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <HAL_RCC_OscConfig+0x4a>
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	2b0c      	cmp	r3, #12
 800105a:	f040 808b 	bne.w	8001174 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2b01      	cmp	r3, #1
 8001062:	f040 8087 	bne.w	8001174 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001066:	4b89      	ldr	r3, [pc, #548]	; (800128c <HAL_RCC_OscConfig+0x270>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d005      	beq.n	800107e <HAL_RCC_OscConfig+0x62>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e3a2      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a1a      	ldr	r2, [r3, #32]
 8001082:	4b82      	ldr	r3, [pc, #520]	; (800128c <HAL_RCC_OscConfig+0x270>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	2b00      	cmp	r3, #0
 800108c:	d004      	beq.n	8001098 <HAL_RCC_OscConfig+0x7c>
 800108e:	4b7f      	ldr	r3, [pc, #508]	; (800128c <HAL_RCC_OscConfig+0x270>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001096:	e005      	b.n	80010a4 <HAL_RCC_OscConfig+0x88>
 8001098:	4b7c      	ldr	r3, [pc, #496]	; (800128c <HAL_RCC_OscConfig+0x270>)
 800109a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800109e:	091b      	lsrs	r3, r3, #4
 80010a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d223      	bcs.n	80010f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fd55 	bl	8001b5c <RCC_SetFlashLatencyFromMSIRange>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e383      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010bc:	4b73      	ldr	r3, [pc, #460]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a72      	ldr	r2, [pc, #456]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b70      	ldr	r3, [pc, #448]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	496d      	ldr	r1, [pc, #436]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010da:	4b6c      	ldr	r3, [pc, #432]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	4968      	ldr	r1, [pc, #416]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	604b      	str	r3, [r1, #4]
 80010ee:	e025      	b.n	800113c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010f0:	4b66      	ldr	r3, [pc, #408]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a65      	ldr	r2, [pc, #404]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80010f6:	f043 0308 	orr.w	r3, r3, #8
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	4b63      	ldr	r3, [pc, #396]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4960      	ldr	r1, [pc, #384]	; (800128c <HAL_RCC_OscConfig+0x270>)
 800110a:	4313      	orrs	r3, r2
 800110c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800110e:	4b5f      	ldr	r3, [pc, #380]	; (800128c <HAL_RCC_OscConfig+0x270>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	495b      	ldr	r1, [pc, #364]	; (800128c <HAL_RCC_OscConfig+0x270>)
 800111e:	4313      	orrs	r3, r2
 8001120:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d109      	bne.n	800113c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fd15 	bl	8001b5c <RCC_SetFlashLatencyFromMSIRange>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e343      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800113c:	f000 fc4a 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 8001140:	4602      	mov	r2, r0
 8001142:	4b52      	ldr	r3, [pc, #328]	; (800128c <HAL_RCC_OscConfig+0x270>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	091b      	lsrs	r3, r3, #4
 8001148:	f003 030f 	and.w	r3, r3, #15
 800114c:	4950      	ldr	r1, [pc, #320]	; (8001290 <HAL_RCC_OscConfig+0x274>)
 800114e:	5ccb      	ldrb	r3, [r1, r3]
 8001150:	f003 031f 	and.w	r3, r3, #31
 8001154:	fa22 f303 	lsr.w	r3, r2, r3
 8001158:	4a4e      	ldr	r2, [pc, #312]	; (8001294 <HAL_RCC_OscConfig+0x278>)
 800115a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800115c:	4b4e      	ldr	r3, [pc, #312]	; (8001298 <HAL_RCC_OscConfig+0x27c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fbf3 	bl	800094c <HAL_InitTick>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d052      	beq.n	8001216 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	e327      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d032      	beq.n	80011e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800117c:	4b43      	ldr	r3, [pc, #268]	; (800128c <HAL_RCC_OscConfig+0x270>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a42      	ldr	r2, [pc, #264]	; (800128c <HAL_RCC_OscConfig+0x270>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001188:	f7ff fc30 	bl	80009ec <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001190:	f7ff fc2c 	bl	80009ec <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e310      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011a2:	4b3a      	ldr	r3, [pc, #232]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ae:	4b37      	ldr	r3, [pc, #220]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a36      	ldr	r2, [pc, #216]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	4b34      	ldr	r3, [pc, #208]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	4931      	ldr	r1, [pc, #196]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011cc:	4b2f      	ldr	r3, [pc, #188]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	492c      	ldr	r1, [pc, #176]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	604b      	str	r3, [r1, #4]
 80011e0:	e01a      	b.n	8001218 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a29      	ldr	r2, [pc, #164]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011ee:	f7ff fbfd 	bl	80009ec <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011f6:	f7ff fbf9 	bl	80009ec <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e2dd      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001208:	4b20      	ldr	r3, [pc, #128]	; (800128c <HAL_RCC_OscConfig+0x270>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1f0      	bne.n	80011f6 <HAL_RCC_OscConfig+0x1da>
 8001214:	e000      	b.n	8001218 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001216:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d074      	beq.n	800130e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2b08      	cmp	r3, #8
 8001228:	d005      	beq.n	8001236 <HAL_RCC_OscConfig+0x21a>
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	2b0c      	cmp	r3, #12
 800122e:	d10e      	bne.n	800124e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2b03      	cmp	r3, #3
 8001234:	d10b      	bne.n	800124e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_RCC_OscConfig+0x270>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d064      	beq.n	800130c <HAL_RCC_OscConfig+0x2f0>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d160      	bne.n	800130c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e2ba      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001256:	d106      	bne.n	8001266 <HAL_RCC_OscConfig+0x24a>
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <HAL_RCC_OscConfig+0x270>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0b      	ldr	r2, [pc, #44]	; (800128c <HAL_RCC_OscConfig+0x270>)
 800125e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	e026      	b.n	80012b4 <HAL_RCC_OscConfig+0x298>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800126e:	d115      	bne.n	800129c <HAL_RCC_OscConfig+0x280>
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_RCC_OscConfig+0x270>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a05      	ldr	r2, [pc, #20]	; (800128c <HAL_RCC_OscConfig+0x270>)
 8001276:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_RCC_OscConfig+0x270>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a02      	ldr	r2, [pc, #8]	; (800128c <HAL_RCC_OscConfig+0x270>)
 8001282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e014      	b.n	80012b4 <HAL_RCC_OscConfig+0x298>
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000
 8001290:	08003d94 	.word	0x08003d94
 8001294:	20000000 	.word	0x20000000
 8001298:	20000004 	.word	0x20000004
 800129c:	4ba0      	ldr	r3, [pc, #640]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a9f      	ldr	r2, [pc, #636]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 80012a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b9d      	ldr	r3, [pc, #628]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a9c      	ldr	r2, [pc, #624]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 80012ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d013      	beq.n	80012e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012bc:	f7ff fb96 	bl	80009ec <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fb92 	bl	80009ec <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e276      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012d6:	4b92      	ldr	r3, [pc, #584]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0x2a8>
 80012e2:	e014      	b.n	800130e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fb82 	bl	80009ec <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fb7e 	bl	80009ec <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e262      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012fe:	4b88      	ldr	r3, [pc, #544]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x2d0>
 800130a:	e000      	b.n	800130e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d060      	beq.n	80013dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	2b04      	cmp	r3, #4
 800131e:	d005      	beq.n	800132c <HAL_RCC_OscConfig+0x310>
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	2b0c      	cmp	r3, #12
 8001324:	d119      	bne.n	800135a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d116      	bne.n	800135a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800132c:	4b7c      	ldr	r3, [pc, #496]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <HAL_RCC_OscConfig+0x328>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e23f      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001344:	4b76      	ldr	r3, [pc, #472]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	061b      	lsls	r3, r3, #24
 8001352:	4973      	ldr	r1, [pc, #460]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001358:	e040      	b.n	80013dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d023      	beq.n	80013aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001362:	4b6f      	ldr	r3, [pc, #444]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a6e      	ldr	r2, [pc, #440]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136e:	f7ff fb3d 	bl	80009ec <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001376:	f7ff fb39 	bl	80009ec <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e21d      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001388:	4b65      	ldr	r3, [pc, #404]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001394:	4b62      	ldr	r3, [pc, #392]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	061b      	lsls	r3, r3, #24
 80013a2:	495f      	ldr	r1, [pc, #380]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
 80013a8:	e018      	b.n	80013dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013aa:	4b5d      	ldr	r3, [pc, #372]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a5c      	ldr	r2, [pc, #368]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 80013b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b6:	f7ff fb19 	bl	80009ec <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013be:	f7ff fb15 	bl	80009ec <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e1f9      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013d0:	4b53      	ldr	r3, [pc, #332]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f0      	bne.n	80013be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d03c      	beq.n	8001462 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d01c      	beq.n	800142a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f0:	4b4b      	ldr	r3, [pc, #300]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 80013f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f6:	4a4a      	ldr	r2, [pc, #296]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001400:	f7ff faf4 	bl	80009ec <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001408:	f7ff faf0 	bl	80009ec <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e1d4      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800141a:	4b41      	ldr	r3, [pc, #260]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 800141c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0ef      	beq.n	8001408 <HAL_RCC_OscConfig+0x3ec>
 8001428:	e01b      	b.n	8001462 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142a:	4b3d      	ldr	r3, [pc, #244]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 800142c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001430:	4a3b      	ldr	r2, [pc, #236]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 8001432:	f023 0301 	bic.w	r3, r3, #1
 8001436:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143a:	f7ff fad7 	bl	80009ec <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001442:	f7ff fad3 	bl	80009ec <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e1b7      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001454:	4b32      	ldr	r3, [pc, #200]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 8001456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1ef      	bne.n	8001442 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 80a6 	beq.w	80015bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001474:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 8001476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10d      	bne.n	800149c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001480:	4b27      	ldr	r3, [pc, #156]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 8001482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001484:	4a26      	ldr	r2, [pc, #152]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 8001486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148a:	6593      	str	r3, [r2, #88]	; 0x58
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 800148e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001498:	2301      	movs	r3, #1
 800149a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800149c:	4b21      	ldr	r3, [pc, #132]	; (8001524 <HAL_RCC_OscConfig+0x508>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d118      	bne.n	80014da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014a8:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <HAL_RCC_OscConfig+0x508>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <HAL_RCC_OscConfig+0x508>)
 80014ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b4:	f7ff fa9a 	bl	80009ec <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014bc:	f7ff fa96 	bl	80009ec <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e17a      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_RCC_OscConfig+0x508>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d108      	bne.n	80014f4 <HAL_RCC_OscConfig+0x4d8>
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 80014e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014f2:	e029      	b.n	8001548 <HAL_RCC_OscConfig+0x52c>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b05      	cmp	r3, #5
 80014fa:	d115      	bne.n	8001528 <HAL_RCC_OscConfig+0x50c>
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 80014fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001502:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 800150e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001512:	4a03      	ldr	r2, [pc, #12]	; (8001520 <HAL_RCC_OscConfig+0x504>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800151c:	e014      	b.n	8001548 <HAL_RCC_OscConfig+0x52c>
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	40007000 	.word	0x40007000
 8001528:	4b9c      	ldr	r3, [pc, #624]	; (800179c <HAL_RCC_OscConfig+0x780>)
 800152a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152e:	4a9b      	ldr	r2, [pc, #620]	; (800179c <HAL_RCC_OscConfig+0x780>)
 8001530:	f023 0301 	bic.w	r3, r3, #1
 8001534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001538:	4b98      	ldr	r3, [pc, #608]	; (800179c <HAL_RCC_OscConfig+0x780>)
 800153a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153e:	4a97      	ldr	r2, [pc, #604]	; (800179c <HAL_RCC_OscConfig+0x780>)
 8001540:	f023 0304 	bic.w	r3, r3, #4
 8001544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d016      	beq.n	800157e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff fa4c 	bl	80009ec <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001556:	e00a      	b.n	800156e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001558:	f7ff fa48 	bl	80009ec <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f241 3288 	movw	r2, #5000	; 0x1388
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e12a      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800156e:	4b8b      	ldr	r3, [pc, #556]	; (800179c <HAL_RCC_OscConfig+0x780>)
 8001570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0ed      	beq.n	8001558 <HAL_RCC_OscConfig+0x53c>
 800157c:	e015      	b.n	80015aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157e:	f7ff fa35 	bl	80009ec <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001584:	e00a      	b.n	800159c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff fa31 	bl	80009ec <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f241 3288 	movw	r2, #5000	; 0x1388
 8001594:	4293      	cmp	r3, r2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e113      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800159c:	4b7f      	ldr	r3, [pc, #508]	; (800179c <HAL_RCC_OscConfig+0x780>)
 800159e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ed      	bne.n	8001586 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015aa:	7ffb      	ldrb	r3, [r7, #31]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d105      	bne.n	80015bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b0:	4b7a      	ldr	r3, [pc, #488]	; (800179c <HAL_RCC_OscConfig+0x780>)
 80015b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b4:	4a79      	ldr	r2, [pc, #484]	; (800179c <HAL_RCC_OscConfig+0x780>)
 80015b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80fe 	beq.w	80017c2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	f040 80d0 	bne.w	8001770 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015d0:	4b72      	ldr	r3, [pc, #456]	; (800179c <HAL_RCC_OscConfig+0x780>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f003 0203 	and.w	r2, r3, #3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d130      	bne.n	8001646 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	3b01      	subs	r3, #1
 80015f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d127      	bne.n	8001646 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001600:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001602:	429a      	cmp	r2, r3
 8001604:	d11f      	bne.n	8001646 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001610:	2a07      	cmp	r2, #7
 8001612:	bf14      	ite	ne
 8001614:	2201      	movne	r2, #1
 8001616:	2200      	moveq	r2, #0
 8001618:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800161a:	4293      	cmp	r3, r2
 800161c:	d113      	bne.n	8001646 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	3b01      	subs	r3, #1
 800162c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d109      	bne.n	8001646 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	085b      	lsrs	r3, r3, #1
 800163e:	3b01      	subs	r3, #1
 8001640:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001642:	429a      	cmp	r2, r3
 8001644:	d06e      	beq.n	8001724 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b0c      	cmp	r3, #12
 800164a:	d069      	beq.n	8001720 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800164c:	4b53      	ldr	r3, [pc, #332]	; (800179c <HAL_RCC_OscConfig+0x780>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d105      	bne.n	8001664 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001658:	4b50      	ldr	r3, [pc, #320]	; (800179c <HAL_RCC_OscConfig+0x780>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e0ad      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001668:	4b4c      	ldr	r3, [pc, #304]	; (800179c <HAL_RCC_OscConfig+0x780>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a4b      	ldr	r2, [pc, #300]	; (800179c <HAL_RCC_OscConfig+0x780>)
 800166e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001672:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001674:	f7ff f9ba 	bl	80009ec <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff f9b6 	bl	80009ec <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e09a      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800168e:	4b43      	ldr	r3, [pc, #268]	; (800179c <HAL_RCC_OscConfig+0x780>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800169a:	4b40      	ldr	r3, [pc, #256]	; (800179c <HAL_RCC_OscConfig+0x780>)
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	4b40      	ldr	r3, [pc, #256]	; (80017a0 <HAL_RCC_OscConfig+0x784>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016aa:	3a01      	subs	r2, #1
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	4311      	orrs	r1, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016b4:	0212      	lsls	r2, r2, #8
 80016b6:	4311      	orrs	r1, r2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016bc:	0852      	lsrs	r2, r2, #1
 80016be:	3a01      	subs	r2, #1
 80016c0:	0552      	lsls	r2, r2, #21
 80016c2:	4311      	orrs	r1, r2
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016c8:	0852      	lsrs	r2, r2, #1
 80016ca:	3a01      	subs	r2, #1
 80016cc:	0652      	lsls	r2, r2, #25
 80016ce:	4311      	orrs	r1, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016d4:	0912      	lsrs	r2, r2, #4
 80016d6:	0452      	lsls	r2, r2, #17
 80016d8:	430a      	orrs	r2, r1
 80016da:	4930      	ldr	r1, [pc, #192]	; (800179c <HAL_RCC_OscConfig+0x780>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016e0:	4b2e      	ldr	r3, [pc, #184]	; (800179c <HAL_RCC_OscConfig+0x780>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a2d      	ldr	r2, [pc, #180]	; (800179c <HAL_RCC_OscConfig+0x780>)
 80016e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016ec:	4b2b      	ldr	r3, [pc, #172]	; (800179c <HAL_RCC_OscConfig+0x780>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4a2a      	ldr	r2, [pc, #168]	; (800179c <HAL_RCC_OscConfig+0x780>)
 80016f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016f8:	f7ff f978 	bl	80009ec <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff f974 	bl	80009ec <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e058      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <HAL_RCC_OscConfig+0x780>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800171e:	e050      	b.n	80017c2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e04f      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001724:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_RCC_OscConfig+0x780>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d148      	bne.n	80017c2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001730:	4b1a      	ldr	r3, [pc, #104]	; (800179c <HAL_RCC_OscConfig+0x780>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a19      	ldr	r2, [pc, #100]	; (800179c <HAL_RCC_OscConfig+0x780>)
 8001736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800173a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_RCC_OscConfig+0x780>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4a16      	ldr	r2, [pc, #88]	; (800179c <HAL_RCC_OscConfig+0x780>)
 8001742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001746:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001748:	f7ff f950 	bl	80009ec <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001750:	f7ff f94c 	bl	80009ec <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e030      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_RCC_OscConfig+0x780>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0x734>
 800176e:	e028      	b.n	80017c2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2b0c      	cmp	r3, #12
 8001774:	d023      	beq.n	80017be <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_RCC_OscConfig+0x780>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a08      	ldr	r2, [pc, #32]	; (800179c <HAL_RCC_OscConfig+0x780>)
 800177c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001782:	f7ff f933 	bl	80009ec <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001788:	e00c      	b.n	80017a4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff f92f 	bl	80009ec <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d905      	bls.n	80017a4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e013      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
 800179c:	40021000 	.word	0x40021000
 80017a0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_RCC_OscConfig+0x7b0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1ec      	bne.n	800178a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_RCC_OscConfig+0x7b0>)
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	4905      	ldr	r1, [pc, #20]	; (80017cc <HAL_RCC_OscConfig+0x7b0>)
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_RCC_OscConfig+0x7b4>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	60cb      	str	r3, [r1, #12]
 80017bc:	e001      	b.n	80017c2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000
 80017d0:	feeefffc 	.word	0xfeeefffc

080017d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0e7      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b75      	ldr	r3, [pc, #468]	; (80019c0 <HAL_RCC_ClockConfig+0x1ec>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d910      	bls.n	8001818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b72      	ldr	r3, [pc, #456]	; (80019c0 <HAL_RCC_ClockConfig+0x1ec>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 0207 	bic.w	r2, r3, #7
 80017fe:	4970      	ldr	r1, [pc, #448]	; (80019c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b6e      	ldr	r3, [pc, #440]	; (80019c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0cf      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d010      	beq.n	8001846 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	4b66      	ldr	r3, [pc, #408]	; (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001830:	429a      	cmp	r2, r3
 8001832:	d908      	bls.n	8001846 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001834:	4b63      	ldr	r3, [pc, #396]	; (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4960      	ldr	r1, [pc, #384]	; (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d04c      	beq.n	80018ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185a:	4b5a      	ldr	r3, [pc, #360]	; (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d121      	bne.n	80018aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0a6      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001872:	4b54      	ldr	r3, [pc, #336]	; (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d115      	bne.n	80018aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e09a      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800188a:	4b4e      	ldr	r3, [pc, #312]	; (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e08e      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800189a:	4b4a      	ldr	r3, [pc, #296]	; (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e086      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018aa:	4b46      	ldr	r3, [pc, #280]	; (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f023 0203 	bic.w	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4943      	ldr	r1, [pc, #268]	; (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018bc:	f7ff f896 	bl	80009ec <HAL_GetTick>
 80018c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	e00a      	b.n	80018da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c4:	f7ff f892 	bl	80009ec <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e06e      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	4b3a      	ldr	r3, [pc, #232]	; (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 020c 	and.w	r2, r3, #12
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d1eb      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d010      	beq.n	800191a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001904:	429a      	cmp	r2, r3
 8001906:	d208      	bcs.n	800191a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001908:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	492b      	ldr	r1, [pc, #172]	; (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800191a:	4b29      	ldr	r3, [pc, #164]	; (80019c0 <HAL_RCC_ClockConfig+0x1ec>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d210      	bcs.n	800194a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <HAL_RCC_ClockConfig+0x1ec>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 0207 	bic.w	r2, r3, #7
 8001930:	4923      	ldr	r1, [pc, #140]	; (80019c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001938:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <HAL_RCC_ClockConfig+0x1ec>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d001      	beq.n	800194a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e036      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	2b00      	cmp	r3, #0
 8001954:	d008      	beq.n	8001968 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001956:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	4918      	ldr	r1, [pc, #96]	; (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001964:	4313      	orrs	r3, r2
 8001966:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d009      	beq.n	8001988 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4910      	ldr	r1, [pc, #64]	; (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001988:	f000 f824 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 800198c:	4602      	mov	r2, r0
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	091b      	lsrs	r3, r3, #4
 8001994:	f003 030f 	and.w	r3, r3, #15
 8001998:	490b      	ldr	r1, [pc, #44]	; (80019c8 <HAL_RCC_ClockConfig+0x1f4>)
 800199a:	5ccb      	ldrb	r3, [r1, r3]
 800199c:	f003 031f 	and.w	r3, r3, #31
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
 80019a4:	4a09      	ldr	r2, [pc, #36]	; (80019cc <HAL_RCC_ClockConfig+0x1f8>)
 80019a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_ClockConfig+0x1fc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe ffcd 	bl	800094c <HAL_InitTick>
 80019b2:	4603      	mov	r3, r0
 80019b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80019b6:	7afb      	ldrb	r3, [r7, #11]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40022000 	.word	0x40022000
 80019c4:	40021000 	.word	0x40021000
 80019c8:	08003d94 	.word	0x08003d94
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000004 	.word	0x20000004

080019d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e2:	4b3e      	ldr	r3, [pc, #248]	; (8001adc <HAL_RCC_GetSysClockFreq+0x108>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019ec:	4b3b      	ldr	r3, [pc, #236]	; (8001adc <HAL_RCC_GetSysClockFreq+0x108>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_GetSysClockFreq+0x34>
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	2b0c      	cmp	r3, #12
 8001a00:	d121      	bne.n	8001a46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d11e      	bne.n	8001a46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a08:	4b34      	ldr	r3, [pc, #208]	; (8001adc <HAL_RCC_GetSysClockFreq+0x108>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d107      	bne.n	8001a24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a14:	4b31      	ldr	r3, [pc, #196]	; (8001adc <HAL_RCC_GetSysClockFreq+0x108>)
 8001a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	e005      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a24:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <HAL_RCC_GetSysClockFreq+0x108>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a30:	4a2b      	ldr	r2, [pc, #172]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10d      	bne.n	8001a5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a44:	e00a      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d102      	bne.n	8001a52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a4c:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a4e:	61bb      	str	r3, [r7, #24]
 8001a50:	e004      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a58:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	2b0c      	cmp	r3, #12
 8001a60:	d134      	bne.n	8001acc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a62:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <HAL_RCC_GetSysClockFreq+0x108>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d003      	beq.n	8001a7a <HAL_RCC_GetSysClockFreq+0xa6>
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d003      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0xac>
 8001a78:	e005      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a7c:	617b      	str	r3, [r7, #20]
      break;
 8001a7e:	e005      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a82:	617b      	str	r3, [r7, #20]
      break;
 8001a84:	e002      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	617b      	str	r3, [r7, #20]
      break;
 8001a8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <HAL_RCC_GetSysClockFreq+0x108>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	3301      	adds	r3, #1
 8001a98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	fb03 f202 	mul.w	r2, r3, r2
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	0e5b      	lsrs	r3, r3, #25
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	3301      	adds	r3, #1
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001acc:	69bb      	ldr	r3, [r7, #24]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	08003dac 	.word	0x08003dac
 8001ae4:	00f42400 	.word	0x00f42400
 8001ae8:	007a1200 	.word	0x007a1200

08001aec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000000 	.word	0x20000000

08001b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b08:	f7ff fff0 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	0a1b      	lsrs	r3, r3, #8
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4904      	ldr	r1, [pc, #16]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	08003da4 	.word	0x08003da4

08001b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b34:	f7ff ffda 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0adb      	lsrs	r3, r3, #11
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4904      	ldr	r1, [pc, #16]	; (8001b58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40021000 	.word	0x40021000
 8001b58:	08003da4 	.word	0x08003da4

08001b5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b68:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b74:	f7ff f9ee 	bl	8000f54 <HAL_PWREx_GetVoltageRange>
 8001b78:	6178      	str	r0, [r7, #20]
 8001b7a:	e014      	b.n	8001ba6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b7c:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	4a24      	ldr	r2, [pc, #144]	; (8001c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b86:	6593      	str	r3, [r2, #88]	; 0x58
 8001b88:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b94:	f7ff f9de 	bl	8000f54 <HAL_PWREx_GetVoltageRange>
 8001b98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	4a1d      	ldr	r2, [pc, #116]	; (8001c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bac:	d10b      	bne.n	8001bc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b80      	cmp	r3, #128	; 0x80
 8001bb2:	d919      	bls.n	8001be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2ba0      	cmp	r3, #160	; 0xa0
 8001bb8:	d902      	bls.n	8001bc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bba:	2302      	movs	r3, #2
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	e013      	b.n	8001be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	e010      	b.n	8001be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b80      	cmp	r3, #128	; 0x80
 8001bca:	d902      	bls.n	8001bd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bcc:	2303      	movs	r3, #3
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	e00a      	b.n	8001be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b80      	cmp	r3, #128	; 0x80
 8001bd6:	d102      	bne.n	8001bde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bd8:	2302      	movs	r3, #2
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	e004      	b.n	8001be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b70      	cmp	r3, #112	; 0x70
 8001be2:	d101      	bne.n	8001be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001be4:	2301      	movs	r3, #1
 8001be6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 0207 	bic.w	r2, r3, #7
 8001bf0:	4909      	ldr	r1, [pc, #36]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d001      	beq.n	8001c0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40022000 	.word	0x40022000

08001c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c24:	2300      	movs	r3, #0
 8001c26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c28:	2300      	movs	r3, #0
 8001c2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d041      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c40:	d02a      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001c42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c46:	d824      	bhi.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c4c:	d008      	beq.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001c4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c52:	d81e      	bhi.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00a      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c5c:	d010      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001c5e:	e018      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c60:	4b86      	ldr	r3, [pc, #536]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4a85      	ldr	r2, [pc, #532]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c6c:	e015      	b.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fabb 	bl	80021f0 <RCCEx_PLLSAI1_Config>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c7e:	e00c      	b.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3320      	adds	r3, #32
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 fba6 	bl	80023d8 <RCCEx_PLLSAI2_Config>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c90:	e003      	b.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	74fb      	strb	r3, [r7, #19]
      break;
 8001c96:	e000      	b.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c9a:	7cfb      	ldrb	r3, [r7, #19]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10b      	bne.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ca0:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cae:	4973      	ldr	r1, [pc, #460]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001cb6:	e001      	b.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cb8:	7cfb      	ldrb	r3, [r7, #19]
 8001cba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d041      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ccc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001cd0:	d02a      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001cd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001cd6:	d824      	bhi.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001cd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cdc:	d008      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ce2:	d81e      	bhi.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00a      	beq.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cec:	d010      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001cee:	e018      	b.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cf0:	4b62      	ldr	r3, [pc, #392]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4a61      	ldr	r2, [pc, #388]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001cfc:	e015      	b.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fa73 	bl	80021f0 <RCCEx_PLLSAI1_Config>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d0e:	e00c      	b.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3320      	adds	r3, #32
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fb5e 	bl	80023d8 <RCCEx_PLLSAI2_Config>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d20:	e003      	b.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	74fb      	strb	r3, [r7, #19]
      break;
 8001d26:	e000      	b.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d2a:	7cfb      	ldrb	r3, [r7, #19]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10b      	bne.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d30:	4b52      	ldr	r3, [pc, #328]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d3e:	494f      	ldr	r1, [pc, #316]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d46:	e001      	b.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d48:	7cfb      	ldrb	r3, [r7, #19]
 8001d4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80a0 	beq.w	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d5e:	4b47      	ldr	r3, [pc, #284]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00d      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d74:	4b41      	ldr	r3, [pc, #260]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d78:	4a40      	ldr	r2, [pc, #256]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d80:	4b3e      	ldr	r3, [pc, #248]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d90:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a3a      	ldr	r2, [pc, #232]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d9c:	f7fe fe26 	bl	80009ec <HAL_GetTick>
 8001da0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001da2:	e009      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da4:	f7fe fe22 	bl	80009ec <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d902      	bls.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	74fb      	strb	r3, [r7, #19]
        break;
 8001db6:	e005      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001db8:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0ef      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001dc4:	7cfb      	ldrb	r3, [r7, #19]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d15c      	bne.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dca:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01f      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d019      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001de8:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001df2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001df4:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	4a20      	ldr	r2, [pc, #128]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0a:	4a1c      	ldr	r2, [pc, #112]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e14:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d016      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e26:	f7fe fde1 	bl	80009ec <HAL_GetTick>
 8001e2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e2c:	e00b      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2e:	f7fe fddd 	bl	80009ec <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d902      	bls.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	74fb      	strb	r3, [r7, #19]
            break;
 8001e44:	e006      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0ec      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001e54:	7cfb      	ldrb	r3, [r7, #19]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e6a:	4904      	ldr	r1, [pc, #16]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e72:	e009      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e74:	7cfb      	ldrb	r3, [r7, #19]
 8001e76:	74bb      	strb	r3, [r7, #18]
 8001e78:	e006      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e84:	7cfb      	ldrb	r3, [r7, #19]
 8001e86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e88:	7c7b      	ldrb	r3, [r7, #17]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d105      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8e:	4b9e      	ldr	r3, [pc, #632]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	4a9d      	ldr	r2, [pc, #628]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ea6:	4b98      	ldr	r3, [pc, #608]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eac:	f023 0203 	bic.w	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb4:	4994      	ldr	r1, [pc, #592]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00a      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ec8:	4b8f      	ldr	r3, [pc, #572]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ece:	f023 020c 	bic.w	r2, r3, #12
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed6:	498c      	ldr	r1, [pc, #560]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001eea:	4b87      	ldr	r3, [pc, #540]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	4983      	ldr	r1, [pc, #524]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f0c:	4b7e      	ldr	r3, [pc, #504]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	497b      	ldr	r1, [pc, #492]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f2e:	4b76      	ldr	r3, [pc, #472]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3c:	4972      	ldr	r1, [pc, #456]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00a      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f50:	4b6d      	ldr	r3, [pc, #436]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	496a      	ldr	r1, [pc, #424]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f72:	4b65      	ldr	r3, [pc, #404]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	4961      	ldr	r1, [pc, #388]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00a      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f94:	4b5c      	ldr	r3, [pc, #368]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa2:	4959      	ldr	r1, [pc, #356]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fb6:	4b54      	ldr	r3, [pc, #336]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc4:	4950      	ldr	r1, [pc, #320]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fd8:	4b4b      	ldr	r3, [pc, #300]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fde:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	4948      	ldr	r1, [pc, #288]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ffa:	4b43      	ldr	r3, [pc, #268]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002000:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	493f      	ldr	r1, [pc, #252]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d028      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800201c:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002022:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800202a:	4937      	ldr	r1, [pc, #220]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800203a:	d106      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800203c:	4b32      	ldr	r3, [pc, #200]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4a31      	ldr	r2, [pc, #196]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002046:	60d3      	str	r3, [r2, #12]
 8002048:	e011      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800204e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002052:	d10c      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3304      	adds	r3, #4
 8002058:	2101      	movs	r1, #1
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f8c8 	bl	80021f0 <RCCEx_PLLSAI1_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002064:	7cfb      	ldrb	r3, [r7, #19]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800206a:	7cfb      	ldrb	r3, [r7, #19]
 800206c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d028      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800207a:	4b23      	ldr	r3, [pc, #140]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002080:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002088:	491f      	ldr	r1, [pc, #124]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002098:	d106      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800209a:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	4a1a      	ldr	r2, [pc, #104]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020a4:	60d3      	str	r3, [r2, #12]
 80020a6:	e011      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020b0:	d10c      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2101      	movs	r1, #1
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 f899 	bl	80021f0 <RCCEx_PLLSAI1_Config>
 80020be:	4603      	mov	r3, r0
 80020c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020c2:	7cfb      	ldrb	r3, [r7, #19]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d02b      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e6:	4908      	ldr	r1, [pc, #32]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020f6:	d109      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4a02      	ldr	r2, [pc, #8]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002102:	60d3      	str	r3, [r2, #12]
 8002104:	e014      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002110:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002114:	d10c      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3304      	adds	r3, #4
 800211a:	2101      	movs	r1, #1
 800211c:	4618      	mov	r0, r3
 800211e:	f000 f867 	bl	80021f0 <RCCEx_PLLSAI1_Config>
 8002122:	4603      	mov	r3, r0
 8002124:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002126:	7cfb      	ldrb	r3, [r7, #19]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d02f      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800213c:	4b2b      	ldr	r3, [pc, #172]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800214a:	4928      	ldr	r1, [pc, #160]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800215a:	d10d      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3304      	adds	r3, #4
 8002160:	2102      	movs	r1, #2
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f844 	bl	80021f0 <RCCEx_PLLSAI1_Config>
 8002168:	4603      	mov	r3, r0
 800216a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800216c:	7cfb      	ldrb	r3, [r7, #19]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d014      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002172:	7cfb      	ldrb	r3, [r7, #19]
 8002174:	74bb      	strb	r3, [r7, #18]
 8002176:	e011      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800217c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002180:	d10c      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3320      	adds	r3, #32
 8002186:	2102      	movs	r1, #2
 8002188:	4618      	mov	r0, r3
 800218a:	f000 f925 	bl	80023d8 <RCCEx_PLLSAI2_Config>
 800218e:	4603      	mov	r3, r0
 8002190:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002192:	7cfb      	ldrb	r3, [r7, #19]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002198:	7cfb      	ldrb	r3, [r7, #19]
 800219a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021b6:	490d      	ldr	r1, [pc, #52]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00b      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021da:	4904      	ldr	r1, [pc, #16]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000

080021f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021fe:	4b75      	ldr	r3, [pc, #468]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d018      	beq.n	800223c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800220a:	4b72      	ldr	r3, [pc, #456]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f003 0203 	and.w	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d10d      	bne.n	8002236 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
       ||
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002222:	4b6c      	ldr	r3, [pc, #432]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
       ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d047      	beq.n	80022c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	73fb      	strb	r3, [r7, #15]
 800223a:	e044      	b.n	80022c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d018      	beq.n	8002276 <RCCEx_PLLSAI1_Config+0x86>
 8002244:	2b03      	cmp	r3, #3
 8002246:	d825      	bhi.n	8002294 <RCCEx_PLLSAI1_Config+0xa4>
 8002248:	2b01      	cmp	r3, #1
 800224a:	d002      	beq.n	8002252 <RCCEx_PLLSAI1_Config+0x62>
 800224c:	2b02      	cmp	r3, #2
 800224e:	d009      	beq.n	8002264 <RCCEx_PLLSAI1_Config+0x74>
 8002250:	e020      	b.n	8002294 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002252:	4b60      	ldr	r3, [pc, #384]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d11d      	bne.n	800229a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002262:	e01a      	b.n	800229a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002264:	4b5b      	ldr	r3, [pc, #364]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226c:	2b00      	cmp	r3, #0
 800226e:	d116      	bne.n	800229e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002274:	e013      	b.n	800229e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002276:	4b57      	ldr	r3, [pc, #348]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10f      	bne.n	80022a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002282:	4b54      	ldr	r3, [pc, #336]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002292:	e006      	b.n	80022a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
      break;
 8002298:	e004      	b.n	80022a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800229a:	bf00      	nop
 800229c:	e002      	b.n	80022a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800229e:	bf00      	nop
 80022a0:	e000      	b.n	80022a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10d      	bne.n	80022c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022aa:	4b4a      	ldr	r3, [pc, #296]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6819      	ldr	r1, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	430b      	orrs	r3, r1
 80022c0:	4944      	ldr	r1, [pc, #272]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d17d      	bne.n	80023c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022cc:	4b41      	ldr	r3, [pc, #260]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a40      	ldr	r2, [pc, #256]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d8:	f7fe fb88 	bl	80009ec <HAL_GetTick>
 80022dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022de:	e009      	b.n	80022f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022e0:	f7fe fb84 	bl	80009ec <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d902      	bls.n	80022f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	73fb      	strb	r3, [r7, #15]
        break;
 80022f2:	e005      	b.n	8002300 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022f4:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1ef      	bne.n	80022e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d160      	bne.n	80023c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d111      	bne.n	8002330 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800230c:	4b31      	ldr	r3, [pc, #196]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6892      	ldr	r2, [r2, #8]
 800231c:	0211      	lsls	r1, r2, #8
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68d2      	ldr	r2, [r2, #12]
 8002322:	0912      	lsrs	r2, r2, #4
 8002324:	0452      	lsls	r2, r2, #17
 8002326:	430a      	orrs	r2, r1
 8002328:	492a      	ldr	r1, [pc, #168]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800232a:	4313      	orrs	r3, r2
 800232c:	610b      	str	r3, [r1, #16]
 800232e:	e027      	b.n	8002380 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d112      	bne.n	800235c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800233e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6892      	ldr	r2, [r2, #8]
 8002346:	0211      	lsls	r1, r2, #8
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6912      	ldr	r2, [r2, #16]
 800234c:	0852      	lsrs	r2, r2, #1
 800234e:	3a01      	subs	r2, #1
 8002350:	0552      	lsls	r2, r2, #21
 8002352:	430a      	orrs	r2, r1
 8002354:	491f      	ldr	r1, [pc, #124]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002356:	4313      	orrs	r3, r2
 8002358:	610b      	str	r3, [r1, #16]
 800235a:	e011      	b.n	8002380 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800235c:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002364:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6892      	ldr	r2, [r2, #8]
 800236c:	0211      	lsls	r1, r2, #8
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6952      	ldr	r2, [r2, #20]
 8002372:	0852      	lsrs	r2, r2, #1
 8002374:	3a01      	subs	r2, #1
 8002376:	0652      	lsls	r2, r2, #25
 8002378:	430a      	orrs	r2, r1
 800237a:	4916      	ldr	r1, [pc, #88]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800237c:	4313      	orrs	r3, r2
 800237e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a13      	ldr	r2, [pc, #76]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002386:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800238a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238c:	f7fe fb2e 	bl	80009ec <HAL_GetTick>
 8002390:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002392:	e009      	b.n	80023a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002394:	f7fe fb2a 	bl	80009ec <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d902      	bls.n	80023a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	73fb      	strb	r3, [r7, #15]
          break;
 80023a6:	e005      	b.n	80023b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0ef      	beq.n	8002394 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	4904      	ldr	r1, [pc, #16]	; (80023d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000

080023d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023e6:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d018      	beq.n	8002424 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80023f2:	4b67      	ldr	r3, [pc, #412]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 0203 	and.w	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d10d      	bne.n	800241e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
       ||
 8002406:	2b00      	cmp	r3, #0
 8002408:	d009      	beq.n	800241e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800240a:	4b61      	ldr	r3, [pc, #388]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	091b      	lsrs	r3, r3, #4
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
       ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d047      	beq.n	80024ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	e044      	b.n	80024ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d018      	beq.n	800245e <RCCEx_PLLSAI2_Config+0x86>
 800242c:	2b03      	cmp	r3, #3
 800242e:	d825      	bhi.n	800247c <RCCEx_PLLSAI2_Config+0xa4>
 8002430:	2b01      	cmp	r3, #1
 8002432:	d002      	beq.n	800243a <RCCEx_PLLSAI2_Config+0x62>
 8002434:	2b02      	cmp	r3, #2
 8002436:	d009      	beq.n	800244c <RCCEx_PLLSAI2_Config+0x74>
 8002438:	e020      	b.n	800247c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800243a:	4b55      	ldr	r3, [pc, #340]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d11d      	bne.n	8002482 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800244a:	e01a      	b.n	8002482 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800244c:	4b50      	ldr	r3, [pc, #320]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002454:	2b00      	cmp	r3, #0
 8002456:	d116      	bne.n	8002486 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800245c:	e013      	b.n	8002486 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800245e:	4b4c      	ldr	r3, [pc, #304]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10f      	bne.n	800248a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800246a:	4b49      	ldr	r3, [pc, #292]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800247a:	e006      	b.n	800248a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
      break;
 8002480:	e004      	b.n	800248c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002482:	bf00      	nop
 8002484:	e002      	b.n	800248c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002486:	bf00      	nop
 8002488:	e000      	b.n	800248c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800248a:	bf00      	nop
    }

    if(status == HAL_OK)
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10d      	bne.n	80024ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002492:	4b3f      	ldr	r3, [pc, #252]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6819      	ldr	r1, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	430b      	orrs	r3, r1
 80024a8:	4939      	ldr	r1, [pc, #228]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d167      	bne.n	8002584 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80024b4:	4b36      	ldr	r3, [pc, #216]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a35      	ldr	r2, [pc, #212]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c0:	f7fe fa94 	bl	80009ec <HAL_GetTick>
 80024c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024c6:	e009      	b.n	80024dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80024c8:	f7fe fa90 	bl	80009ec <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d902      	bls.n	80024dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	73fb      	strb	r3, [r7, #15]
        break;
 80024da:	e005      	b.n	80024e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024dc:	4b2c      	ldr	r3, [pc, #176]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ef      	bne.n	80024c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d14a      	bne.n	8002584 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d111      	bne.n	8002518 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80024f4:	4b26      	ldr	r3, [pc, #152]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80024fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6892      	ldr	r2, [r2, #8]
 8002504:	0211      	lsls	r1, r2, #8
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68d2      	ldr	r2, [r2, #12]
 800250a:	0912      	lsrs	r2, r2, #4
 800250c:	0452      	lsls	r2, r2, #17
 800250e:	430a      	orrs	r2, r1
 8002510:	491f      	ldr	r1, [pc, #124]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002512:	4313      	orrs	r3, r2
 8002514:	614b      	str	r3, [r1, #20]
 8002516:	e011      	b.n	800253c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002518:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002520:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6892      	ldr	r2, [r2, #8]
 8002528:	0211      	lsls	r1, r2, #8
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6912      	ldr	r2, [r2, #16]
 800252e:	0852      	lsrs	r2, r2, #1
 8002530:	3a01      	subs	r2, #1
 8002532:	0652      	lsls	r2, r2, #25
 8002534:	430a      	orrs	r2, r1
 8002536:	4916      	ldr	r1, [pc, #88]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002538:	4313      	orrs	r3, r2
 800253a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800253c:	4b14      	ldr	r3, [pc, #80]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a13      	ldr	r2, [pc, #76]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002546:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002548:	f7fe fa50 	bl	80009ec <HAL_GetTick>
 800254c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800254e:	e009      	b.n	8002564 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002550:	f7fe fa4c 	bl	80009ec <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d902      	bls.n	8002564 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	73fb      	strb	r3, [r7, #15]
          break;
 8002562:	e005      	b.n	8002570 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002564:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0ef      	beq.n	8002550 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002578:	695a      	ldr	r2, [r3, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	4904      	ldr	r1, [pc, #16]	; (8002590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002580:	4313      	orrs	r3, r2
 8002582:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002584:	7bfb      	ldrb	r3, [r7, #15]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000

08002594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e040      	b.n	8002628 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7fe f8b0 	bl	800071c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2224      	movs	r2, #36	; 0x24
 80025c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0201 	bic.w	r2, r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f82c 	bl	8002630 <UART_SetConfig>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e022      	b.n	8002628 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fad8 	bl	8002ba0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800260e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fb5f 	bl	8002ce4 <UART_CheckIdleState>
 8002626:	4603      	mov	r3, r0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002634:	b08a      	sub	sp, #40	; 0x28
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	431a      	orrs	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	431a      	orrs	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	4313      	orrs	r3, r2
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4ba4      	ldr	r3, [pc, #656]	; (80028f0 <UART_SetConfig+0x2c0>)
 8002660:	4013      	ands	r3, r2
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002668:	430b      	orrs	r3, r1
 800266a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a99      	ldr	r2, [pc, #612]	; (80028f4 <UART_SetConfig+0x2c4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d004      	beq.n	800269c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002698:	4313      	orrs	r3, r2
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ac:	430a      	orrs	r2, r1
 80026ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a90      	ldr	r2, [pc, #576]	; (80028f8 <UART_SetConfig+0x2c8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d126      	bne.n	8002708 <UART_SetConfig+0xd8>
 80026ba:	4b90      	ldr	r3, [pc, #576]	; (80028fc <UART_SetConfig+0x2cc>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d81b      	bhi.n	8002700 <UART_SetConfig+0xd0>
 80026c8:	a201      	add	r2, pc, #4	; (adr r2, 80026d0 <UART_SetConfig+0xa0>)
 80026ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ce:	bf00      	nop
 80026d0:	080026e1 	.word	0x080026e1
 80026d4:	080026f1 	.word	0x080026f1
 80026d8:	080026e9 	.word	0x080026e9
 80026dc:	080026f9 	.word	0x080026f9
 80026e0:	2301      	movs	r3, #1
 80026e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026e6:	e116      	b.n	8002916 <UART_SetConfig+0x2e6>
 80026e8:	2302      	movs	r3, #2
 80026ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026ee:	e112      	b.n	8002916 <UART_SetConfig+0x2e6>
 80026f0:	2304      	movs	r3, #4
 80026f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026f6:	e10e      	b.n	8002916 <UART_SetConfig+0x2e6>
 80026f8:	2308      	movs	r3, #8
 80026fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026fe:	e10a      	b.n	8002916 <UART_SetConfig+0x2e6>
 8002700:	2310      	movs	r3, #16
 8002702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002706:	e106      	b.n	8002916 <UART_SetConfig+0x2e6>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a7c      	ldr	r2, [pc, #496]	; (8002900 <UART_SetConfig+0x2d0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d138      	bne.n	8002784 <UART_SetConfig+0x154>
 8002712:	4b7a      	ldr	r3, [pc, #488]	; (80028fc <UART_SetConfig+0x2cc>)
 8002714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002718:	f003 030c 	and.w	r3, r3, #12
 800271c:	2b0c      	cmp	r3, #12
 800271e:	d82d      	bhi.n	800277c <UART_SetConfig+0x14c>
 8002720:	a201      	add	r2, pc, #4	; (adr r2, 8002728 <UART_SetConfig+0xf8>)
 8002722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002726:	bf00      	nop
 8002728:	0800275d 	.word	0x0800275d
 800272c:	0800277d 	.word	0x0800277d
 8002730:	0800277d 	.word	0x0800277d
 8002734:	0800277d 	.word	0x0800277d
 8002738:	0800276d 	.word	0x0800276d
 800273c:	0800277d 	.word	0x0800277d
 8002740:	0800277d 	.word	0x0800277d
 8002744:	0800277d 	.word	0x0800277d
 8002748:	08002765 	.word	0x08002765
 800274c:	0800277d 	.word	0x0800277d
 8002750:	0800277d 	.word	0x0800277d
 8002754:	0800277d 	.word	0x0800277d
 8002758:	08002775 	.word	0x08002775
 800275c:	2300      	movs	r3, #0
 800275e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002762:	e0d8      	b.n	8002916 <UART_SetConfig+0x2e6>
 8002764:	2302      	movs	r3, #2
 8002766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800276a:	e0d4      	b.n	8002916 <UART_SetConfig+0x2e6>
 800276c:	2304      	movs	r3, #4
 800276e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002772:	e0d0      	b.n	8002916 <UART_SetConfig+0x2e6>
 8002774:	2308      	movs	r3, #8
 8002776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800277a:	e0cc      	b.n	8002916 <UART_SetConfig+0x2e6>
 800277c:	2310      	movs	r3, #16
 800277e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002782:	e0c8      	b.n	8002916 <UART_SetConfig+0x2e6>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a5e      	ldr	r2, [pc, #376]	; (8002904 <UART_SetConfig+0x2d4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d125      	bne.n	80027da <UART_SetConfig+0x1aa>
 800278e:	4b5b      	ldr	r3, [pc, #364]	; (80028fc <UART_SetConfig+0x2cc>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002794:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002798:	2b30      	cmp	r3, #48	; 0x30
 800279a:	d016      	beq.n	80027ca <UART_SetConfig+0x19a>
 800279c:	2b30      	cmp	r3, #48	; 0x30
 800279e:	d818      	bhi.n	80027d2 <UART_SetConfig+0x1a2>
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d00a      	beq.n	80027ba <UART_SetConfig+0x18a>
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d814      	bhi.n	80027d2 <UART_SetConfig+0x1a2>
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <UART_SetConfig+0x182>
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	d008      	beq.n	80027c2 <UART_SetConfig+0x192>
 80027b0:	e00f      	b.n	80027d2 <UART_SetConfig+0x1a2>
 80027b2:	2300      	movs	r3, #0
 80027b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027b8:	e0ad      	b.n	8002916 <UART_SetConfig+0x2e6>
 80027ba:	2302      	movs	r3, #2
 80027bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027c0:	e0a9      	b.n	8002916 <UART_SetConfig+0x2e6>
 80027c2:	2304      	movs	r3, #4
 80027c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027c8:	e0a5      	b.n	8002916 <UART_SetConfig+0x2e6>
 80027ca:	2308      	movs	r3, #8
 80027cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027d0:	e0a1      	b.n	8002916 <UART_SetConfig+0x2e6>
 80027d2:	2310      	movs	r3, #16
 80027d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027d8:	e09d      	b.n	8002916 <UART_SetConfig+0x2e6>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a4a      	ldr	r2, [pc, #296]	; (8002908 <UART_SetConfig+0x2d8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d125      	bne.n	8002830 <UART_SetConfig+0x200>
 80027e4:	4b45      	ldr	r3, [pc, #276]	; (80028fc <UART_SetConfig+0x2cc>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80027ee:	2bc0      	cmp	r3, #192	; 0xc0
 80027f0:	d016      	beq.n	8002820 <UART_SetConfig+0x1f0>
 80027f2:	2bc0      	cmp	r3, #192	; 0xc0
 80027f4:	d818      	bhi.n	8002828 <UART_SetConfig+0x1f8>
 80027f6:	2b80      	cmp	r3, #128	; 0x80
 80027f8:	d00a      	beq.n	8002810 <UART_SetConfig+0x1e0>
 80027fa:	2b80      	cmp	r3, #128	; 0x80
 80027fc:	d814      	bhi.n	8002828 <UART_SetConfig+0x1f8>
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <UART_SetConfig+0x1d8>
 8002802:	2b40      	cmp	r3, #64	; 0x40
 8002804:	d008      	beq.n	8002818 <UART_SetConfig+0x1e8>
 8002806:	e00f      	b.n	8002828 <UART_SetConfig+0x1f8>
 8002808:	2300      	movs	r3, #0
 800280a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800280e:	e082      	b.n	8002916 <UART_SetConfig+0x2e6>
 8002810:	2302      	movs	r3, #2
 8002812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002816:	e07e      	b.n	8002916 <UART_SetConfig+0x2e6>
 8002818:	2304      	movs	r3, #4
 800281a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800281e:	e07a      	b.n	8002916 <UART_SetConfig+0x2e6>
 8002820:	2308      	movs	r3, #8
 8002822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002826:	e076      	b.n	8002916 <UART_SetConfig+0x2e6>
 8002828:	2310      	movs	r3, #16
 800282a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800282e:	e072      	b.n	8002916 <UART_SetConfig+0x2e6>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a35      	ldr	r2, [pc, #212]	; (800290c <UART_SetConfig+0x2dc>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d12a      	bne.n	8002890 <UART_SetConfig+0x260>
 800283a:	4b30      	ldr	r3, [pc, #192]	; (80028fc <UART_SetConfig+0x2cc>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002844:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002848:	d01a      	beq.n	8002880 <UART_SetConfig+0x250>
 800284a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800284e:	d81b      	bhi.n	8002888 <UART_SetConfig+0x258>
 8002850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002854:	d00c      	beq.n	8002870 <UART_SetConfig+0x240>
 8002856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800285a:	d815      	bhi.n	8002888 <UART_SetConfig+0x258>
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <UART_SetConfig+0x238>
 8002860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002864:	d008      	beq.n	8002878 <UART_SetConfig+0x248>
 8002866:	e00f      	b.n	8002888 <UART_SetConfig+0x258>
 8002868:	2300      	movs	r3, #0
 800286a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800286e:	e052      	b.n	8002916 <UART_SetConfig+0x2e6>
 8002870:	2302      	movs	r3, #2
 8002872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002876:	e04e      	b.n	8002916 <UART_SetConfig+0x2e6>
 8002878:	2304      	movs	r3, #4
 800287a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800287e:	e04a      	b.n	8002916 <UART_SetConfig+0x2e6>
 8002880:	2308      	movs	r3, #8
 8002882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002886:	e046      	b.n	8002916 <UART_SetConfig+0x2e6>
 8002888:	2310      	movs	r3, #16
 800288a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800288e:	e042      	b.n	8002916 <UART_SetConfig+0x2e6>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a17      	ldr	r2, [pc, #92]	; (80028f4 <UART_SetConfig+0x2c4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d13a      	bne.n	8002910 <UART_SetConfig+0x2e0>
 800289a:	4b18      	ldr	r3, [pc, #96]	; (80028fc <UART_SetConfig+0x2cc>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028a8:	d01a      	beq.n	80028e0 <UART_SetConfig+0x2b0>
 80028aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028ae:	d81b      	bhi.n	80028e8 <UART_SetConfig+0x2b8>
 80028b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028b4:	d00c      	beq.n	80028d0 <UART_SetConfig+0x2a0>
 80028b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ba:	d815      	bhi.n	80028e8 <UART_SetConfig+0x2b8>
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <UART_SetConfig+0x298>
 80028c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c4:	d008      	beq.n	80028d8 <UART_SetConfig+0x2a8>
 80028c6:	e00f      	b.n	80028e8 <UART_SetConfig+0x2b8>
 80028c8:	2300      	movs	r3, #0
 80028ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028ce:	e022      	b.n	8002916 <UART_SetConfig+0x2e6>
 80028d0:	2302      	movs	r3, #2
 80028d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028d6:	e01e      	b.n	8002916 <UART_SetConfig+0x2e6>
 80028d8:	2304      	movs	r3, #4
 80028da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028de:	e01a      	b.n	8002916 <UART_SetConfig+0x2e6>
 80028e0:	2308      	movs	r3, #8
 80028e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028e6:	e016      	b.n	8002916 <UART_SetConfig+0x2e6>
 80028e8:	2310      	movs	r3, #16
 80028ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028ee:	e012      	b.n	8002916 <UART_SetConfig+0x2e6>
 80028f0:	efff69f3 	.word	0xefff69f3
 80028f4:	40008000 	.word	0x40008000
 80028f8:	40013800 	.word	0x40013800
 80028fc:	40021000 	.word	0x40021000
 8002900:	40004400 	.word	0x40004400
 8002904:	40004800 	.word	0x40004800
 8002908:	40004c00 	.word	0x40004c00
 800290c:	40005000 	.word	0x40005000
 8002910:	2310      	movs	r3, #16
 8002912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a9f      	ldr	r2, [pc, #636]	; (8002b98 <UART_SetConfig+0x568>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d17a      	bne.n	8002a16 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002920:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002924:	2b08      	cmp	r3, #8
 8002926:	d824      	bhi.n	8002972 <UART_SetConfig+0x342>
 8002928:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <UART_SetConfig+0x300>)
 800292a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292e:	bf00      	nop
 8002930:	08002955 	.word	0x08002955
 8002934:	08002973 	.word	0x08002973
 8002938:	0800295d 	.word	0x0800295d
 800293c:	08002973 	.word	0x08002973
 8002940:	08002963 	.word	0x08002963
 8002944:	08002973 	.word	0x08002973
 8002948:	08002973 	.word	0x08002973
 800294c:	08002973 	.word	0x08002973
 8002950:	0800296b 	.word	0x0800296b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002954:	f7ff f8d6 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 8002958:	61f8      	str	r0, [r7, #28]
        break;
 800295a:	e010      	b.n	800297e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800295c:	4b8f      	ldr	r3, [pc, #572]	; (8002b9c <UART_SetConfig+0x56c>)
 800295e:	61fb      	str	r3, [r7, #28]
        break;
 8002960:	e00d      	b.n	800297e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002962:	f7ff f837 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 8002966:	61f8      	str	r0, [r7, #28]
        break;
 8002968:	e009      	b.n	800297e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800296a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800296e:	61fb      	str	r3, [r7, #28]
        break;
 8002970:	e005      	b.n	800297e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800297c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80fb 	beq.w	8002b7c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	429a      	cmp	r2, r3
 8002994:	d305      	bcc.n	80029a2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800299c:	69fa      	ldr	r2, [r7, #28]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d903      	bls.n	80029aa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80029a8:	e0e8      	b.n	8002b7c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	2200      	movs	r2, #0
 80029ae:	461c      	mov	r4, r3
 80029b0:	4615      	mov	r5, r2
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	022b      	lsls	r3, r5, #8
 80029bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80029c0:	0222      	lsls	r2, r4, #8
 80029c2:	68f9      	ldr	r1, [r7, #12]
 80029c4:	6849      	ldr	r1, [r1, #4]
 80029c6:	0849      	lsrs	r1, r1, #1
 80029c8:	2000      	movs	r0, #0
 80029ca:	4688      	mov	r8, r1
 80029cc:	4681      	mov	r9, r0
 80029ce:	eb12 0a08 	adds.w	sl, r2, r8
 80029d2:	eb43 0b09 	adc.w	fp, r3, r9
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029e4:	4650      	mov	r0, sl
 80029e6:	4659      	mov	r1, fp
 80029e8:	f7fd fbf6 	bl	80001d8 <__aeabi_uldivmod>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4613      	mov	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029fa:	d308      	bcc.n	8002a0e <UART_SetConfig+0x3de>
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a02:	d204      	bcs.n	8002a0e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	60da      	str	r2, [r3, #12]
 8002a0c:	e0b6      	b.n	8002b7c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002a14:	e0b2      	b.n	8002b7c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a1e:	d15e      	bne.n	8002ade <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002a20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d828      	bhi.n	8002a7a <UART_SetConfig+0x44a>
 8002a28:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <UART_SetConfig+0x400>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a55 	.word	0x08002a55
 8002a34:	08002a5d 	.word	0x08002a5d
 8002a38:	08002a65 	.word	0x08002a65
 8002a3c:	08002a7b 	.word	0x08002a7b
 8002a40:	08002a6b 	.word	0x08002a6b
 8002a44:	08002a7b 	.word	0x08002a7b
 8002a48:	08002a7b 	.word	0x08002a7b
 8002a4c:	08002a7b 	.word	0x08002a7b
 8002a50:	08002a73 	.word	0x08002a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a54:	f7ff f856 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 8002a58:	61f8      	str	r0, [r7, #28]
        break;
 8002a5a:	e014      	b.n	8002a86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a5c:	f7ff f868 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 8002a60:	61f8      	str	r0, [r7, #28]
        break;
 8002a62:	e010      	b.n	8002a86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a64:	4b4d      	ldr	r3, [pc, #308]	; (8002b9c <UART_SetConfig+0x56c>)
 8002a66:	61fb      	str	r3, [r7, #28]
        break;
 8002a68:	e00d      	b.n	8002a86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a6a:	f7fe ffb3 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 8002a6e:	61f8      	str	r0, [r7, #28]
        break;
 8002a70:	e009      	b.n	8002a86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a76:	61fb      	str	r3, [r7, #28]
        break;
 8002a78:	e005      	b.n	8002a86 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002a84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d077      	beq.n	8002b7c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005a      	lsls	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	085b      	lsrs	r3, r3, #1
 8002a96:	441a      	add	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	2b0f      	cmp	r3, #15
 8002aa6:	d916      	bls.n	8002ad6 <UART_SetConfig+0x4a6>
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aae:	d212      	bcs.n	8002ad6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	f023 030f 	bic.w	r3, r3, #15
 8002ab8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	8afb      	ldrh	r3, [r7, #22]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	8afa      	ldrh	r2, [r7, #22]
 8002ad2:	60da      	str	r2, [r3, #12]
 8002ad4:	e052      	b.n	8002b7c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002adc:	e04e      	b.n	8002b7c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ade:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d827      	bhi.n	8002b36 <UART_SetConfig+0x506>
 8002ae6:	a201      	add	r2, pc, #4	; (adr r2, 8002aec <UART_SetConfig+0x4bc>)
 8002ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aec:	08002b11 	.word	0x08002b11
 8002af0:	08002b19 	.word	0x08002b19
 8002af4:	08002b21 	.word	0x08002b21
 8002af8:	08002b37 	.word	0x08002b37
 8002afc:	08002b27 	.word	0x08002b27
 8002b00:	08002b37 	.word	0x08002b37
 8002b04:	08002b37 	.word	0x08002b37
 8002b08:	08002b37 	.word	0x08002b37
 8002b0c:	08002b2f 	.word	0x08002b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b10:	f7fe fff8 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 8002b14:	61f8      	str	r0, [r7, #28]
        break;
 8002b16:	e014      	b.n	8002b42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b18:	f7ff f80a 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 8002b1c:	61f8      	str	r0, [r7, #28]
        break;
 8002b1e:	e010      	b.n	8002b42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b20:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <UART_SetConfig+0x56c>)
 8002b22:	61fb      	str	r3, [r7, #28]
        break;
 8002b24:	e00d      	b.n	8002b42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b26:	f7fe ff55 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 8002b2a:	61f8      	str	r0, [r7, #28]
        break;
 8002b2c:	e009      	b.n	8002b42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b32:	61fb      	str	r3, [r7, #28]
        break;
 8002b34:	e005      	b.n	8002b42 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002b40:	bf00      	nop
    }

    if (pclk != 0U)
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d019      	beq.n	8002b7c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	085a      	lsrs	r2, r3, #1
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	441a      	add	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2b0f      	cmp	r3, #15
 8002b60:	d909      	bls.n	8002b76 <UART_SetConfig+0x546>
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b68:	d205      	bcs.n	8002b76 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60da      	str	r2, [r3, #12]
 8002b74:	e002      	b.n	8002b7c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002b88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3728      	adds	r7, #40	; 0x28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b96:	bf00      	nop
 8002b98:	40008000 	.word	0x40008000
 8002b9c:	00f42400 	.word	0x00f42400

08002ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00a      	beq.n	8002bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d01a      	beq.n	8002cb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c9e:	d10a      	bne.n	8002cb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	605a      	str	r2, [r3, #4]
  }
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cf4:	f7fd fe7a 	bl	80009ec <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d10e      	bne.n	8002d26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f82d 	bl	8002d76 <UART_WaitOnFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e023      	b.n	8002d6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d10e      	bne.n	8002d52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f817 	bl	8002d76 <UART_WaitOnFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e00d      	b.n	8002d6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2220      	movs	r2, #32
 8002d56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b09c      	sub	sp, #112	; 0x70
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	603b      	str	r3, [r7, #0]
 8002d82:	4613      	mov	r3, r2
 8002d84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d86:	e0a5      	b.n	8002ed4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8e:	f000 80a1 	beq.w	8002ed4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d92:	f7fd fe2b 	bl	80009ec <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d302      	bcc.n	8002da8 <UART_WaitOnFlagUntilTimeout+0x32>
 8002da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d13e      	bne.n	8002e26 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002dbc:	667b      	str	r3, [r7, #100]	; 0x64
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dc8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002dcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002dce:	e841 2300 	strex	r3, r2, [r1]
 8002dd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e6      	bne.n	8002da8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3308      	adds	r3, #8
 8002de0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de4:	e853 3f00 	ldrex	r3, [r3]
 8002de8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	663b      	str	r3, [r7, #96]	; 0x60
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3308      	adds	r3, #8
 8002df8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002dfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8002dfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e5      	bne.n	8002dda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e067      	b.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d04f      	beq.n	8002ed4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e42:	d147      	bne.n	8002ed4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e4c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e56:	e853 3f00 	ldrex	r3, [r3]
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e74:	e841 2300 	strex	r3, r2, [r1]
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e6      	bne.n	8002e4e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3308      	adds	r3, #8
 8002e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	e853 3f00 	ldrex	r3, [r3]
 8002e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3308      	adds	r3, #8
 8002e9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ea0:	623a      	str	r2, [r7, #32]
 8002ea2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea4:	69f9      	ldr	r1, [r7, #28]
 8002ea6:	6a3a      	ldr	r2, [r7, #32]
 8002ea8:	e841 2300 	strex	r3, r2, [r1]
 8002eac:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e5      	bne.n	8002e80 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e010      	b.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4013      	ands	r3, r2
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	f43f af4a 	beq.w	8002d88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3770      	adds	r7, #112	; 0x70
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <std>:
 8002f00:	2300      	movs	r3, #0
 8002f02:	b510      	push	{r4, lr}
 8002f04:	4604      	mov	r4, r0
 8002f06:	e9c0 3300 	strd	r3, r3, [r0]
 8002f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f0e:	6083      	str	r3, [r0, #8]
 8002f10:	8181      	strh	r1, [r0, #12]
 8002f12:	6643      	str	r3, [r0, #100]	; 0x64
 8002f14:	81c2      	strh	r2, [r0, #14]
 8002f16:	6183      	str	r3, [r0, #24]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	305c      	adds	r0, #92	; 0x5c
 8002f1e:	f000 f9d3 	bl	80032c8 <memset>
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <std+0x38>)
 8002f24:	6263      	str	r3, [r4, #36]	; 0x24
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <std+0x3c>)
 8002f28:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <std+0x40>)
 8002f2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <std+0x44>)
 8002f30:	6224      	str	r4, [r4, #32]
 8002f32:	6323      	str	r3, [r4, #48]	; 0x30
 8002f34:	bd10      	pop	{r4, pc}
 8002f36:	bf00      	nop
 8002f38:	08003119 	.word	0x08003119
 8002f3c:	0800313b 	.word	0x0800313b
 8002f40:	08003173 	.word	0x08003173
 8002f44:	08003197 	.word	0x08003197

08002f48 <stdio_exit_handler>:
 8002f48:	4a02      	ldr	r2, [pc, #8]	; (8002f54 <stdio_exit_handler+0xc>)
 8002f4a:	4903      	ldr	r1, [pc, #12]	; (8002f58 <stdio_exit_handler+0x10>)
 8002f4c:	4803      	ldr	r0, [pc, #12]	; (8002f5c <stdio_exit_handler+0x14>)
 8002f4e:	f000 b869 	b.w	8003024 <_fwalk_sglue>
 8002f52:	bf00      	nop
 8002f54:	2000000c 	.word	0x2000000c
 8002f58:	080036b9 	.word	0x080036b9
 8002f5c:	20000018 	.word	0x20000018

08002f60 <cleanup_stdio>:
 8002f60:	6841      	ldr	r1, [r0, #4]
 8002f62:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <cleanup_stdio+0x34>)
 8002f64:	4299      	cmp	r1, r3
 8002f66:	b510      	push	{r4, lr}
 8002f68:	4604      	mov	r4, r0
 8002f6a:	d001      	beq.n	8002f70 <cleanup_stdio+0x10>
 8002f6c:	f000 fba4 	bl	80036b8 <_fflush_r>
 8002f70:	68a1      	ldr	r1, [r4, #8]
 8002f72:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <cleanup_stdio+0x38>)
 8002f74:	4299      	cmp	r1, r3
 8002f76:	d002      	beq.n	8002f7e <cleanup_stdio+0x1e>
 8002f78:	4620      	mov	r0, r4
 8002f7a:	f000 fb9d 	bl	80036b8 <_fflush_r>
 8002f7e:	68e1      	ldr	r1, [r4, #12]
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <cleanup_stdio+0x3c>)
 8002f82:	4299      	cmp	r1, r3
 8002f84:	d004      	beq.n	8002f90 <cleanup_stdio+0x30>
 8002f86:	4620      	mov	r0, r4
 8002f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f8c:	f000 bb94 	b.w	80036b8 <_fflush_r>
 8002f90:	bd10      	pop	{r4, pc}
 8002f92:	bf00      	nop
 8002f94:	20000118 	.word	0x20000118
 8002f98:	20000180 	.word	0x20000180
 8002f9c:	200001e8 	.word	0x200001e8

08002fa0 <global_stdio_init.part.0>:
 8002fa0:	b510      	push	{r4, lr}
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <global_stdio_init.part.0+0x30>)
 8002fa4:	4c0b      	ldr	r4, [pc, #44]	; (8002fd4 <global_stdio_init.part.0+0x34>)
 8002fa6:	4a0c      	ldr	r2, [pc, #48]	; (8002fd8 <global_stdio_init.part.0+0x38>)
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	4620      	mov	r0, r4
 8002fac:	2200      	movs	r2, #0
 8002fae:	2104      	movs	r1, #4
 8002fb0:	f7ff ffa6 	bl	8002f00 <std>
 8002fb4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002fb8:	2201      	movs	r2, #1
 8002fba:	2109      	movs	r1, #9
 8002fbc:	f7ff ffa0 	bl	8002f00 <std>
 8002fc0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fca:	2112      	movs	r1, #18
 8002fcc:	f7ff bf98 	b.w	8002f00 <std>
 8002fd0:	20000250 	.word	0x20000250
 8002fd4:	20000118 	.word	0x20000118
 8002fd8:	08002f49 	.word	0x08002f49

08002fdc <__sfp_lock_acquire>:
 8002fdc:	4801      	ldr	r0, [pc, #4]	; (8002fe4 <__sfp_lock_acquire+0x8>)
 8002fde:	f000 b9eb 	b.w	80033b8 <__retarget_lock_acquire_recursive>
 8002fe2:	bf00      	nop
 8002fe4:	20000259 	.word	0x20000259

08002fe8 <__sfp_lock_release>:
 8002fe8:	4801      	ldr	r0, [pc, #4]	; (8002ff0 <__sfp_lock_release+0x8>)
 8002fea:	f000 b9e6 	b.w	80033ba <__retarget_lock_release_recursive>
 8002fee:	bf00      	nop
 8002ff0:	20000259 	.word	0x20000259

08002ff4 <__sinit>:
 8002ff4:	b510      	push	{r4, lr}
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	f7ff fff0 	bl	8002fdc <__sfp_lock_acquire>
 8002ffc:	6a23      	ldr	r3, [r4, #32]
 8002ffe:	b11b      	cbz	r3, 8003008 <__sinit+0x14>
 8003000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003004:	f7ff bff0 	b.w	8002fe8 <__sfp_lock_release>
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <__sinit+0x28>)
 800300a:	6223      	str	r3, [r4, #32]
 800300c:	4b04      	ldr	r3, [pc, #16]	; (8003020 <__sinit+0x2c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f5      	bne.n	8003000 <__sinit+0xc>
 8003014:	f7ff ffc4 	bl	8002fa0 <global_stdio_init.part.0>
 8003018:	e7f2      	b.n	8003000 <__sinit+0xc>
 800301a:	bf00      	nop
 800301c:	08002f61 	.word	0x08002f61
 8003020:	20000250 	.word	0x20000250

08003024 <_fwalk_sglue>:
 8003024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003028:	4607      	mov	r7, r0
 800302a:	4688      	mov	r8, r1
 800302c:	4614      	mov	r4, r2
 800302e:	2600      	movs	r6, #0
 8003030:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003034:	f1b9 0901 	subs.w	r9, r9, #1
 8003038:	d505      	bpl.n	8003046 <_fwalk_sglue+0x22>
 800303a:	6824      	ldr	r4, [r4, #0]
 800303c:	2c00      	cmp	r4, #0
 800303e:	d1f7      	bne.n	8003030 <_fwalk_sglue+0xc>
 8003040:	4630      	mov	r0, r6
 8003042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003046:	89ab      	ldrh	r3, [r5, #12]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d907      	bls.n	800305c <_fwalk_sglue+0x38>
 800304c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003050:	3301      	adds	r3, #1
 8003052:	d003      	beq.n	800305c <_fwalk_sglue+0x38>
 8003054:	4629      	mov	r1, r5
 8003056:	4638      	mov	r0, r7
 8003058:	47c0      	blx	r8
 800305a:	4306      	orrs	r6, r0
 800305c:	3568      	adds	r5, #104	; 0x68
 800305e:	e7e9      	b.n	8003034 <_fwalk_sglue+0x10>

08003060 <_puts_r>:
 8003060:	6a03      	ldr	r3, [r0, #32]
 8003062:	b570      	push	{r4, r5, r6, lr}
 8003064:	6884      	ldr	r4, [r0, #8]
 8003066:	4605      	mov	r5, r0
 8003068:	460e      	mov	r6, r1
 800306a:	b90b      	cbnz	r3, 8003070 <_puts_r+0x10>
 800306c:	f7ff ffc2 	bl	8002ff4 <__sinit>
 8003070:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003072:	07db      	lsls	r3, r3, #31
 8003074:	d405      	bmi.n	8003082 <_puts_r+0x22>
 8003076:	89a3      	ldrh	r3, [r4, #12]
 8003078:	0598      	lsls	r0, r3, #22
 800307a:	d402      	bmi.n	8003082 <_puts_r+0x22>
 800307c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800307e:	f000 f99b 	bl	80033b8 <__retarget_lock_acquire_recursive>
 8003082:	89a3      	ldrh	r3, [r4, #12]
 8003084:	0719      	lsls	r1, r3, #28
 8003086:	d513      	bpl.n	80030b0 <_puts_r+0x50>
 8003088:	6923      	ldr	r3, [r4, #16]
 800308a:	b18b      	cbz	r3, 80030b0 <_puts_r+0x50>
 800308c:	3e01      	subs	r6, #1
 800308e:	68a3      	ldr	r3, [r4, #8]
 8003090:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003094:	3b01      	subs	r3, #1
 8003096:	60a3      	str	r3, [r4, #8]
 8003098:	b9e9      	cbnz	r1, 80030d6 <_puts_r+0x76>
 800309a:	2b00      	cmp	r3, #0
 800309c:	da2e      	bge.n	80030fc <_puts_r+0x9c>
 800309e:	4622      	mov	r2, r4
 80030a0:	210a      	movs	r1, #10
 80030a2:	4628      	mov	r0, r5
 80030a4:	f000 f87b 	bl	800319e <__swbuf_r>
 80030a8:	3001      	adds	r0, #1
 80030aa:	d007      	beq.n	80030bc <_puts_r+0x5c>
 80030ac:	250a      	movs	r5, #10
 80030ae:	e007      	b.n	80030c0 <_puts_r+0x60>
 80030b0:	4621      	mov	r1, r4
 80030b2:	4628      	mov	r0, r5
 80030b4:	f000 f8b0 	bl	8003218 <__swsetup_r>
 80030b8:	2800      	cmp	r0, #0
 80030ba:	d0e7      	beq.n	800308c <_puts_r+0x2c>
 80030bc:	f04f 35ff 	mov.w	r5, #4294967295
 80030c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030c2:	07da      	lsls	r2, r3, #31
 80030c4:	d405      	bmi.n	80030d2 <_puts_r+0x72>
 80030c6:	89a3      	ldrh	r3, [r4, #12]
 80030c8:	059b      	lsls	r3, r3, #22
 80030ca:	d402      	bmi.n	80030d2 <_puts_r+0x72>
 80030cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ce:	f000 f974 	bl	80033ba <__retarget_lock_release_recursive>
 80030d2:	4628      	mov	r0, r5
 80030d4:	bd70      	pop	{r4, r5, r6, pc}
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	da04      	bge.n	80030e4 <_puts_r+0x84>
 80030da:	69a2      	ldr	r2, [r4, #24]
 80030dc:	429a      	cmp	r2, r3
 80030de:	dc06      	bgt.n	80030ee <_puts_r+0x8e>
 80030e0:	290a      	cmp	r1, #10
 80030e2:	d004      	beq.n	80030ee <_puts_r+0x8e>
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	6022      	str	r2, [r4, #0]
 80030ea:	7019      	strb	r1, [r3, #0]
 80030ec:	e7cf      	b.n	800308e <_puts_r+0x2e>
 80030ee:	4622      	mov	r2, r4
 80030f0:	4628      	mov	r0, r5
 80030f2:	f000 f854 	bl	800319e <__swbuf_r>
 80030f6:	3001      	adds	r0, #1
 80030f8:	d1c9      	bne.n	800308e <_puts_r+0x2e>
 80030fa:	e7df      	b.n	80030bc <_puts_r+0x5c>
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	250a      	movs	r5, #10
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	6022      	str	r2, [r4, #0]
 8003104:	701d      	strb	r5, [r3, #0]
 8003106:	e7db      	b.n	80030c0 <_puts_r+0x60>

08003108 <puts>:
 8003108:	4b02      	ldr	r3, [pc, #8]	; (8003114 <puts+0xc>)
 800310a:	4601      	mov	r1, r0
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	f7ff bfa7 	b.w	8003060 <_puts_r>
 8003112:	bf00      	nop
 8003114:	20000064 	.word	0x20000064

08003118 <__sread>:
 8003118:	b510      	push	{r4, lr}
 800311a:	460c      	mov	r4, r1
 800311c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003120:	f000 f8fc 	bl	800331c <_read_r>
 8003124:	2800      	cmp	r0, #0
 8003126:	bfab      	itete	ge
 8003128:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800312a:	89a3      	ldrhlt	r3, [r4, #12]
 800312c:	181b      	addge	r3, r3, r0
 800312e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003132:	bfac      	ite	ge
 8003134:	6563      	strge	r3, [r4, #84]	; 0x54
 8003136:	81a3      	strhlt	r3, [r4, #12]
 8003138:	bd10      	pop	{r4, pc}

0800313a <__swrite>:
 800313a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800313e:	461f      	mov	r7, r3
 8003140:	898b      	ldrh	r3, [r1, #12]
 8003142:	05db      	lsls	r3, r3, #23
 8003144:	4605      	mov	r5, r0
 8003146:	460c      	mov	r4, r1
 8003148:	4616      	mov	r6, r2
 800314a:	d505      	bpl.n	8003158 <__swrite+0x1e>
 800314c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003150:	2302      	movs	r3, #2
 8003152:	2200      	movs	r2, #0
 8003154:	f000 f8d0 	bl	80032f8 <_lseek_r>
 8003158:	89a3      	ldrh	r3, [r4, #12]
 800315a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800315e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003162:	81a3      	strh	r3, [r4, #12]
 8003164:	4632      	mov	r2, r6
 8003166:	463b      	mov	r3, r7
 8003168:	4628      	mov	r0, r5
 800316a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800316e:	f000 b8e7 	b.w	8003340 <_write_r>

08003172 <__sseek>:
 8003172:	b510      	push	{r4, lr}
 8003174:	460c      	mov	r4, r1
 8003176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800317a:	f000 f8bd 	bl	80032f8 <_lseek_r>
 800317e:	1c43      	adds	r3, r0, #1
 8003180:	89a3      	ldrh	r3, [r4, #12]
 8003182:	bf15      	itete	ne
 8003184:	6560      	strne	r0, [r4, #84]	; 0x54
 8003186:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800318a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800318e:	81a3      	strheq	r3, [r4, #12]
 8003190:	bf18      	it	ne
 8003192:	81a3      	strhne	r3, [r4, #12]
 8003194:	bd10      	pop	{r4, pc}

08003196 <__sclose>:
 8003196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800319a:	f000 b89d 	b.w	80032d8 <_close_r>

0800319e <__swbuf_r>:
 800319e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a0:	460e      	mov	r6, r1
 80031a2:	4614      	mov	r4, r2
 80031a4:	4605      	mov	r5, r0
 80031a6:	b118      	cbz	r0, 80031b0 <__swbuf_r+0x12>
 80031a8:	6a03      	ldr	r3, [r0, #32]
 80031aa:	b90b      	cbnz	r3, 80031b0 <__swbuf_r+0x12>
 80031ac:	f7ff ff22 	bl	8002ff4 <__sinit>
 80031b0:	69a3      	ldr	r3, [r4, #24]
 80031b2:	60a3      	str	r3, [r4, #8]
 80031b4:	89a3      	ldrh	r3, [r4, #12]
 80031b6:	071a      	lsls	r2, r3, #28
 80031b8:	d525      	bpl.n	8003206 <__swbuf_r+0x68>
 80031ba:	6923      	ldr	r3, [r4, #16]
 80031bc:	b31b      	cbz	r3, 8003206 <__swbuf_r+0x68>
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	6922      	ldr	r2, [r4, #16]
 80031c2:	1a98      	subs	r0, r3, r2
 80031c4:	6963      	ldr	r3, [r4, #20]
 80031c6:	b2f6      	uxtb	r6, r6
 80031c8:	4283      	cmp	r3, r0
 80031ca:	4637      	mov	r7, r6
 80031cc:	dc04      	bgt.n	80031d8 <__swbuf_r+0x3a>
 80031ce:	4621      	mov	r1, r4
 80031d0:	4628      	mov	r0, r5
 80031d2:	f000 fa71 	bl	80036b8 <_fflush_r>
 80031d6:	b9e0      	cbnz	r0, 8003212 <__swbuf_r+0x74>
 80031d8:	68a3      	ldr	r3, [r4, #8]
 80031da:	3b01      	subs	r3, #1
 80031dc:	60a3      	str	r3, [r4, #8]
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	6022      	str	r2, [r4, #0]
 80031e4:	701e      	strb	r6, [r3, #0]
 80031e6:	6962      	ldr	r2, [r4, #20]
 80031e8:	1c43      	adds	r3, r0, #1
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d004      	beq.n	80031f8 <__swbuf_r+0x5a>
 80031ee:	89a3      	ldrh	r3, [r4, #12]
 80031f0:	07db      	lsls	r3, r3, #31
 80031f2:	d506      	bpl.n	8003202 <__swbuf_r+0x64>
 80031f4:	2e0a      	cmp	r6, #10
 80031f6:	d104      	bne.n	8003202 <__swbuf_r+0x64>
 80031f8:	4621      	mov	r1, r4
 80031fa:	4628      	mov	r0, r5
 80031fc:	f000 fa5c 	bl	80036b8 <_fflush_r>
 8003200:	b938      	cbnz	r0, 8003212 <__swbuf_r+0x74>
 8003202:	4638      	mov	r0, r7
 8003204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003206:	4621      	mov	r1, r4
 8003208:	4628      	mov	r0, r5
 800320a:	f000 f805 	bl	8003218 <__swsetup_r>
 800320e:	2800      	cmp	r0, #0
 8003210:	d0d5      	beq.n	80031be <__swbuf_r+0x20>
 8003212:	f04f 37ff 	mov.w	r7, #4294967295
 8003216:	e7f4      	b.n	8003202 <__swbuf_r+0x64>

08003218 <__swsetup_r>:
 8003218:	b538      	push	{r3, r4, r5, lr}
 800321a:	4b2a      	ldr	r3, [pc, #168]	; (80032c4 <__swsetup_r+0xac>)
 800321c:	4605      	mov	r5, r0
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	460c      	mov	r4, r1
 8003222:	b118      	cbz	r0, 800322c <__swsetup_r+0x14>
 8003224:	6a03      	ldr	r3, [r0, #32]
 8003226:	b90b      	cbnz	r3, 800322c <__swsetup_r+0x14>
 8003228:	f7ff fee4 	bl	8002ff4 <__sinit>
 800322c:	89a3      	ldrh	r3, [r4, #12]
 800322e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003232:	0718      	lsls	r0, r3, #28
 8003234:	d422      	bmi.n	800327c <__swsetup_r+0x64>
 8003236:	06d9      	lsls	r1, r3, #27
 8003238:	d407      	bmi.n	800324a <__swsetup_r+0x32>
 800323a:	2309      	movs	r3, #9
 800323c:	602b      	str	r3, [r5, #0]
 800323e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003242:	81a3      	strh	r3, [r4, #12]
 8003244:	f04f 30ff 	mov.w	r0, #4294967295
 8003248:	e034      	b.n	80032b4 <__swsetup_r+0x9c>
 800324a:	0758      	lsls	r0, r3, #29
 800324c:	d512      	bpl.n	8003274 <__swsetup_r+0x5c>
 800324e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003250:	b141      	cbz	r1, 8003264 <__swsetup_r+0x4c>
 8003252:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003256:	4299      	cmp	r1, r3
 8003258:	d002      	beq.n	8003260 <__swsetup_r+0x48>
 800325a:	4628      	mov	r0, r5
 800325c:	f000 f8ae 	bl	80033bc <_free_r>
 8003260:	2300      	movs	r3, #0
 8003262:	6363      	str	r3, [r4, #52]	; 0x34
 8003264:	89a3      	ldrh	r3, [r4, #12]
 8003266:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800326a:	81a3      	strh	r3, [r4, #12]
 800326c:	2300      	movs	r3, #0
 800326e:	6063      	str	r3, [r4, #4]
 8003270:	6923      	ldr	r3, [r4, #16]
 8003272:	6023      	str	r3, [r4, #0]
 8003274:	89a3      	ldrh	r3, [r4, #12]
 8003276:	f043 0308 	orr.w	r3, r3, #8
 800327a:	81a3      	strh	r3, [r4, #12]
 800327c:	6923      	ldr	r3, [r4, #16]
 800327e:	b94b      	cbnz	r3, 8003294 <__swsetup_r+0x7c>
 8003280:	89a3      	ldrh	r3, [r4, #12]
 8003282:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800328a:	d003      	beq.n	8003294 <__swsetup_r+0x7c>
 800328c:	4621      	mov	r1, r4
 800328e:	4628      	mov	r0, r5
 8003290:	f000 fa60 	bl	8003754 <__smakebuf_r>
 8003294:	89a0      	ldrh	r0, [r4, #12]
 8003296:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800329a:	f010 0301 	ands.w	r3, r0, #1
 800329e:	d00a      	beq.n	80032b6 <__swsetup_r+0x9e>
 80032a0:	2300      	movs	r3, #0
 80032a2:	60a3      	str	r3, [r4, #8]
 80032a4:	6963      	ldr	r3, [r4, #20]
 80032a6:	425b      	negs	r3, r3
 80032a8:	61a3      	str	r3, [r4, #24]
 80032aa:	6923      	ldr	r3, [r4, #16]
 80032ac:	b943      	cbnz	r3, 80032c0 <__swsetup_r+0xa8>
 80032ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032b2:	d1c4      	bne.n	800323e <__swsetup_r+0x26>
 80032b4:	bd38      	pop	{r3, r4, r5, pc}
 80032b6:	0781      	lsls	r1, r0, #30
 80032b8:	bf58      	it	pl
 80032ba:	6963      	ldrpl	r3, [r4, #20]
 80032bc:	60a3      	str	r3, [r4, #8]
 80032be:	e7f4      	b.n	80032aa <__swsetup_r+0x92>
 80032c0:	2000      	movs	r0, #0
 80032c2:	e7f7      	b.n	80032b4 <__swsetup_r+0x9c>
 80032c4:	20000064 	.word	0x20000064

080032c8 <memset>:
 80032c8:	4402      	add	r2, r0
 80032ca:	4603      	mov	r3, r0
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d100      	bne.n	80032d2 <memset+0xa>
 80032d0:	4770      	bx	lr
 80032d2:	f803 1b01 	strb.w	r1, [r3], #1
 80032d6:	e7f9      	b.n	80032cc <memset+0x4>

080032d8 <_close_r>:
 80032d8:	b538      	push	{r3, r4, r5, lr}
 80032da:	4d06      	ldr	r5, [pc, #24]	; (80032f4 <_close_r+0x1c>)
 80032dc:	2300      	movs	r3, #0
 80032de:	4604      	mov	r4, r0
 80032e0:	4608      	mov	r0, r1
 80032e2:	602b      	str	r3, [r5, #0]
 80032e4:	f000 fb7c 	bl	80039e0 <_close>
 80032e8:	1c43      	adds	r3, r0, #1
 80032ea:	d102      	bne.n	80032f2 <_close_r+0x1a>
 80032ec:	682b      	ldr	r3, [r5, #0]
 80032ee:	b103      	cbz	r3, 80032f2 <_close_r+0x1a>
 80032f0:	6023      	str	r3, [r4, #0]
 80032f2:	bd38      	pop	{r3, r4, r5, pc}
 80032f4:	20000254 	.word	0x20000254

080032f8 <_lseek_r>:
 80032f8:	b538      	push	{r3, r4, r5, lr}
 80032fa:	4d07      	ldr	r5, [pc, #28]	; (8003318 <_lseek_r+0x20>)
 80032fc:	4604      	mov	r4, r0
 80032fe:	4608      	mov	r0, r1
 8003300:	4611      	mov	r1, r2
 8003302:	2200      	movs	r2, #0
 8003304:	602a      	str	r2, [r5, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	f000 fb27 	bl	800395a <_lseek>
 800330c:	1c43      	adds	r3, r0, #1
 800330e:	d102      	bne.n	8003316 <_lseek_r+0x1e>
 8003310:	682b      	ldr	r3, [r5, #0]
 8003312:	b103      	cbz	r3, 8003316 <_lseek_r+0x1e>
 8003314:	6023      	str	r3, [r4, #0]
 8003316:	bd38      	pop	{r3, r4, r5, pc}
 8003318:	20000254 	.word	0x20000254

0800331c <_read_r>:
 800331c:	b538      	push	{r3, r4, r5, lr}
 800331e:	4d07      	ldr	r5, [pc, #28]	; (800333c <_read_r+0x20>)
 8003320:	4604      	mov	r4, r0
 8003322:	4608      	mov	r0, r1
 8003324:	4611      	mov	r1, r2
 8003326:	2200      	movs	r2, #0
 8003328:	602a      	str	r2, [r5, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	f000 fabd 	bl	80038aa <_read>
 8003330:	1c43      	adds	r3, r0, #1
 8003332:	d102      	bne.n	800333a <_read_r+0x1e>
 8003334:	682b      	ldr	r3, [r5, #0]
 8003336:	b103      	cbz	r3, 800333a <_read_r+0x1e>
 8003338:	6023      	str	r3, [r4, #0]
 800333a:	bd38      	pop	{r3, r4, r5, pc}
 800333c:	20000254 	.word	0x20000254

08003340 <_write_r>:
 8003340:	b538      	push	{r3, r4, r5, lr}
 8003342:	4d07      	ldr	r5, [pc, #28]	; (8003360 <_write_r+0x20>)
 8003344:	4604      	mov	r4, r0
 8003346:	4608      	mov	r0, r1
 8003348:	4611      	mov	r1, r2
 800334a:	2200      	movs	r2, #0
 800334c:	602a      	str	r2, [r5, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	f000 fb15 	bl	800397e <_write>
 8003354:	1c43      	adds	r3, r0, #1
 8003356:	d102      	bne.n	800335e <_write_r+0x1e>
 8003358:	682b      	ldr	r3, [r5, #0]
 800335a:	b103      	cbz	r3, 800335e <_write_r+0x1e>
 800335c:	6023      	str	r3, [r4, #0]
 800335e:	bd38      	pop	{r3, r4, r5, pc}
 8003360:	20000254 	.word	0x20000254

08003364 <__errno>:
 8003364:	4b01      	ldr	r3, [pc, #4]	; (800336c <__errno+0x8>)
 8003366:	6818      	ldr	r0, [r3, #0]
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20000064 	.word	0x20000064

08003370 <__libc_init_array>:
 8003370:	b570      	push	{r4, r5, r6, lr}
 8003372:	4d0d      	ldr	r5, [pc, #52]	; (80033a8 <__libc_init_array+0x38>)
 8003374:	4c0d      	ldr	r4, [pc, #52]	; (80033ac <__libc_init_array+0x3c>)
 8003376:	1b64      	subs	r4, r4, r5
 8003378:	10a4      	asrs	r4, r4, #2
 800337a:	2600      	movs	r6, #0
 800337c:	42a6      	cmp	r6, r4
 800337e:	d109      	bne.n	8003394 <__libc_init_array+0x24>
 8003380:	4d0b      	ldr	r5, [pc, #44]	; (80033b0 <__libc_init_array+0x40>)
 8003382:	4c0c      	ldr	r4, [pc, #48]	; (80033b4 <__libc_init_array+0x44>)
 8003384:	f000 fcf6 	bl	8003d74 <_init>
 8003388:	1b64      	subs	r4, r4, r5
 800338a:	10a4      	asrs	r4, r4, #2
 800338c:	2600      	movs	r6, #0
 800338e:	42a6      	cmp	r6, r4
 8003390:	d105      	bne.n	800339e <__libc_init_array+0x2e>
 8003392:	bd70      	pop	{r4, r5, r6, pc}
 8003394:	f855 3b04 	ldr.w	r3, [r5], #4
 8003398:	4798      	blx	r3
 800339a:	3601      	adds	r6, #1
 800339c:	e7ee      	b.n	800337c <__libc_init_array+0xc>
 800339e:	f855 3b04 	ldr.w	r3, [r5], #4
 80033a2:	4798      	blx	r3
 80033a4:	3601      	adds	r6, #1
 80033a6:	e7f2      	b.n	800338e <__libc_init_array+0x1e>
 80033a8:	08003e00 	.word	0x08003e00
 80033ac:	08003e00 	.word	0x08003e00
 80033b0:	08003e00 	.word	0x08003e00
 80033b4:	08003e04 	.word	0x08003e04

080033b8 <__retarget_lock_acquire_recursive>:
 80033b8:	4770      	bx	lr

080033ba <__retarget_lock_release_recursive>:
 80033ba:	4770      	bx	lr

080033bc <_free_r>:
 80033bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033be:	2900      	cmp	r1, #0
 80033c0:	d044      	beq.n	800344c <_free_r+0x90>
 80033c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033c6:	9001      	str	r0, [sp, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f1a1 0404 	sub.w	r4, r1, #4
 80033ce:	bfb8      	it	lt
 80033d0:	18e4      	addlt	r4, r4, r3
 80033d2:	f000 f8df 	bl	8003594 <__malloc_lock>
 80033d6:	4a1e      	ldr	r2, [pc, #120]	; (8003450 <_free_r+0x94>)
 80033d8:	9801      	ldr	r0, [sp, #4]
 80033da:	6813      	ldr	r3, [r2, #0]
 80033dc:	b933      	cbnz	r3, 80033ec <_free_r+0x30>
 80033de:	6063      	str	r3, [r4, #4]
 80033e0:	6014      	str	r4, [r2, #0]
 80033e2:	b003      	add	sp, #12
 80033e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033e8:	f000 b8da 	b.w	80035a0 <__malloc_unlock>
 80033ec:	42a3      	cmp	r3, r4
 80033ee:	d908      	bls.n	8003402 <_free_r+0x46>
 80033f0:	6825      	ldr	r5, [r4, #0]
 80033f2:	1961      	adds	r1, r4, r5
 80033f4:	428b      	cmp	r3, r1
 80033f6:	bf01      	itttt	eq
 80033f8:	6819      	ldreq	r1, [r3, #0]
 80033fa:	685b      	ldreq	r3, [r3, #4]
 80033fc:	1949      	addeq	r1, r1, r5
 80033fe:	6021      	streq	r1, [r4, #0]
 8003400:	e7ed      	b.n	80033de <_free_r+0x22>
 8003402:	461a      	mov	r2, r3
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	b10b      	cbz	r3, 800340c <_free_r+0x50>
 8003408:	42a3      	cmp	r3, r4
 800340a:	d9fa      	bls.n	8003402 <_free_r+0x46>
 800340c:	6811      	ldr	r1, [r2, #0]
 800340e:	1855      	adds	r5, r2, r1
 8003410:	42a5      	cmp	r5, r4
 8003412:	d10b      	bne.n	800342c <_free_r+0x70>
 8003414:	6824      	ldr	r4, [r4, #0]
 8003416:	4421      	add	r1, r4
 8003418:	1854      	adds	r4, r2, r1
 800341a:	42a3      	cmp	r3, r4
 800341c:	6011      	str	r1, [r2, #0]
 800341e:	d1e0      	bne.n	80033e2 <_free_r+0x26>
 8003420:	681c      	ldr	r4, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	6053      	str	r3, [r2, #4]
 8003426:	440c      	add	r4, r1
 8003428:	6014      	str	r4, [r2, #0]
 800342a:	e7da      	b.n	80033e2 <_free_r+0x26>
 800342c:	d902      	bls.n	8003434 <_free_r+0x78>
 800342e:	230c      	movs	r3, #12
 8003430:	6003      	str	r3, [r0, #0]
 8003432:	e7d6      	b.n	80033e2 <_free_r+0x26>
 8003434:	6825      	ldr	r5, [r4, #0]
 8003436:	1961      	adds	r1, r4, r5
 8003438:	428b      	cmp	r3, r1
 800343a:	bf04      	itt	eq
 800343c:	6819      	ldreq	r1, [r3, #0]
 800343e:	685b      	ldreq	r3, [r3, #4]
 8003440:	6063      	str	r3, [r4, #4]
 8003442:	bf04      	itt	eq
 8003444:	1949      	addeq	r1, r1, r5
 8003446:	6021      	streq	r1, [r4, #0]
 8003448:	6054      	str	r4, [r2, #4]
 800344a:	e7ca      	b.n	80033e2 <_free_r+0x26>
 800344c:	b003      	add	sp, #12
 800344e:	bd30      	pop	{r4, r5, pc}
 8003450:	2000025c 	.word	0x2000025c

08003454 <sbrk_aligned>:
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	4e0e      	ldr	r6, [pc, #56]	; (8003490 <sbrk_aligned+0x3c>)
 8003458:	460c      	mov	r4, r1
 800345a:	6831      	ldr	r1, [r6, #0]
 800345c:	4605      	mov	r5, r0
 800345e:	b911      	cbnz	r1, 8003466 <sbrk_aligned+0x12>
 8003460:	f000 f9d6 	bl	8003810 <_sbrk_r>
 8003464:	6030      	str	r0, [r6, #0]
 8003466:	4621      	mov	r1, r4
 8003468:	4628      	mov	r0, r5
 800346a:	f000 f9d1 	bl	8003810 <_sbrk_r>
 800346e:	1c43      	adds	r3, r0, #1
 8003470:	d00a      	beq.n	8003488 <sbrk_aligned+0x34>
 8003472:	1cc4      	adds	r4, r0, #3
 8003474:	f024 0403 	bic.w	r4, r4, #3
 8003478:	42a0      	cmp	r0, r4
 800347a:	d007      	beq.n	800348c <sbrk_aligned+0x38>
 800347c:	1a21      	subs	r1, r4, r0
 800347e:	4628      	mov	r0, r5
 8003480:	f000 f9c6 	bl	8003810 <_sbrk_r>
 8003484:	3001      	adds	r0, #1
 8003486:	d101      	bne.n	800348c <sbrk_aligned+0x38>
 8003488:	f04f 34ff 	mov.w	r4, #4294967295
 800348c:	4620      	mov	r0, r4
 800348e:	bd70      	pop	{r4, r5, r6, pc}
 8003490:	20000260 	.word	0x20000260

08003494 <_malloc_r>:
 8003494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003498:	1ccd      	adds	r5, r1, #3
 800349a:	f025 0503 	bic.w	r5, r5, #3
 800349e:	3508      	adds	r5, #8
 80034a0:	2d0c      	cmp	r5, #12
 80034a2:	bf38      	it	cc
 80034a4:	250c      	movcc	r5, #12
 80034a6:	2d00      	cmp	r5, #0
 80034a8:	4607      	mov	r7, r0
 80034aa:	db01      	blt.n	80034b0 <_malloc_r+0x1c>
 80034ac:	42a9      	cmp	r1, r5
 80034ae:	d905      	bls.n	80034bc <_malloc_r+0x28>
 80034b0:	230c      	movs	r3, #12
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	2600      	movs	r6, #0
 80034b6:	4630      	mov	r0, r6
 80034b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003590 <_malloc_r+0xfc>
 80034c0:	f000 f868 	bl	8003594 <__malloc_lock>
 80034c4:	f8d8 3000 	ldr.w	r3, [r8]
 80034c8:	461c      	mov	r4, r3
 80034ca:	bb5c      	cbnz	r4, 8003524 <_malloc_r+0x90>
 80034cc:	4629      	mov	r1, r5
 80034ce:	4638      	mov	r0, r7
 80034d0:	f7ff ffc0 	bl	8003454 <sbrk_aligned>
 80034d4:	1c43      	adds	r3, r0, #1
 80034d6:	4604      	mov	r4, r0
 80034d8:	d155      	bne.n	8003586 <_malloc_r+0xf2>
 80034da:	f8d8 4000 	ldr.w	r4, [r8]
 80034de:	4626      	mov	r6, r4
 80034e0:	2e00      	cmp	r6, #0
 80034e2:	d145      	bne.n	8003570 <_malloc_r+0xdc>
 80034e4:	2c00      	cmp	r4, #0
 80034e6:	d048      	beq.n	800357a <_malloc_r+0xe6>
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	4631      	mov	r1, r6
 80034ec:	4638      	mov	r0, r7
 80034ee:	eb04 0903 	add.w	r9, r4, r3
 80034f2:	f000 f98d 	bl	8003810 <_sbrk_r>
 80034f6:	4581      	cmp	r9, r0
 80034f8:	d13f      	bne.n	800357a <_malloc_r+0xe6>
 80034fa:	6821      	ldr	r1, [r4, #0]
 80034fc:	1a6d      	subs	r5, r5, r1
 80034fe:	4629      	mov	r1, r5
 8003500:	4638      	mov	r0, r7
 8003502:	f7ff ffa7 	bl	8003454 <sbrk_aligned>
 8003506:	3001      	adds	r0, #1
 8003508:	d037      	beq.n	800357a <_malloc_r+0xe6>
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	442b      	add	r3, r5
 800350e:	6023      	str	r3, [r4, #0]
 8003510:	f8d8 3000 	ldr.w	r3, [r8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d038      	beq.n	800358a <_malloc_r+0xf6>
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	42a2      	cmp	r2, r4
 800351c:	d12b      	bne.n	8003576 <_malloc_r+0xe2>
 800351e:	2200      	movs	r2, #0
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	e00f      	b.n	8003544 <_malloc_r+0xb0>
 8003524:	6822      	ldr	r2, [r4, #0]
 8003526:	1b52      	subs	r2, r2, r5
 8003528:	d41f      	bmi.n	800356a <_malloc_r+0xd6>
 800352a:	2a0b      	cmp	r2, #11
 800352c:	d917      	bls.n	800355e <_malloc_r+0xca>
 800352e:	1961      	adds	r1, r4, r5
 8003530:	42a3      	cmp	r3, r4
 8003532:	6025      	str	r5, [r4, #0]
 8003534:	bf18      	it	ne
 8003536:	6059      	strne	r1, [r3, #4]
 8003538:	6863      	ldr	r3, [r4, #4]
 800353a:	bf08      	it	eq
 800353c:	f8c8 1000 	streq.w	r1, [r8]
 8003540:	5162      	str	r2, [r4, r5]
 8003542:	604b      	str	r3, [r1, #4]
 8003544:	4638      	mov	r0, r7
 8003546:	f104 060b 	add.w	r6, r4, #11
 800354a:	f000 f829 	bl	80035a0 <__malloc_unlock>
 800354e:	f026 0607 	bic.w	r6, r6, #7
 8003552:	1d23      	adds	r3, r4, #4
 8003554:	1af2      	subs	r2, r6, r3
 8003556:	d0ae      	beq.n	80034b6 <_malloc_r+0x22>
 8003558:	1b9b      	subs	r3, r3, r6
 800355a:	50a3      	str	r3, [r4, r2]
 800355c:	e7ab      	b.n	80034b6 <_malloc_r+0x22>
 800355e:	42a3      	cmp	r3, r4
 8003560:	6862      	ldr	r2, [r4, #4]
 8003562:	d1dd      	bne.n	8003520 <_malloc_r+0x8c>
 8003564:	f8c8 2000 	str.w	r2, [r8]
 8003568:	e7ec      	b.n	8003544 <_malloc_r+0xb0>
 800356a:	4623      	mov	r3, r4
 800356c:	6864      	ldr	r4, [r4, #4]
 800356e:	e7ac      	b.n	80034ca <_malloc_r+0x36>
 8003570:	4634      	mov	r4, r6
 8003572:	6876      	ldr	r6, [r6, #4]
 8003574:	e7b4      	b.n	80034e0 <_malloc_r+0x4c>
 8003576:	4613      	mov	r3, r2
 8003578:	e7cc      	b.n	8003514 <_malloc_r+0x80>
 800357a:	230c      	movs	r3, #12
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	4638      	mov	r0, r7
 8003580:	f000 f80e 	bl	80035a0 <__malloc_unlock>
 8003584:	e797      	b.n	80034b6 <_malloc_r+0x22>
 8003586:	6025      	str	r5, [r4, #0]
 8003588:	e7dc      	b.n	8003544 <_malloc_r+0xb0>
 800358a:	605b      	str	r3, [r3, #4]
 800358c:	deff      	udf	#255	; 0xff
 800358e:	bf00      	nop
 8003590:	2000025c 	.word	0x2000025c

08003594 <__malloc_lock>:
 8003594:	4801      	ldr	r0, [pc, #4]	; (800359c <__malloc_lock+0x8>)
 8003596:	f7ff bf0f 	b.w	80033b8 <__retarget_lock_acquire_recursive>
 800359a:	bf00      	nop
 800359c:	20000258 	.word	0x20000258

080035a0 <__malloc_unlock>:
 80035a0:	4801      	ldr	r0, [pc, #4]	; (80035a8 <__malloc_unlock+0x8>)
 80035a2:	f7ff bf0a 	b.w	80033ba <__retarget_lock_release_recursive>
 80035a6:	bf00      	nop
 80035a8:	20000258 	.word	0x20000258

080035ac <__sflush_r>:
 80035ac:	898a      	ldrh	r2, [r1, #12]
 80035ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035b2:	4605      	mov	r5, r0
 80035b4:	0710      	lsls	r0, r2, #28
 80035b6:	460c      	mov	r4, r1
 80035b8:	d458      	bmi.n	800366c <__sflush_r+0xc0>
 80035ba:	684b      	ldr	r3, [r1, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	dc05      	bgt.n	80035cc <__sflush_r+0x20>
 80035c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	dc02      	bgt.n	80035cc <__sflush_r+0x20>
 80035c6:	2000      	movs	r0, #0
 80035c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035ce:	2e00      	cmp	r6, #0
 80035d0:	d0f9      	beq.n	80035c6 <__sflush_r+0x1a>
 80035d2:	2300      	movs	r3, #0
 80035d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035d8:	682f      	ldr	r7, [r5, #0]
 80035da:	6a21      	ldr	r1, [r4, #32]
 80035dc:	602b      	str	r3, [r5, #0]
 80035de:	d032      	beq.n	8003646 <__sflush_r+0x9a>
 80035e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035e2:	89a3      	ldrh	r3, [r4, #12]
 80035e4:	075a      	lsls	r2, r3, #29
 80035e6:	d505      	bpl.n	80035f4 <__sflush_r+0x48>
 80035e8:	6863      	ldr	r3, [r4, #4]
 80035ea:	1ac0      	subs	r0, r0, r3
 80035ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035ee:	b10b      	cbz	r3, 80035f4 <__sflush_r+0x48>
 80035f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035f2:	1ac0      	subs	r0, r0, r3
 80035f4:	2300      	movs	r3, #0
 80035f6:	4602      	mov	r2, r0
 80035f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035fa:	6a21      	ldr	r1, [r4, #32]
 80035fc:	4628      	mov	r0, r5
 80035fe:	47b0      	blx	r6
 8003600:	1c43      	adds	r3, r0, #1
 8003602:	89a3      	ldrh	r3, [r4, #12]
 8003604:	d106      	bne.n	8003614 <__sflush_r+0x68>
 8003606:	6829      	ldr	r1, [r5, #0]
 8003608:	291d      	cmp	r1, #29
 800360a:	d82b      	bhi.n	8003664 <__sflush_r+0xb8>
 800360c:	4a29      	ldr	r2, [pc, #164]	; (80036b4 <__sflush_r+0x108>)
 800360e:	410a      	asrs	r2, r1
 8003610:	07d6      	lsls	r6, r2, #31
 8003612:	d427      	bmi.n	8003664 <__sflush_r+0xb8>
 8003614:	2200      	movs	r2, #0
 8003616:	6062      	str	r2, [r4, #4]
 8003618:	04d9      	lsls	r1, r3, #19
 800361a:	6922      	ldr	r2, [r4, #16]
 800361c:	6022      	str	r2, [r4, #0]
 800361e:	d504      	bpl.n	800362a <__sflush_r+0x7e>
 8003620:	1c42      	adds	r2, r0, #1
 8003622:	d101      	bne.n	8003628 <__sflush_r+0x7c>
 8003624:	682b      	ldr	r3, [r5, #0]
 8003626:	b903      	cbnz	r3, 800362a <__sflush_r+0x7e>
 8003628:	6560      	str	r0, [r4, #84]	; 0x54
 800362a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800362c:	602f      	str	r7, [r5, #0]
 800362e:	2900      	cmp	r1, #0
 8003630:	d0c9      	beq.n	80035c6 <__sflush_r+0x1a>
 8003632:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003636:	4299      	cmp	r1, r3
 8003638:	d002      	beq.n	8003640 <__sflush_r+0x94>
 800363a:	4628      	mov	r0, r5
 800363c:	f7ff febe 	bl	80033bc <_free_r>
 8003640:	2000      	movs	r0, #0
 8003642:	6360      	str	r0, [r4, #52]	; 0x34
 8003644:	e7c0      	b.n	80035c8 <__sflush_r+0x1c>
 8003646:	2301      	movs	r3, #1
 8003648:	4628      	mov	r0, r5
 800364a:	47b0      	blx	r6
 800364c:	1c41      	adds	r1, r0, #1
 800364e:	d1c8      	bne.n	80035e2 <__sflush_r+0x36>
 8003650:	682b      	ldr	r3, [r5, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0c5      	beq.n	80035e2 <__sflush_r+0x36>
 8003656:	2b1d      	cmp	r3, #29
 8003658:	d001      	beq.n	800365e <__sflush_r+0xb2>
 800365a:	2b16      	cmp	r3, #22
 800365c:	d101      	bne.n	8003662 <__sflush_r+0xb6>
 800365e:	602f      	str	r7, [r5, #0]
 8003660:	e7b1      	b.n	80035c6 <__sflush_r+0x1a>
 8003662:	89a3      	ldrh	r3, [r4, #12]
 8003664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003668:	81a3      	strh	r3, [r4, #12]
 800366a:	e7ad      	b.n	80035c8 <__sflush_r+0x1c>
 800366c:	690f      	ldr	r7, [r1, #16]
 800366e:	2f00      	cmp	r7, #0
 8003670:	d0a9      	beq.n	80035c6 <__sflush_r+0x1a>
 8003672:	0793      	lsls	r3, r2, #30
 8003674:	680e      	ldr	r6, [r1, #0]
 8003676:	bf08      	it	eq
 8003678:	694b      	ldreq	r3, [r1, #20]
 800367a:	600f      	str	r7, [r1, #0]
 800367c:	bf18      	it	ne
 800367e:	2300      	movne	r3, #0
 8003680:	eba6 0807 	sub.w	r8, r6, r7
 8003684:	608b      	str	r3, [r1, #8]
 8003686:	f1b8 0f00 	cmp.w	r8, #0
 800368a:	dd9c      	ble.n	80035c6 <__sflush_r+0x1a>
 800368c:	6a21      	ldr	r1, [r4, #32]
 800368e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003690:	4643      	mov	r3, r8
 8003692:	463a      	mov	r2, r7
 8003694:	4628      	mov	r0, r5
 8003696:	47b0      	blx	r6
 8003698:	2800      	cmp	r0, #0
 800369a:	dc06      	bgt.n	80036aa <__sflush_r+0xfe>
 800369c:	89a3      	ldrh	r3, [r4, #12]
 800369e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a2:	81a3      	strh	r3, [r4, #12]
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	e78e      	b.n	80035c8 <__sflush_r+0x1c>
 80036aa:	4407      	add	r7, r0
 80036ac:	eba8 0800 	sub.w	r8, r8, r0
 80036b0:	e7e9      	b.n	8003686 <__sflush_r+0xda>
 80036b2:	bf00      	nop
 80036b4:	dfbffffe 	.word	0xdfbffffe

080036b8 <_fflush_r>:
 80036b8:	b538      	push	{r3, r4, r5, lr}
 80036ba:	690b      	ldr	r3, [r1, #16]
 80036bc:	4605      	mov	r5, r0
 80036be:	460c      	mov	r4, r1
 80036c0:	b913      	cbnz	r3, 80036c8 <_fflush_r+0x10>
 80036c2:	2500      	movs	r5, #0
 80036c4:	4628      	mov	r0, r5
 80036c6:	bd38      	pop	{r3, r4, r5, pc}
 80036c8:	b118      	cbz	r0, 80036d2 <_fflush_r+0x1a>
 80036ca:	6a03      	ldr	r3, [r0, #32]
 80036cc:	b90b      	cbnz	r3, 80036d2 <_fflush_r+0x1a>
 80036ce:	f7ff fc91 	bl	8002ff4 <__sinit>
 80036d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f3      	beq.n	80036c2 <_fflush_r+0xa>
 80036da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036dc:	07d0      	lsls	r0, r2, #31
 80036de:	d404      	bmi.n	80036ea <_fflush_r+0x32>
 80036e0:	0599      	lsls	r1, r3, #22
 80036e2:	d402      	bmi.n	80036ea <_fflush_r+0x32>
 80036e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036e6:	f7ff fe67 	bl	80033b8 <__retarget_lock_acquire_recursive>
 80036ea:	4628      	mov	r0, r5
 80036ec:	4621      	mov	r1, r4
 80036ee:	f7ff ff5d 	bl	80035ac <__sflush_r>
 80036f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036f4:	07da      	lsls	r2, r3, #31
 80036f6:	4605      	mov	r5, r0
 80036f8:	d4e4      	bmi.n	80036c4 <_fflush_r+0xc>
 80036fa:	89a3      	ldrh	r3, [r4, #12]
 80036fc:	059b      	lsls	r3, r3, #22
 80036fe:	d4e1      	bmi.n	80036c4 <_fflush_r+0xc>
 8003700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003702:	f7ff fe5a 	bl	80033ba <__retarget_lock_release_recursive>
 8003706:	e7dd      	b.n	80036c4 <_fflush_r+0xc>

08003708 <__swhatbuf_r>:
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	460c      	mov	r4, r1
 800370c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003710:	2900      	cmp	r1, #0
 8003712:	b096      	sub	sp, #88	; 0x58
 8003714:	4615      	mov	r5, r2
 8003716:	461e      	mov	r6, r3
 8003718:	da0d      	bge.n	8003736 <__swhatbuf_r+0x2e>
 800371a:	89a3      	ldrh	r3, [r4, #12]
 800371c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003720:	f04f 0100 	mov.w	r1, #0
 8003724:	bf0c      	ite	eq
 8003726:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800372a:	2340      	movne	r3, #64	; 0x40
 800372c:	2000      	movs	r0, #0
 800372e:	6031      	str	r1, [r6, #0]
 8003730:	602b      	str	r3, [r5, #0]
 8003732:	b016      	add	sp, #88	; 0x58
 8003734:	bd70      	pop	{r4, r5, r6, pc}
 8003736:	466a      	mov	r2, sp
 8003738:	f000 f848 	bl	80037cc <_fstat_r>
 800373c:	2800      	cmp	r0, #0
 800373e:	dbec      	blt.n	800371a <__swhatbuf_r+0x12>
 8003740:	9901      	ldr	r1, [sp, #4]
 8003742:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003746:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800374a:	4259      	negs	r1, r3
 800374c:	4159      	adcs	r1, r3
 800374e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003752:	e7eb      	b.n	800372c <__swhatbuf_r+0x24>

08003754 <__smakebuf_r>:
 8003754:	898b      	ldrh	r3, [r1, #12]
 8003756:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003758:	079d      	lsls	r5, r3, #30
 800375a:	4606      	mov	r6, r0
 800375c:	460c      	mov	r4, r1
 800375e:	d507      	bpl.n	8003770 <__smakebuf_r+0x1c>
 8003760:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003764:	6023      	str	r3, [r4, #0]
 8003766:	6123      	str	r3, [r4, #16]
 8003768:	2301      	movs	r3, #1
 800376a:	6163      	str	r3, [r4, #20]
 800376c:	b002      	add	sp, #8
 800376e:	bd70      	pop	{r4, r5, r6, pc}
 8003770:	ab01      	add	r3, sp, #4
 8003772:	466a      	mov	r2, sp
 8003774:	f7ff ffc8 	bl	8003708 <__swhatbuf_r>
 8003778:	9900      	ldr	r1, [sp, #0]
 800377a:	4605      	mov	r5, r0
 800377c:	4630      	mov	r0, r6
 800377e:	f7ff fe89 	bl	8003494 <_malloc_r>
 8003782:	b948      	cbnz	r0, 8003798 <__smakebuf_r+0x44>
 8003784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003788:	059a      	lsls	r2, r3, #22
 800378a:	d4ef      	bmi.n	800376c <__smakebuf_r+0x18>
 800378c:	f023 0303 	bic.w	r3, r3, #3
 8003790:	f043 0302 	orr.w	r3, r3, #2
 8003794:	81a3      	strh	r3, [r4, #12]
 8003796:	e7e3      	b.n	8003760 <__smakebuf_r+0xc>
 8003798:	89a3      	ldrh	r3, [r4, #12]
 800379a:	6020      	str	r0, [r4, #0]
 800379c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a0:	81a3      	strh	r3, [r4, #12]
 80037a2:	9b00      	ldr	r3, [sp, #0]
 80037a4:	6163      	str	r3, [r4, #20]
 80037a6:	9b01      	ldr	r3, [sp, #4]
 80037a8:	6120      	str	r0, [r4, #16]
 80037aa:	b15b      	cbz	r3, 80037c4 <__smakebuf_r+0x70>
 80037ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037b0:	4630      	mov	r0, r6
 80037b2:	f000 f81d 	bl	80037f0 <_isatty_r>
 80037b6:	b128      	cbz	r0, 80037c4 <__smakebuf_r+0x70>
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	f023 0303 	bic.w	r3, r3, #3
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	81a3      	strh	r3, [r4, #12]
 80037c4:	89a3      	ldrh	r3, [r4, #12]
 80037c6:	431d      	orrs	r5, r3
 80037c8:	81a5      	strh	r5, [r4, #12]
 80037ca:	e7cf      	b.n	800376c <__smakebuf_r+0x18>

080037cc <_fstat_r>:
 80037cc:	b538      	push	{r3, r4, r5, lr}
 80037ce:	4d07      	ldr	r5, [pc, #28]	; (80037ec <_fstat_r+0x20>)
 80037d0:	2300      	movs	r3, #0
 80037d2:	4604      	mov	r4, r0
 80037d4:	4608      	mov	r0, r1
 80037d6:	4611      	mov	r1, r2
 80037d8:	602b      	str	r3, [r5, #0]
 80037da:	f000 f948 	bl	8003a6e <_fstat>
 80037de:	1c43      	adds	r3, r0, #1
 80037e0:	d102      	bne.n	80037e8 <_fstat_r+0x1c>
 80037e2:	682b      	ldr	r3, [r5, #0]
 80037e4:	b103      	cbz	r3, 80037e8 <_fstat_r+0x1c>
 80037e6:	6023      	str	r3, [r4, #0]
 80037e8:	bd38      	pop	{r3, r4, r5, pc}
 80037ea:	bf00      	nop
 80037ec:	20000254 	.word	0x20000254

080037f0 <_isatty_r>:
 80037f0:	b538      	push	{r3, r4, r5, lr}
 80037f2:	4d06      	ldr	r5, [pc, #24]	; (800380c <_isatty_r+0x1c>)
 80037f4:	2300      	movs	r3, #0
 80037f6:	4604      	mov	r4, r0
 80037f8:	4608      	mov	r0, r1
 80037fa:	602b      	str	r3, [r5, #0]
 80037fc:	f000 fa9e 	bl	8003d3c <_isatty>
 8003800:	1c43      	adds	r3, r0, #1
 8003802:	d102      	bne.n	800380a <_isatty_r+0x1a>
 8003804:	682b      	ldr	r3, [r5, #0]
 8003806:	b103      	cbz	r3, 800380a <_isatty_r+0x1a>
 8003808:	6023      	str	r3, [r4, #0]
 800380a:	bd38      	pop	{r3, r4, r5, pc}
 800380c:	20000254 	.word	0x20000254

08003810 <_sbrk_r>:
 8003810:	b538      	push	{r3, r4, r5, lr}
 8003812:	4d06      	ldr	r5, [pc, #24]	; (800382c <_sbrk_r+0x1c>)
 8003814:	2300      	movs	r3, #0
 8003816:	4604      	mov	r4, r0
 8003818:	4608      	mov	r0, r1
 800381a:	602b      	str	r3, [r5, #0]
 800381c:	f7fd f804 	bl	8000828 <_sbrk>
 8003820:	1c43      	adds	r3, r0, #1
 8003822:	d102      	bne.n	800382a <_sbrk_r+0x1a>
 8003824:	682b      	ldr	r3, [r5, #0]
 8003826:	b103      	cbz	r3, 800382a <_sbrk_r+0x1a>
 8003828:	6023      	str	r3, [r4, #0]
 800382a:	bd38      	pop	{r3, r4, r5, pc}
 800382c:	20000254 	.word	0x20000254

08003830 <findslot>:
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <findslot+0x2c>)
 8003832:	b510      	push	{r4, lr}
 8003834:	4604      	mov	r4, r0
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	b118      	cbz	r0, 8003842 <findslot+0x12>
 800383a:	6a03      	ldr	r3, [r0, #32]
 800383c:	b90b      	cbnz	r3, 8003842 <findslot+0x12>
 800383e:	f7ff fbd9 	bl	8002ff4 <__sinit>
 8003842:	2c13      	cmp	r4, #19
 8003844:	d807      	bhi.n	8003856 <findslot+0x26>
 8003846:	4806      	ldr	r0, [pc, #24]	; (8003860 <findslot+0x30>)
 8003848:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800384c:	3201      	adds	r2, #1
 800384e:	d002      	beq.n	8003856 <findslot+0x26>
 8003850:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003854:	bd10      	pop	{r4, pc}
 8003856:	2000      	movs	r0, #0
 8003858:	e7fc      	b.n	8003854 <findslot+0x24>
 800385a:	bf00      	nop
 800385c:	20000064 	.word	0x20000064
 8003860:	20000270 	.word	0x20000270

08003864 <error>:
 8003864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003866:	4604      	mov	r4, r0
 8003868:	f7ff fd7c 	bl	8003364 <__errno>
 800386c:	2613      	movs	r6, #19
 800386e:	4605      	mov	r5, r0
 8003870:	2700      	movs	r7, #0
 8003872:	4630      	mov	r0, r6
 8003874:	4639      	mov	r1, r7
 8003876:	beab      	bkpt	0x00ab
 8003878:	4606      	mov	r6, r0
 800387a:	602e      	str	r6, [r5, #0]
 800387c:	4620      	mov	r0, r4
 800387e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003880 <checkerror>:
 8003880:	1c43      	adds	r3, r0, #1
 8003882:	d101      	bne.n	8003888 <checkerror+0x8>
 8003884:	f7ff bfee 	b.w	8003864 <error>
 8003888:	4770      	bx	lr

0800388a <_swiread>:
 800388a:	b530      	push	{r4, r5, lr}
 800388c:	b085      	sub	sp, #20
 800388e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003892:	9203      	str	r2, [sp, #12]
 8003894:	2406      	movs	r4, #6
 8003896:	ad01      	add	r5, sp, #4
 8003898:	4620      	mov	r0, r4
 800389a:	4629      	mov	r1, r5
 800389c:	beab      	bkpt	0x00ab
 800389e:	4604      	mov	r4, r0
 80038a0:	4620      	mov	r0, r4
 80038a2:	f7ff ffed 	bl	8003880 <checkerror>
 80038a6:	b005      	add	sp, #20
 80038a8:	bd30      	pop	{r4, r5, pc}

080038aa <_read>:
 80038aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038ac:	4615      	mov	r5, r2
 80038ae:	9101      	str	r1, [sp, #4]
 80038b0:	f7ff ffbe 	bl	8003830 <findslot>
 80038b4:	9901      	ldr	r1, [sp, #4]
 80038b6:	4604      	mov	r4, r0
 80038b8:	b938      	cbnz	r0, 80038ca <_read+0x20>
 80038ba:	f7ff fd53 	bl	8003364 <__errno>
 80038be:	2309      	movs	r3, #9
 80038c0:	6003      	str	r3, [r0, #0]
 80038c2:	f04f 30ff 	mov.w	r0, #4294967295
 80038c6:	b003      	add	sp, #12
 80038c8:	bd30      	pop	{r4, r5, pc}
 80038ca:	6800      	ldr	r0, [r0, #0]
 80038cc:	462a      	mov	r2, r5
 80038ce:	f7ff ffdc 	bl	800388a <_swiread>
 80038d2:	1c43      	adds	r3, r0, #1
 80038d4:	d0f7      	beq.n	80038c6 <_read+0x1c>
 80038d6:	6863      	ldr	r3, [r4, #4]
 80038d8:	1a2a      	subs	r2, r5, r0
 80038da:	4413      	add	r3, r2
 80038dc:	6063      	str	r3, [r4, #4]
 80038de:	4610      	mov	r0, r2
 80038e0:	e7f1      	b.n	80038c6 <_read+0x1c>

080038e2 <_swilseek>:
 80038e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038e4:	460c      	mov	r4, r1
 80038e6:	4616      	mov	r6, r2
 80038e8:	f7ff ffa2 	bl	8003830 <findslot>
 80038ec:	4605      	mov	r5, r0
 80038ee:	b940      	cbnz	r0, 8003902 <_swilseek+0x20>
 80038f0:	f7ff fd38 	bl	8003364 <__errno>
 80038f4:	2309      	movs	r3, #9
 80038f6:	6003      	str	r3, [r0, #0]
 80038f8:	f04f 34ff 	mov.w	r4, #4294967295
 80038fc:	4620      	mov	r0, r4
 80038fe:	b003      	add	sp, #12
 8003900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003902:	2e02      	cmp	r6, #2
 8003904:	d903      	bls.n	800390e <_swilseek+0x2c>
 8003906:	f7ff fd2d 	bl	8003364 <__errno>
 800390a:	2316      	movs	r3, #22
 800390c:	e7f3      	b.n	80038f6 <_swilseek+0x14>
 800390e:	2e01      	cmp	r6, #1
 8003910:	d112      	bne.n	8003938 <_swilseek+0x56>
 8003912:	6843      	ldr	r3, [r0, #4]
 8003914:	18e4      	adds	r4, r4, r3
 8003916:	d4f6      	bmi.n	8003906 <_swilseek+0x24>
 8003918:	682b      	ldr	r3, [r5, #0]
 800391a:	260a      	movs	r6, #10
 800391c:	e9cd 3400 	strd	r3, r4, [sp]
 8003920:	466f      	mov	r7, sp
 8003922:	4630      	mov	r0, r6
 8003924:	4639      	mov	r1, r7
 8003926:	beab      	bkpt	0x00ab
 8003928:	4606      	mov	r6, r0
 800392a:	4630      	mov	r0, r6
 800392c:	f7ff ffa8 	bl	8003880 <checkerror>
 8003930:	2800      	cmp	r0, #0
 8003932:	dbe1      	blt.n	80038f8 <_swilseek+0x16>
 8003934:	606c      	str	r4, [r5, #4]
 8003936:	e7e1      	b.n	80038fc <_swilseek+0x1a>
 8003938:	2e02      	cmp	r6, #2
 800393a:	6803      	ldr	r3, [r0, #0]
 800393c:	d1ec      	bne.n	8003918 <_swilseek+0x36>
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	260c      	movs	r6, #12
 8003942:	466f      	mov	r7, sp
 8003944:	4630      	mov	r0, r6
 8003946:	4639      	mov	r1, r7
 8003948:	beab      	bkpt	0x00ab
 800394a:	4606      	mov	r6, r0
 800394c:	4630      	mov	r0, r6
 800394e:	f7ff ff97 	bl	8003880 <checkerror>
 8003952:	1c43      	adds	r3, r0, #1
 8003954:	d0d0      	beq.n	80038f8 <_swilseek+0x16>
 8003956:	4404      	add	r4, r0
 8003958:	e7de      	b.n	8003918 <_swilseek+0x36>

0800395a <_lseek>:
 800395a:	f7ff bfc2 	b.w	80038e2 <_swilseek>

0800395e <_swiwrite>:
 800395e:	b530      	push	{r4, r5, lr}
 8003960:	b085      	sub	sp, #20
 8003962:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003966:	9203      	str	r2, [sp, #12]
 8003968:	2405      	movs	r4, #5
 800396a:	ad01      	add	r5, sp, #4
 800396c:	4620      	mov	r0, r4
 800396e:	4629      	mov	r1, r5
 8003970:	beab      	bkpt	0x00ab
 8003972:	4604      	mov	r4, r0
 8003974:	4620      	mov	r0, r4
 8003976:	f7ff ff83 	bl	8003880 <checkerror>
 800397a:	b005      	add	sp, #20
 800397c:	bd30      	pop	{r4, r5, pc}

0800397e <_write>:
 800397e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003980:	4615      	mov	r5, r2
 8003982:	9101      	str	r1, [sp, #4]
 8003984:	f7ff ff54 	bl	8003830 <findslot>
 8003988:	9901      	ldr	r1, [sp, #4]
 800398a:	4604      	mov	r4, r0
 800398c:	b930      	cbnz	r0, 800399c <_write+0x1e>
 800398e:	f7ff fce9 	bl	8003364 <__errno>
 8003992:	2309      	movs	r3, #9
 8003994:	6003      	str	r3, [r0, #0]
 8003996:	f04f 30ff 	mov.w	r0, #4294967295
 800399a:	e012      	b.n	80039c2 <_write+0x44>
 800399c:	6800      	ldr	r0, [r0, #0]
 800399e:	462a      	mov	r2, r5
 80039a0:	f7ff ffdd 	bl	800395e <_swiwrite>
 80039a4:	2800      	cmp	r0, #0
 80039a6:	dbf6      	blt.n	8003996 <_write+0x18>
 80039a8:	6862      	ldr	r2, [r4, #4]
 80039aa:	1a2b      	subs	r3, r5, r0
 80039ac:	441a      	add	r2, r3
 80039ae:	42a8      	cmp	r0, r5
 80039b0:	6062      	str	r2, [r4, #4]
 80039b2:	d105      	bne.n	80039c0 <_write+0x42>
 80039b4:	2000      	movs	r0, #0
 80039b6:	b003      	add	sp, #12
 80039b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039bc:	f7ff bf52 	b.w	8003864 <error>
 80039c0:	4618      	mov	r0, r3
 80039c2:	b003      	add	sp, #12
 80039c4:	bd30      	pop	{r4, r5, pc}

080039c6 <_swiclose>:
 80039c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039c8:	2402      	movs	r4, #2
 80039ca:	9001      	str	r0, [sp, #4]
 80039cc:	ad01      	add	r5, sp, #4
 80039ce:	4620      	mov	r0, r4
 80039d0:	4629      	mov	r1, r5
 80039d2:	beab      	bkpt	0x00ab
 80039d4:	4604      	mov	r4, r0
 80039d6:	4620      	mov	r0, r4
 80039d8:	f7ff ff52 	bl	8003880 <checkerror>
 80039dc:	b003      	add	sp, #12
 80039de:	bd30      	pop	{r4, r5, pc}

080039e0 <_close>:
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	4605      	mov	r5, r0
 80039e4:	f7ff ff24 	bl	8003830 <findslot>
 80039e8:	4604      	mov	r4, r0
 80039ea:	b930      	cbnz	r0, 80039fa <_close+0x1a>
 80039ec:	f7ff fcba 	bl	8003364 <__errno>
 80039f0:	2309      	movs	r3, #9
 80039f2:	6003      	str	r3, [r0, #0]
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295
 80039f8:	bd38      	pop	{r3, r4, r5, pc}
 80039fa:	3d01      	subs	r5, #1
 80039fc:	2d01      	cmp	r5, #1
 80039fe:	d809      	bhi.n	8003a14 <_close+0x34>
 8003a00:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <_close+0x48>)
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d104      	bne.n	8003a14 <_close+0x34>
 8003a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0e:	6003      	str	r3, [r0, #0]
 8003a10:	2000      	movs	r0, #0
 8003a12:	e7f1      	b.n	80039f8 <_close+0x18>
 8003a14:	6820      	ldr	r0, [r4, #0]
 8003a16:	f7ff ffd6 	bl	80039c6 <_swiclose>
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d1ec      	bne.n	80039f8 <_close+0x18>
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a22:	6023      	str	r3, [r4, #0]
 8003a24:	e7e8      	b.n	80039f8 <_close+0x18>
 8003a26:	bf00      	nop
 8003a28:	20000270 	.word	0x20000270

08003a2c <_swistat>:
 8003a2c:	b570      	push	{r4, r5, r6, lr}
 8003a2e:	460c      	mov	r4, r1
 8003a30:	f7ff fefe 	bl	8003830 <findslot>
 8003a34:	4605      	mov	r5, r0
 8003a36:	b930      	cbnz	r0, 8003a46 <_swistat+0x1a>
 8003a38:	f7ff fc94 	bl	8003364 <__errno>
 8003a3c:	2309      	movs	r3, #9
 8003a3e:	6003      	str	r3, [r0, #0]
 8003a40:	f04f 30ff 	mov.w	r0, #4294967295
 8003a44:	bd70      	pop	{r4, r5, r6, pc}
 8003a46:	6863      	ldr	r3, [r4, #4]
 8003a48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a4c:	6063      	str	r3, [r4, #4]
 8003a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a52:	64a3      	str	r3, [r4, #72]	; 0x48
 8003a54:	260c      	movs	r6, #12
 8003a56:	4630      	mov	r0, r6
 8003a58:	4629      	mov	r1, r5
 8003a5a:	beab      	bkpt	0x00ab
 8003a5c:	4605      	mov	r5, r0
 8003a5e:	4628      	mov	r0, r5
 8003a60:	f7ff ff0e 	bl	8003880 <checkerror>
 8003a64:	1c43      	adds	r3, r0, #1
 8003a66:	bf1c      	itt	ne
 8003a68:	6120      	strne	r0, [r4, #16]
 8003a6a:	2000      	movne	r0, #0
 8003a6c:	e7ea      	b.n	8003a44 <_swistat+0x18>

08003a6e <_fstat>:
 8003a6e:	460b      	mov	r3, r1
 8003a70:	b510      	push	{r4, lr}
 8003a72:	2100      	movs	r1, #0
 8003a74:	4604      	mov	r4, r0
 8003a76:	2258      	movs	r2, #88	; 0x58
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff fc25 	bl	80032c8 <memset>
 8003a7e:	4601      	mov	r1, r0
 8003a80:	4620      	mov	r0, r4
 8003a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a86:	f7ff bfd1 	b.w	8003a2c <_swistat>

08003a8a <_stat>:
 8003a8a:	b538      	push	{r3, r4, r5, lr}
 8003a8c:	460d      	mov	r5, r1
 8003a8e:	4604      	mov	r4, r0
 8003a90:	2258      	movs	r2, #88	; 0x58
 8003a92:	2100      	movs	r1, #0
 8003a94:	4628      	mov	r0, r5
 8003a96:	f7ff fc17 	bl	80032c8 <memset>
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	f000 f811 	bl	8003ac4 <_swiopen>
 8003aa2:	1c43      	adds	r3, r0, #1
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	d00b      	beq.n	8003ac0 <_stat+0x36>
 8003aa8:	686b      	ldr	r3, [r5, #4]
 8003aaa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003aae:	606b      	str	r3, [r5, #4]
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	f7ff ffbb 	bl	8003a2c <_swistat>
 8003ab6:	4605      	mov	r5, r0
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f7ff ff91 	bl	80039e0 <_close>
 8003abe:	462c      	mov	r4, r5
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	bd38      	pop	{r3, r4, r5, pc}

08003ac4 <_swiopen>:
 8003ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ac8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003b74 <_swiopen+0xb0>
 8003acc:	b097      	sub	sp, #92	; 0x5c
 8003ace:	4607      	mov	r7, r0
 8003ad0:	460e      	mov	r6, r1
 8003ad2:	2500      	movs	r5, #0
 8003ad4:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8003ad8:	1c61      	adds	r1, r4, #1
 8003ada:	d037      	beq.n	8003b4c <_swiopen+0x88>
 8003adc:	3501      	adds	r5, #1
 8003ade:	2d14      	cmp	r5, #20
 8003ae0:	d1f8      	bne.n	8003ad4 <_swiopen+0x10>
 8003ae2:	f7ff fc3f 	bl	8003364 <__errno>
 8003ae6:	2318      	movs	r3, #24
 8003ae8:	6003      	str	r3, [r0, #0]
 8003aea:	f04f 34ff 	mov.w	r4, #4294967295
 8003aee:	e03d      	b.n	8003b6c <_swiopen+0xa8>
 8003af0:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8003af4:	f240 6301 	movw	r3, #1537	; 0x601
 8003af8:	07b2      	lsls	r2, r6, #30
 8003afa:	bf48      	it	mi
 8003afc:	f044 0402 	orrmi.w	r4, r4, #2
 8003b00:	421e      	tst	r6, r3
 8003b02:	bf18      	it	ne
 8003b04:	f044 0404 	orrne.w	r4, r4, #4
 8003b08:	0733      	lsls	r3, r6, #28
 8003b0a:	bf48      	it	mi
 8003b0c:	f024 0404 	bicmi.w	r4, r4, #4
 8003b10:	4638      	mov	r0, r7
 8003b12:	bf48      	it	mi
 8003b14:	f044 0408 	orrmi.w	r4, r4, #8
 8003b18:	9700      	str	r7, [sp, #0]
 8003b1a:	f7fc fb55 	bl	80001c8 <strlen>
 8003b1e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8003b22:	2401      	movs	r4, #1
 8003b24:	4620      	mov	r0, r4
 8003b26:	4649      	mov	r1, r9
 8003b28:	beab      	bkpt	0x00ab
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	2c00      	cmp	r4, #0
 8003b2e:	db08      	blt.n	8003b42 <_swiopen+0x7e>
 8003b30:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8003b34:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f8c8 3004 	str.w	r3, [r8, #4]
 8003b3e:	462c      	mov	r4, r5
 8003b40:	e014      	b.n	8003b6c <_swiopen+0xa8>
 8003b42:	4620      	mov	r0, r4
 8003b44:	f7ff fe8e 	bl	8003864 <error>
 8003b48:	4604      	mov	r4, r0
 8003b4a:	e00f      	b.n	8003b6c <_swiopen+0xa8>
 8003b4c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8003b50:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003b54:	46e9      	mov	r9, sp
 8003b56:	d1cb      	bne.n	8003af0 <_swiopen+0x2c>
 8003b58:	4649      	mov	r1, r9
 8003b5a:	4638      	mov	r0, r7
 8003b5c:	f7ff ff95 	bl	8003a8a <_stat>
 8003b60:	3001      	adds	r0, #1
 8003b62:	d0c5      	beq.n	8003af0 <_swiopen+0x2c>
 8003b64:	f7ff fbfe 	bl	8003364 <__errno>
 8003b68:	2311      	movs	r3, #17
 8003b6a:	6003      	str	r3, [r0, #0]
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	b017      	add	sp, #92	; 0x5c
 8003b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b74:	20000270 	.word	0x20000270

08003b78 <_get_semihosting_exts>:
 8003b78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003b7c:	4606      	mov	r6, r0
 8003b7e:	460f      	mov	r7, r1
 8003b80:	482a      	ldr	r0, [pc, #168]	; (8003c2c <_get_semihosting_exts+0xb4>)
 8003b82:	2100      	movs	r1, #0
 8003b84:	4615      	mov	r5, r2
 8003b86:	f7ff ff9d 	bl	8003ac4 <_swiopen>
 8003b8a:	462a      	mov	r2, r5
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4630      	mov	r0, r6
 8003b92:	f7ff fb99 	bl	80032c8 <memset>
 8003b96:	1c63      	adds	r3, r4, #1
 8003b98:	d016      	beq.n	8003bc8 <_get_semihosting_exts+0x50>
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	f7ff fe48 	bl	8003830 <findslot>
 8003ba0:	f04f 080c 	mov.w	r8, #12
 8003ba4:	4681      	mov	r9, r0
 8003ba6:	4640      	mov	r0, r8
 8003ba8:	4649      	mov	r1, r9
 8003baa:	beab      	bkpt	0x00ab
 8003bac:	4680      	mov	r8, r0
 8003bae:	4640      	mov	r0, r8
 8003bb0:	f7ff fe66 	bl	8003880 <checkerror>
 8003bb4:	2803      	cmp	r0, #3
 8003bb6:	dd02      	ble.n	8003bbe <_get_semihosting_exts+0x46>
 8003bb8:	1ec3      	subs	r3, r0, #3
 8003bba:	42ab      	cmp	r3, r5
 8003bbc:	dc08      	bgt.n	8003bd0 <_get_semihosting_exts+0x58>
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	f7ff ff0e 	bl	80039e0 <_close>
 8003bc4:	f04f 34ff 	mov.w	r4, #4294967295
 8003bc8:	4620      	mov	r0, r4
 8003bca:	b003      	add	sp, #12
 8003bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	eb0d 0102 	add.w	r1, sp, r2
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f7ff fe67 	bl	80038aa <_read>
 8003bdc:	2803      	cmp	r0, #3
 8003bde:	ddee      	ble.n	8003bbe <_get_semihosting_exts+0x46>
 8003be0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003be4:	2b53      	cmp	r3, #83	; 0x53
 8003be6:	d1ea      	bne.n	8003bbe <_get_semihosting_exts+0x46>
 8003be8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003bec:	2b48      	cmp	r3, #72	; 0x48
 8003bee:	d1e6      	bne.n	8003bbe <_get_semihosting_exts+0x46>
 8003bf0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003bf4:	2b46      	cmp	r3, #70	; 0x46
 8003bf6:	d1e2      	bne.n	8003bbe <_get_semihosting_exts+0x46>
 8003bf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003bfc:	2b42      	cmp	r3, #66	; 0x42
 8003bfe:	d1de      	bne.n	8003bbe <_get_semihosting_exts+0x46>
 8003c00:	2201      	movs	r2, #1
 8003c02:	4639      	mov	r1, r7
 8003c04:	4620      	mov	r0, r4
 8003c06:	f7ff fe6c 	bl	80038e2 <_swilseek>
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	dbd7      	blt.n	8003bbe <_get_semihosting_exts+0x46>
 8003c0e:	462a      	mov	r2, r5
 8003c10:	4631      	mov	r1, r6
 8003c12:	4620      	mov	r0, r4
 8003c14:	f7ff fe49 	bl	80038aa <_read>
 8003c18:	4605      	mov	r5, r0
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f7ff fee0 	bl	80039e0 <_close>
 8003c20:	4628      	mov	r0, r5
 8003c22:	f7ff fe2d 	bl	8003880 <checkerror>
 8003c26:	4604      	mov	r4, r0
 8003c28:	e7ce      	b.n	8003bc8 <_get_semihosting_exts+0x50>
 8003c2a:	bf00      	nop
 8003c2c:	08003ddc 	.word	0x08003ddc

08003c30 <initialise_semihosting_exts>:
 8003c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c32:	4d0a      	ldr	r5, [pc, #40]	; (8003c5c <initialise_semihosting_exts+0x2c>)
 8003c34:	4c0a      	ldr	r4, [pc, #40]	; (8003c60 <initialise_semihosting_exts+0x30>)
 8003c36:	2100      	movs	r1, #0
 8003c38:	2201      	movs	r2, #1
 8003c3a:	a801      	add	r0, sp, #4
 8003c3c:	6029      	str	r1, [r5, #0]
 8003c3e:	6022      	str	r2, [r4, #0]
 8003c40:	f7ff ff9a 	bl	8003b78 <_get_semihosting_exts>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	dd07      	ble.n	8003c58 <initialise_semihosting_exts+0x28>
 8003c48:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c4c:	f003 0201 	and.w	r2, r3, #1
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	602a      	str	r2, [r5, #0]
 8003c56:	6023      	str	r3, [r4, #0]
 8003c58:	b003      	add	sp, #12
 8003c5a:	bd30      	pop	{r4, r5, pc}
 8003c5c:	20000068 	.word	0x20000068
 8003c60:	2000006c 	.word	0x2000006c

08003c64 <_has_ext_stdout_stderr>:
 8003c64:	b510      	push	{r4, lr}
 8003c66:	4c04      	ldr	r4, [pc, #16]	; (8003c78 <_has_ext_stdout_stderr+0x14>)
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	da01      	bge.n	8003c72 <_has_ext_stdout_stderr+0xe>
 8003c6e:	f7ff ffdf 	bl	8003c30 <initialise_semihosting_exts>
 8003c72:	6820      	ldr	r0, [r4, #0]
 8003c74:	bd10      	pop	{r4, pc}
 8003c76:	bf00      	nop
 8003c78:	2000006c 	.word	0x2000006c

08003c7c <initialise_monitor_handles>:
 8003c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c80:	b085      	sub	sp, #20
 8003c82:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003d34 <initialise_monitor_handles+0xb8>
 8003c86:	f8cd 9004 	str.w	r9, [sp, #4]
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	2400      	movs	r4, #0
 8003c8e:	9303      	str	r3, [sp, #12]
 8003c90:	af01      	add	r7, sp, #4
 8003c92:	9402      	str	r4, [sp, #8]
 8003c94:	2501      	movs	r5, #1
 8003c96:	4628      	mov	r0, r5
 8003c98:	4639      	mov	r1, r7
 8003c9a:	beab      	bkpt	0x00ab
 8003c9c:	4605      	mov	r5, r0
 8003c9e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003d38 <initialise_monitor_handles+0xbc>
 8003ca2:	4623      	mov	r3, r4
 8003ca4:	4c20      	ldr	r4, [pc, #128]	; (8003d28 <initialise_monitor_handles+0xac>)
 8003ca6:	f8c8 5000 	str.w	r5, [r8]
 8003caa:	f04f 32ff 	mov.w	r2, #4294967295
 8003cae:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	2b14      	cmp	r3, #20
 8003cb6:	d1fa      	bne.n	8003cae <initialise_monitor_handles+0x32>
 8003cb8:	f7ff ffd4 	bl	8003c64 <_has_ext_stdout_stderr>
 8003cbc:	4d1b      	ldr	r5, [pc, #108]	; (8003d2c <initialise_monitor_handles+0xb0>)
 8003cbe:	b1d0      	cbz	r0, 8003cf6 <initialise_monitor_handles+0x7a>
 8003cc0:	f04f 0a03 	mov.w	sl, #3
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	f8cd 9004 	str.w	r9, [sp, #4]
 8003cca:	2601      	movs	r6, #1
 8003ccc:	f8cd a00c 	str.w	sl, [sp, #12]
 8003cd0:	9302      	str	r3, [sp, #8]
 8003cd2:	4630      	mov	r0, r6
 8003cd4:	4639      	mov	r1, r7
 8003cd6:	beab      	bkpt	0x00ab
 8003cd8:	4683      	mov	fp, r0
 8003cda:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <initialise_monitor_handles+0xb4>)
 8003cdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8003ce0:	f8c3 b000 	str.w	fp, [r3]
 8003ce4:	2308      	movs	r3, #8
 8003ce6:	f8cd a00c 	str.w	sl, [sp, #12]
 8003cea:	9302      	str	r3, [sp, #8]
 8003cec:	4630      	mov	r0, r6
 8003cee:	4639      	mov	r1, r7
 8003cf0:	beab      	bkpt	0x00ab
 8003cf2:	4606      	mov	r6, r0
 8003cf4:	602e      	str	r6, [r5, #0]
 8003cf6:	682b      	ldr	r3, [r5, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	bf02      	ittt	eq
 8003cfc:	4b0c      	ldreq	r3, [pc, #48]	; (8003d30 <initialise_monitor_handles+0xb4>)
 8003cfe:	681b      	ldreq	r3, [r3, #0]
 8003d00:	602b      	streq	r3, [r5, #0]
 8003d02:	2600      	movs	r6, #0
 8003d04:	f8d8 3000 	ldr.w	r3, [r8]
 8003d08:	6023      	str	r3, [r4, #0]
 8003d0a:	6066      	str	r6, [r4, #4]
 8003d0c:	f7ff ffaa 	bl	8003c64 <_has_ext_stdout_stderr>
 8003d10:	b130      	cbz	r0, 8003d20 <initialise_monitor_handles+0xa4>
 8003d12:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <initialise_monitor_handles+0xb4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003d1a:	682b      	ldr	r3, [r5, #0]
 8003d1c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003d20:	b005      	add	sp, #20
 8003d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d26:	bf00      	nop
 8003d28:	20000270 	.word	0x20000270
 8003d2c:	20000264 	.word	0x20000264
 8003d30:	2000026c 	.word	0x2000026c
 8003d34:	08003df2 	.word	0x08003df2
 8003d38:	20000268 	.word	0x20000268

08003d3c <_isatty>:
 8003d3c:	b570      	push	{r4, r5, r6, lr}
 8003d3e:	f7ff fd77 	bl	8003830 <findslot>
 8003d42:	2509      	movs	r5, #9
 8003d44:	4604      	mov	r4, r0
 8003d46:	b920      	cbnz	r0, 8003d52 <_isatty+0x16>
 8003d48:	f7ff fb0c 	bl	8003364 <__errno>
 8003d4c:	6005      	str	r5, [r0, #0]
 8003d4e:	4620      	mov	r0, r4
 8003d50:	bd70      	pop	{r4, r5, r6, pc}
 8003d52:	4628      	mov	r0, r5
 8003d54:	4621      	mov	r1, r4
 8003d56:	beab      	bkpt	0x00ab
 8003d58:	4604      	mov	r4, r0
 8003d5a:	2c01      	cmp	r4, #1
 8003d5c:	d0f7      	beq.n	8003d4e <_isatty+0x12>
 8003d5e:	f7ff fb01 	bl	8003364 <__errno>
 8003d62:	2400      	movs	r4, #0
 8003d64:	4605      	mov	r5, r0
 8003d66:	2613      	movs	r6, #19
 8003d68:	4630      	mov	r0, r6
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	beab      	bkpt	0x00ab
 8003d6e:	4606      	mov	r6, r0
 8003d70:	602e      	str	r6, [r5, #0]
 8003d72:	e7ec      	b.n	8003d4e <_isatty+0x12>

08003d74 <_init>:
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d76:	bf00      	nop
 8003d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7a:	bc08      	pop	{r3}
 8003d7c:	469e      	mov	lr, r3
 8003d7e:	4770      	bx	lr

08003d80 <_fini>:
 8003d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d82:	bf00      	nop
 8003d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d86:	bc08      	pop	{r3}
 8003d88:	469e      	mov	lr, r3
 8003d8a:	4770      	bx	lr
