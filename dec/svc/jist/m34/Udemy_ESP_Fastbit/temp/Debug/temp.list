
temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000384c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a28  08003a28  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a30  08003a30  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a30  08003a30  00013a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a34  08003a34  00013a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000068  08003aa0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08003aa0  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a952  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a19  00000000  00000000  0002aa2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000990  00000000  00000000  0002c448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000744  00000000  00000000  0002cdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026966  00000000  00000000  0002d51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b7ac  00000000  00000000  00053e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb3b8  00000000  00000000  0005f62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c18  00000000  00000000  0014a9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0014d600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080039bc 	.word	0x080039bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	080039bc 	.word	0x080039bc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
 * ->	1kB stack for scheduler
 * ->	--- rest available for other usage ---
 * ->	RAM START/STACK END ( lowest address somewhere in RAM where heap and stack meet )
 */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fae6 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f80e 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f88e 	bl	80005f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f85c 	bl	8000590 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	init_systick_timer(TICK_HZ);
 80004d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004dc:	f000 f8ee 	bl	80006bc <init_systick_timer>
  while (1)
  {
    /* USER CODE END WHILE */
	printf("test swv\r\n");
 80004e0:	4801      	ldr	r0, [pc, #4]	; (80004e8 <main+0x24>)
 80004e2:	f002 fed7 	bl	8003294 <puts>
  {
 80004e6:	e7fb      	b.n	80004e0 <main+0x1c>
 80004e8:	080039d4 	.word	0x080039d4

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b096      	sub	sp, #88	; 0x58
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	2244      	movs	r2, #68	; 0x44
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 ffaa 	bl	8003454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	463b      	mov	r3, r7
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800050e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000512:	f000 fdf3 	bl	80010fc <HAL_PWREx_ControlVoltageScaling>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800051c:	f000 f904 	bl	8000728 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000520:	2302      	movs	r3, #2
 8000522:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000528:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052a:	2310      	movs	r3, #16
 800052c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052e:	2302      	movs	r3, #2
 8000530:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000532:	2302      	movs	r3, #2
 8000534:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800053a:	230a      	movs	r3, #10
 800053c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800053e:	2307      	movs	r3, #7
 8000540:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000542:	2302      	movs	r3, #2
 8000544:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000546:	2302      	movs	r3, #2
 8000548:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fe2a 	bl	80011a8 <HAL_RCC_OscConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800055a:	f000 f8e5 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	230f      	movs	r3, #15
 8000560:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000562:	2303      	movs	r3, #3
 8000564:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000572:	463b      	mov	r3, r7
 8000574:	2104      	movs	r1, #4
 8000576:	4618      	mov	r0, r3
 8000578:	f001 f9f2 	bl	8001960 <HAL_RCC_ClockConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000582:	f000 f8d1 	bl	8000728 <Error_Handler>
  }
}
 8000586:	bf00      	nop
 8000588:	3758      	adds	r7, #88	; 0x58
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 8000596:	4a15      	ldr	r2, [pc, #84]	; (80005ec <MX_USART2_UART_Init+0x5c>)
 8000598:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 800059c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005b6:	220c      	movs	r2, #12
 80005b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005d4:	f002 f8a4 	bl	8002720 <HAL_UART_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005de:	f000 f8a3 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000084 	.word	0x20000084
 80005ec:	40004400 	.word	0x40004400

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	4b2b      	ldr	r3, [pc, #172]	; (80006b4 <MX_GPIO_Init+0xc4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	4a2a      	ldr	r2, [pc, #168]	; (80006b4 <MX_GPIO_Init+0xc4>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000612:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <MX_GPIO_Init+0xc4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061e:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <MX_GPIO_Init+0xc4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	4a24      	ldr	r2, [pc, #144]	; (80006b4 <MX_GPIO_Init+0xc4>)
 8000624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <MX_GPIO_Init+0xc4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <MX_GPIO_Init+0xc4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	4a1e      	ldr	r2, [pc, #120]	; (80006b4 <MX_GPIO_Init+0xc4>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <MX_GPIO_Init+0xc4>)
 8000654:	f043 0302 	orr.w	r3, r3, #2
 8000658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2120      	movs	r1, #32
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f000 fd1f 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000678:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	480b      	ldr	r0, [pc, #44]	; (80006b8 <MX_GPIO_Init+0xc8>)
 800068a:	f000 fb67 	bl	8000d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800068e:	2320      	movs	r3, #32
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a8:	f000 fb58 	bl	8000d5c <HAL_GPIO_Init>

}
 80006ac:	bf00      	nop
 80006ae:	3728      	adds	r7, #40	; 0x28
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40021000 	.word	0x40021000
 80006b8:	48000800 	.word	0x48000800

080006bc <init_systick_timer>:


}

void init_systick_timer(uint32_t tick_hz)
{
 80006bc:	b480      	push	{r7}
 80006be:	b087      	sub	sp, #28
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <init_systick_timer+0x60>)
 80006c6:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <init_systick_timer+0x64>)
 80006ca:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80006cc:	4a15      	ldr	r2, [pc, #84]	; (8000724 <init_systick_timer+0x68>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d4:	3b01      	subs	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	431a      	orrs	r2, r3
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f043 0202 	orr.w	r2, r3, #2
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f043 0204 	orr.w	r2, r3, #4
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f043 0201 	orr.w	r2, r3, #1
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	601a      	str	r2, [r3, #0]

}
 800070e:	bf00      	nop
 8000710:	371c      	adds	r7, #28
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000e014 	.word	0xe000e014
 8000720:	e000e010 	.word	0xe000e010
 8000724:	04c4b400 	.word	0x04c4b400

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	e7fe      	b.n	8000730 <Error_Handler+0x8>
	...

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_MspInit+0x44>)
 800073c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073e:	4a0e      	ldr	r2, [pc, #56]	; (8000778 <HAL_MspInit+0x44>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6613      	str	r3, [r2, #96]	; 0x60
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <HAL_MspInit+0x44>)
 8000748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <HAL_MspInit+0x44>)
 8000754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000756:	4a08      	ldr	r2, [pc, #32]	; (8000778 <HAL_MspInit+0x44>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	6593      	str	r3, [r2, #88]	; 0x58
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_MspInit+0x44>)
 8000760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000

0800077c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b0ac      	sub	sp, #176	; 0xb0
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2288      	movs	r2, #136	; 0x88
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f002 fe59 	bl	8003454 <memset>
  if(huart->Instance==USART2)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a21      	ldr	r2, [pc, #132]	; (800082c <HAL_UART_MspInit+0xb0>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d13b      	bne.n	8000824 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 faf5 	bl	8001da8 <HAL_RCCEx_PeriphCLKConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007c4:	f7ff ffb0 	bl	8000728 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <HAL_UART_MspInit+0xb4>)
 80007ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007cc:	4a18      	ldr	r2, [pc, #96]	; (8000830 <HAL_UART_MspInit+0xb4>)
 80007ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d2:	6593      	str	r3, [r2, #88]	; 0x58
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <HAL_UART_MspInit+0xb4>)
 80007d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <HAL_UART_MspInit+0xb4>)
 80007e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e4:	4a12      	ldr	r2, [pc, #72]	; (8000830 <HAL_UART_MspInit+0xb4>)
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <HAL_UART_MspInit+0xb4>)
 80007ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007f8:	230c      	movs	r3, #12
 80007fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000810:	2307      	movs	r3, #7
 8000812:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800081a:	4619      	mov	r1, r3
 800081c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000820:	f000 fa9c 	bl	8000d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000824:	bf00      	nop
 8000826:	37b0      	adds	r7, #176	; 0xb0
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40004400 	.word	0x40004400
 8000830:	40021000 	.word	0x40021000

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <NMI_Handler+0x4>

0800083a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <HardFault_Handler+0x4>

08000840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <MemManage_Handler+0x4>

08000846 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <BusFault_Handler+0x4>

0800084c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <UsageFault_Handler+0x4>

08000852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000880:	f000 f966 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <ITM_SendChar+0x48>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <ITM_SendChar+0x48>)
 8000898:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800089c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <ITM_SendChar+0x4c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <ITM_SendChar+0x4c>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80008aa:	bf00      	nop
 80008ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d0f8      	beq.n	80008ac <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80008ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	6013      	str	r3, [r2, #0]
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000edfc 	.word	0xe000edfc
 80008d4:	e0000e00 	.word	0xe0000e00

080008d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	e00a      	b.n	8000900 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ea:	f3af 8000 	nop.w
 80008ee:	4601      	mov	r1, r0
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	60ba      	str	r2, [r7, #8]
 80008f6:	b2ca      	uxtb	r2, r1
 80008f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	3301      	adds	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697a      	ldr	r2, [r7, #20]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	429a      	cmp	r2, r3
 8000906:	dbf0      	blt.n	80008ea <_read+0x12>
  }

  return len;
 8000908:	687b      	ldr	r3, [r7, #4]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	e009      	b.n	8000938 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	60ba      	str	r2, [r7, #8]
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ffab 	bl	8000888 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	3301      	adds	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	dbf1      	blt.n	8000924 <_write+0x12>
	  //__io_putchar(*ptr++);
  }
  return len;
 8000940:	687b      	ldr	r3, [r7, #4]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <_close>:

int _close(int file)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000972:	605a      	str	r2, [r3, #4]
  return 0;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <_isatty>:

int _isatty(int file)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009bc:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <_sbrk+0x5c>)
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <_sbrk+0x60>)
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d102      	bne.n	80009d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <_sbrk+0x64>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <_sbrk+0x68>)
 80009d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <_sbrk+0x64>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d207      	bcs.n	80009f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e4:	f002 fd84 	bl	80034f0 <__errno>
 80009e8:	4603      	mov	r3, r0
 80009ea:	220c      	movs	r2, #12
 80009ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	e009      	b.n	8000a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <_sbrk+0x64>)
 8000a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a06:	68fb      	ldr	r3, [r7, #12]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20018000 	.word	0x20018000
 8000a14:	00000400 	.word	0x00000400
 8000a18:	20000108 	.word	0x20000108
 8000a1c:	20000260 	.word	0x20000260

08000a20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <SystemInit+0x20>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <SystemInit+0x20>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a48:	f7ff ffea 	bl	8000a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4e:	490d      	ldr	r1, [pc, #52]	; (8000a84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a50:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <LoopForever+0xe>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a64:	4c0a      	ldr	r4, [pc, #40]	; (8000a90 <LoopForever+0x16>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a72:	f002 fd43 	bl	80034fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a76:	f7ff fd25 	bl	80004c4 <main>

08000a7a <LoopForever>:

LoopForever:
    b LoopForever
 8000a7a:	e7fe      	b.n	8000a7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a88:	08003a38 	.word	0x08003a38
  ldr r2, =_sbss
 8000a8c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a90:	2000025c 	.word	0x2000025c

08000a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_2_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <HAL_Init+0x3c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <HAL_Init+0x3c>)
 8000aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aae:	2003      	movs	r0, #3
 8000ab0:	f000 f920 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 f80f 	bl	8000ad8 <HAL_InitTick>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	71fb      	strb	r3, [r7, #7]
 8000ac4:	e001      	b.n	8000aca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac6:	f7ff fe35 	bl	8000734 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aca:	79fb      	ldrb	r3, [r7, #7]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40022000 	.word	0x40022000

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_InitTick+0x6c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d023      	beq.n	8000b34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_InitTick+0x70>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <HAL_InitTick+0x6c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f91d 	bl	8000d42 <HAL_SYSTICK_Config>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d10f      	bne.n	8000b2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d809      	bhi.n	8000b28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f000 f8f5 	bl	8000d0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <HAL_InitTick+0x74>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	e007      	b.n	8000b38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e004      	b.n	8000b38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	e001      	b.n	8000b38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	20000004 	.word	0x20000004

08000b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x20>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x24>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_IncTick+0x24>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000008 	.word	0x20000008
 8000b74:	2000010c 	.word	0x2000010c

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	2000010c 	.word	0x2000010c

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	; (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	; (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	; 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc0:	d301      	bcc.n	8000cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00f      	b.n	8000ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <SysTick_Config+0x40>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cce:	210f      	movs	r1, #15
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f7ff ff8e 	bl	8000bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SysTick_Config+0x40>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <SysTick_Config+0x40>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff47 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1c:	f7ff ff5c 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f7ff ff8e 	bl	8000c48 <NVIC_EncodePriority>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff5d 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ffb0 	bl	8000cb0 <SysTick_Config>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6a:	e17f      	b.n	800106c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	2101      	movs	r1, #1
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	fa01 f303 	lsl.w	r3, r1, r3
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 8171 	beq.w	8001066 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d005      	beq.n	8000d9c <HAL_GPIO_Init+0x40>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d130      	bne.n	8000dfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	091b      	lsrs	r3, r3, #4
 8000de8:	f003 0201 	and.w	r2, r3, #1
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d118      	bne.n	8000e3c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e10:	2201      	movs	r2, #1
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	08db      	lsrs	r3, r3, #3
 8000e26:	f003 0201 	and.w	r2, r3, #1
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d017      	beq.n	8000e78 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d123      	bne.n	8000ecc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	08da      	lsrs	r2, r3, #3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3208      	adds	r2, #8
 8000e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	6939      	ldr	r1, [r7, #16]
 8000ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0203 	and.w	r2, r3, #3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80ac 	beq.w	8001066 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	4b5f      	ldr	r3, [pc, #380]	; (800108c <HAL_GPIO_Init+0x330>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f12:	4a5e      	ldr	r2, [pc, #376]	; (800108c <HAL_GPIO_Init+0x330>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6613      	str	r3, [r2, #96]	; 0x60
 8000f1a:	4b5c      	ldr	r3, [pc, #368]	; (800108c <HAL_GPIO_Init+0x330>)
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f26:	4a5a      	ldr	r2, [pc, #360]	; (8001090 <HAL_GPIO_Init+0x334>)
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f32:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f50:	d025      	beq.n	8000f9e <HAL_GPIO_Init+0x242>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4f      	ldr	r2, [pc, #316]	; (8001094 <HAL_GPIO_Init+0x338>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d01f      	beq.n	8000f9a <HAL_GPIO_Init+0x23e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4e      	ldr	r2, [pc, #312]	; (8001098 <HAL_GPIO_Init+0x33c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d019      	beq.n	8000f96 <HAL_GPIO_Init+0x23a>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4d      	ldr	r2, [pc, #308]	; (800109c <HAL_GPIO_Init+0x340>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d013      	beq.n	8000f92 <HAL_GPIO_Init+0x236>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4c      	ldr	r2, [pc, #304]	; (80010a0 <HAL_GPIO_Init+0x344>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d00d      	beq.n	8000f8e <HAL_GPIO_Init+0x232>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4b      	ldr	r2, [pc, #300]	; (80010a4 <HAL_GPIO_Init+0x348>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d007      	beq.n	8000f8a <HAL_GPIO_Init+0x22e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4a      	ldr	r2, [pc, #296]	; (80010a8 <HAL_GPIO_Init+0x34c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d101      	bne.n	8000f86 <HAL_GPIO_Init+0x22a>
 8000f82:	2306      	movs	r3, #6
 8000f84:	e00c      	b.n	8000fa0 <HAL_GPIO_Init+0x244>
 8000f86:	2307      	movs	r3, #7
 8000f88:	e00a      	b.n	8000fa0 <HAL_GPIO_Init+0x244>
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	e008      	b.n	8000fa0 <HAL_GPIO_Init+0x244>
 8000f8e:	2304      	movs	r3, #4
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_Init+0x244>
 8000f92:	2303      	movs	r3, #3
 8000f94:	e004      	b.n	8000fa0 <HAL_GPIO_Init+0x244>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_Init+0x244>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_Init+0x244>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	f002 0203 	and.w	r2, r2, #3
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	4093      	lsls	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fb0:	4937      	ldr	r1, [pc, #220]	; (8001090 <HAL_GPIO_Init+0x334>)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fbe:	4b3b      	ldr	r3, [pc, #236]	; (80010ac <HAL_GPIO_Init+0x350>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fe2:	4a32      	ldr	r2, [pc, #200]	; (80010ac <HAL_GPIO_Init+0x350>)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <HAL_GPIO_Init+0x350>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800100c:	4a27      	ldr	r2, [pc, #156]	; (80010ac <HAL_GPIO_Init+0x350>)
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <HAL_GPIO_Init+0x350>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	43db      	mvns	r3, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001036:	4a1d      	ldr	r2, [pc, #116]	; (80010ac <HAL_GPIO_Init+0x350>)
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <HAL_GPIO_Init+0x350>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001060:	4a12      	ldr	r2, [pc, #72]	; (80010ac <HAL_GPIO_Init+0x350>)
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa22 f303 	lsr.w	r3, r2, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	f47f ae78 	bne.w	8000d6c <HAL_GPIO_Init+0x10>
  }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	371c      	adds	r7, #28
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000
 8001090:	40010000 	.word	0x40010000
 8001094:	48000400 	.word	0x48000400
 8001098:	48000800 	.word	0x48000800
 800109c:	48000c00 	.word	0x48000c00
 80010a0:	48001000 	.word	0x48001000
 80010a4:	48001400 	.word	0x48001400
 80010a8:	48001800 	.word	0x48001800
 80010ac:	40010400 	.word	0x40010400

080010b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
 80010bc:	4613      	mov	r3, r2
 80010be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c0:	787b      	ldrb	r3, [r7, #1]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010c6:	887a      	ldrh	r2, [r7, #2]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010cc:	e002      	b.n	80010d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40007000 	.word	0x40007000

080010fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800110a:	d130      	bne.n	800116e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800110c:	4b23      	ldr	r3, [pc, #140]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001118:	d038      	beq.n	800118c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800111a:	4b20      	ldr	r3, [pc, #128]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001122:	4a1e      	ldr	r2, [pc, #120]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001124:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001128:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2232      	movs	r2, #50	; 0x32
 8001130:	fb02 f303 	mul.w	r3, r2, r3
 8001134:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	0c9b      	lsrs	r3, r3, #18
 800113c:	3301      	adds	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001140:	e002      	b.n	8001148 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3b01      	subs	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001154:	d102      	bne.n	800115c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f2      	bne.n	8001142 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001168:	d110      	bne.n	800118c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e00f      	b.n	800118e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800117a:	d007      	beq.n	800118c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001184:	4a05      	ldr	r2, [pc, #20]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40007000 	.word	0x40007000
 80011a0:	20000000 	.word	0x20000000
 80011a4:	431bde83 	.word	0x431bde83

080011a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e3ca      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ba:	4b97      	ldr	r3, [pc, #604]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011c4:	4b94      	ldr	r3, [pc, #592]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 80e4 	beq.w	80013a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d007      	beq.n	80011f2 <HAL_RCC_OscConfig+0x4a>
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	2b0c      	cmp	r3, #12
 80011e6:	f040 808b 	bne.w	8001300 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	f040 8087 	bne.w	8001300 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011f2:	4b89      	ldr	r3, [pc, #548]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d005      	beq.n	800120a <HAL_RCC_OscConfig+0x62>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e3a2      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a1a      	ldr	r2, [r3, #32]
 800120e:	4b82      	ldr	r3, [pc, #520]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <HAL_RCC_OscConfig+0x7c>
 800121a:	4b7f      	ldr	r3, [pc, #508]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001222:	e005      	b.n	8001230 <HAL_RCC_OscConfig+0x88>
 8001224:	4b7c      	ldr	r3, [pc, #496]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001230:	4293      	cmp	r3, r2
 8001232:	d223      	bcs.n	800127c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fd55 	bl	8001ce8 <RCC_SetFlashLatencyFromMSIRange>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e383      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001248:	4b73      	ldr	r3, [pc, #460]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a72      	ldr	r2, [pc, #456]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 800124e:	f043 0308 	orr.w	r3, r3, #8
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b70      	ldr	r3, [pc, #448]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	496d      	ldr	r1, [pc, #436]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001266:	4b6c      	ldr	r3, [pc, #432]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	4968      	ldr	r1, [pc, #416]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001276:	4313      	orrs	r3, r2
 8001278:	604b      	str	r3, [r1, #4]
 800127a:	e025      	b.n	80012c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800127c:	4b66      	ldr	r3, [pc, #408]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a65      	ldr	r2, [pc, #404]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b63      	ldr	r3, [pc, #396]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	4960      	ldr	r1, [pc, #384]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001296:	4313      	orrs	r3, r2
 8001298:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800129a:	4b5f      	ldr	r3, [pc, #380]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	495b      	ldr	r1, [pc, #364]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fd15 	bl	8001ce8 <RCC_SetFlashLatencyFromMSIRange>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e343      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012c8:	f000 fc4a 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 80012cc:	4602      	mov	r2, r0
 80012ce:	4b52      	ldr	r3, [pc, #328]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	f003 030f 	and.w	r3, r3, #15
 80012d8:	4950      	ldr	r1, [pc, #320]	; (800141c <HAL_RCC_OscConfig+0x274>)
 80012da:	5ccb      	ldrb	r3, [r1, r3]
 80012dc:	f003 031f 	and.w	r3, r3, #31
 80012e0:	fa22 f303 	lsr.w	r3, r2, r3
 80012e4:	4a4e      	ldr	r2, [pc, #312]	; (8001420 <HAL_RCC_OscConfig+0x278>)
 80012e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012e8:	4b4e      	ldr	r3, [pc, #312]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fbf3 	bl	8000ad8 <HAL_InitTick>
 80012f2:	4603      	mov	r3, r0
 80012f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d052      	beq.n	80013a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	e327      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d032      	beq.n	800136e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001308:	4b43      	ldr	r3, [pc, #268]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a42      	ldr	r2, [pc, #264]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001314:	f7ff fc30 	bl	8000b78 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800131c:	f7ff fc2c 	bl	8000b78 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e310      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800132e:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f0      	beq.n	800131c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800133a:	4b37      	ldr	r3, [pc, #220]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a36      	ldr	r2, [pc, #216]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b34      	ldr	r3, [pc, #208]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	4931      	ldr	r1, [pc, #196]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001354:	4313      	orrs	r3, r2
 8001356:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001358:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	492c      	ldr	r1, [pc, #176]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
 800136c:	e01a      	b.n	80013a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800136e:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a29      	ldr	r2, [pc, #164]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001374:	f023 0301 	bic.w	r3, r3, #1
 8001378:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800137a:	f7ff fbfd 	bl	8000b78 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001382:	f7ff fbf9 	bl	8000b78 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e2dd      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f0      	bne.n	8001382 <HAL_RCC_OscConfig+0x1da>
 80013a0:	e000      	b.n	80013a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d074      	beq.n	800149a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d005      	beq.n	80013c2 <HAL_RCC_OscConfig+0x21a>
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	2b0c      	cmp	r3, #12
 80013ba:	d10e      	bne.n	80013da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d10b      	bne.n	80013da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d064      	beq.n	8001498 <HAL_RCC_OscConfig+0x2f0>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d160      	bne.n	8001498 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e2ba      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e2:	d106      	bne.n	80013f2 <HAL_RCC_OscConfig+0x24a>
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 80013ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	e026      	b.n	8001440 <HAL_RCC_OscConfig+0x298>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013fa:	d115      	bne.n	8001428 <HAL_RCC_OscConfig+0x280>
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a05      	ldr	r2, [pc, #20]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001402:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a02      	ldr	r2, [pc, #8]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 800140e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	e014      	b.n	8001440 <HAL_RCC_OscConfig+0x298>
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000
 800141c:	080039e0 	.word	0x080039e0
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004
 8001428:	4ba0      	ldr	r3, [pc, #640]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a9f      	ldr	r2, [pc, #636]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 800142e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	4b9d      	ldr	r3, [pc, #628]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a9c      	ldr	r2, [pc, #624]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 800143a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d013      	beq.n	8001470 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff fb96 	bl	8000b78 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff fb92 	bl	8000b78 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e276      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001462:	4b92      	ldr	r3, [pc, #584]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x2a8>
 800146e:	e014      	b.n	800149a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fb82 	bl	8000b78 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001478:	f7ff fb7e 	bl	8000b78 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	; 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e262      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800148a:	4b88      	ldr	r3, [pc, #544]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x2d0>
 8001496:	e000      	b.n	800149a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d060      	beq.n	8001568 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_OscConfig+0x310>
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2b0c      	cmp	r3, #12
 80014b0:	d119      	bne.n	80014e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d116      	bne.n	80014e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b8:	4b7c      	ldr	r3, [pc, #496]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_RCC_OscConfig+0x328>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e23f      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d0:	4b76      	ldr	r3, [pc, #472]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	061b      	lsls	r3, r3, #24
 80014de:	4973      	ldr	r1, [pc, #460]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e4:	e040      	b.n	8001568 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d023      	beq.n	8001536 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ee:	4b6f      	ldr	r3, [pc, #444]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fa:	f7ff fb3d 	bl	8000b78 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001502:	f7ff fb39 	bl	8000b78 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e21d      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001514:	4b65      	ldr	r3, [pc, #404]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	4b62      	ldr	r3, [pc, #392]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	061b      	lsls	r3, r3, #24
 800152e:	495f      	ldr	r1, [pc, #380]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]
 8001534:	e018      	b.n	8001568 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001536:	4b5d      	ldr	r3, [pc, #372]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a5c      	ldr	r2, [pc, #368]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 800153c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff fb19 	bl	8000b78 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800154a:	f7ff fb15 	bl	8000b78 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e1f9      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800155c:	4b53      	ldr	r3, [pc, #332]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f0      	bne.n	800154a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b00      	cmp	r3, #0
 8001572:	d03c      	beq.n	80015ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d01c      	beq.n	80015b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157c:	4b4b      	ldr	r3, [pc, #300]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 800157e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001582:	4a4a      	ldr	r2, [pc, #296]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158c:	f7ff faf4 	bl	8000b78 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001594:	f7ff faf0 	bl	8000b78 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e1d4      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 80015a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0ef      	beq.n	8001594 <HAL_RCC_OscConfig+0x3ec>
 80015b4:	e01b      	b.n	80015ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b6:	4b3d      	ldr	r3, [pc, #244]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 80015b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015bc:	4a3b      	ldr	r2, [pc, #236]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c6:	f7ff fad7 	bl	8000b78 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ce:	f7ff fad3 	bl	8000b78 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e1b7      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e0:	4b32      	ldr	r3, [pc, #200]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 80015e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1ef      	bne.n	80015ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80a6 	beq.w	8001748 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001600:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 8001602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d10d      	bne.n	8001628 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 800160e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001610:	4a26      	ldr	r2, [pc, #152]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 8001612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001616:	6593      	str	r3, [r2, #88]	; 0x58
 8001618:	4b24      	ldr	r3, [pc, #144]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001624:	2301      	movs	r3, #1
 8001626:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <HAL_RCC_OscConfig+0x508>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d118      	bne.n	8001666 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001634:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <HAL_RCC_OscConfig+0x508>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a1d      	ldr	r2, [pc, #116]	; (80016b0 <HAL_RCC_OscConfig+0x508>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001640:	f7ff fa9a 	bl	8000b78 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001648:	f7ff fa96 	bl	8000b78 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e17a      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_RCC_OscConfig+0x508>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d108      	bne.n	8001680 <HAL_RCC_OscConfig+0x4d8>
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 8001670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001674:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800167e:	e029      	b.n	80016d4 <HAL_RCC_OscConfig+0x52c>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b05      	cmp	r3, #5
 8001686:	d115      	bne.n	80016b4 <HAL_RCC_OscConfig+0x50c>
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 800168a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 800169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169e:	4a03      	ldr	r2, [pc, #12]	; (80016ac <HAL_RCC_OscConfig+0x504>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a8:	e014      	b.n	80016d4 <HAL_RCC_OscConfig+0x52c>
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40007000 	.word	0x40007000
 80016b4:	4b9c      	ldr	r3, [pc, #624]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 80016b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ba:	4a9b      	ldr	r2, [pc, #620]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c4:	4b98      	ldr	r3, [pc, #608]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 80016c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ca:	4a97      	ldr	r2, [pc, #604]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 80016cc:	f023 0304 	bic.w	r3, r3, #4
 80016d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d016      	beq.n	800170a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016dc:	f7ff fa4c 	bl	8000b78 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e4:	f7ff fa48 	bl	8000b78 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e12a      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016fa:	4b8b      	ldr	r3, [pc, #556]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 80016fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0ed      	beq.n	80016e4 <HAL_RCC_OscConfig+0x53c>
 8001708:	e015      	b.n	8001736 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7ff fa35 	bl	8000b78 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001710:	e00a      	b.n	8001728 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001712:	f7ff fa31 	bl	8000b78 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001720:	4293      	cmp	r3, r2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e113      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001728:	4b7f      	ldr	r3, [pc, #508]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 800172a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ed      	bne.n	8001712 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001736:	7ffb      	ldrb	r3, [r7, #31]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800173c:	4b7a      	ldr	r3, [pc, #488]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	4a79      	ldr	r2, [pc, #484]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 8001742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001746:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80fe 	beq.w	800194e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	2b02      	cmp	r3, #2
 8001758:	f040 80d0 	bne.w	80018fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800175c:	4b72      	ldr	r3, [pc, #456]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f003 0203 	and.w	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	429a      	cmp	r2, r3
 800176e:	d130      	bne.n	80017d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	3b01      	subs	r3, #1
 800177c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d127      	bne.n	80017d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d11f      	bne.n	80017d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800179c:	2a07      	cmp	r2, #7
 800179e:	bf14      	ite	ne
 80017a0:	2201      	movne	r2, #1
 80017a2:	2200      	moveq	r2, #0
 80017a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d113      	bne.n	80017d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b4:	085b      	lsrs	r3, r3, #1
 80017b6:	3b01      	subs	r3, #1
 80017b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d109      	bne.n	80017d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	085b      	lsrs	r3, r3, #1
 80017ca:	3b01      	subs	r3, #1
 80017cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d06e      	beq.n	80018b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2b0c      	cmp	r3, #12
 80017d6:	d069      	beq.n	80018ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017d8:	4b53      	ldr	r3, [pc, #332]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d105      	bne.n	80017f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017e4:	4b50      	ldr	r3, [pc, #320]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0ad      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017f4:	4b4c      	ldr	r3, [pc, #304]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a4b      	ldr	r2, [pc, #300]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 80017fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001800:	f7ff f9ba 	bl	8000b78 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff f9b6 	bl	8000b78 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e09a      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181a:	4b43      	ldr	r3, [pc, #268]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001826:	4b40      	ldr	r3, [pc, #256]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	4b40      	ldr	r3, [pc, #256]	; (800192c <HAL_RCC_OscConfig+0x784>)
 800182c:	4013      	ands	r3, r2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001836:	3a01      	subs	r2, #1
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	4311      	orrs	r1, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001840:	0212      	lsls	r2, r2, #8
 8001842:	4311      	orrs	r1, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001848:	0852      	lsrs	r2, r2, #1
 800184a:	3a01      	subs	r2, #1
 800184c:	0552      	lsls	r2, r2, #21
 800184e:	4311      	orrs	r1, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001854:	0852      	lsrs	r2, r2, #1
 8001856:	3a01      	subs	r2, #1
 8001858:	0652      	lsls	r2, r2, #25
 800185a:	4311      	orrs	r1, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001860:	0912      	lsrs	r2, r2, #4
 8001862:	0452      	lsls	r2, r2, #17
 8001864:	430a      	orrs	r2, r1
 8001866:	4930      	ldr	r1, [pc, #192]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 8001868:	4313      	orrs	r3, r2
 800186a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800186c:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a2d      	ldr	r2, [pc, #180]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 8001872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001876:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	4a2a      	ldr	r2, [pc, #168]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 800187e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001882:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001884:	f7ff f978 	bl	8000b78 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff f974 	bl	8000b78 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e058      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189e:	4b22      	ldr	r3, [pc, #136]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018aa:	e050      	b.n	800194e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e04f      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d148      	bne.n	800194e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018bc:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a19      	ldr	r2, [pc, #100]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 80018c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	4a16      	ldr	r2, [pc, #88]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 80018ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018d4:	f7ff f950 	bl	8000b78 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff f94c 	bl	8000b78 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e030      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x734>
 80018fa:	e028      	b.n	800194e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	d023      	beq.n	800194a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a08      	ldr	r2, [pc, #32]	; (8001928 <HAL_RCC_OscConfig+0x780>)
 8001908:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800190c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7ff f933 	bl	8000b78 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001914:	e00c      	b.n	8001930 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff f92f 	bl	8000b78 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d905      	bls.n	8001930 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e013      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
 8001928:	40021000 	.word	0x40021000
 800192c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_RCC_OscConfig+0x7b0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1ec      	bne.n	8001916 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_RCC_OscConfig+0x7b0>)
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	4905      	ldr	r1, [pc, #20]	; (8001958 <HAL_RCC_OscConfig+0x7b0>)
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_RCC_OscConfig+0x7b4>)
 8001944:	4013      	ands	r3, r2
 8001946:	60cb      	str	r3, [r1, #12]
 8001948:	e001      	b.n	800194e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3720      	adds	r7, #32
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000
 800195c:	feeefffc 	.word	0xfeeefffc

08001960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0e7      	b.n	8001b44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001974:	4b75      	ldr	r3, [pc, #468]	; (8001b4c <HAL_RCC_ClockConfig+0x1ec>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d910      	bls.n	80019a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b72      	ldr	r3, [pc, #456]	; (8001b4c <HAL_RCC_ClockConfig+0x1ec>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 0207 	bic.w	r2, r3, #7
 800198a:	4970      	ldr	r1, [pc, #448]	; (8001b4c <HAL_RCC_ClockConfig+0x1ec>)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b6e      	ldr	r3, [pc, #440]	; (8001b4c <HAL_RCC_ClockConfig+0x1ec>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0cf      	b.n	8001b44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d010      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	4b66      	ldr	r3, [pc, #408]	; (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019bc:	429a      	cmp	r2, r3
 80019be:	d908      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c0:	4b63      	ldr	r3, [pc, #396]	; (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	4960      	ldr	r1, [pc, #384]	; (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d04c      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e6:	4b5a      	ldr	r3, [pc, #360]	; (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d121      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0a6      	b.n	8001b44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019fe:	4b54      	ldr	r3, [pc, #336]	; (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d115      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e09a      	b.n	8001b44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d107      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a16:	4b4e      	ldr	r3, [pc, #312]	; (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d109      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e08e      	b.n	8001b44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a26:	4b4a      	ldr	r3, [pc, #296]	; (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e086      	b.n	8001b44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a36:	4b46      	ldr	r3, [pc, #280]	; (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f023 0203 	bic.w	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	4943      	ldr	r1, [pc, #268]	; (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a48:	f7ff f896 	bl	8000b78 <HAL_GetTick>
 8001a4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	e00a      	b.n	8001a66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a50:	f7ff f892 	bl	8000b78 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e06e      	b.n	8001b44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 020c 	and.w	r2, r3, #12
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d1eb      	bne.n	8001a50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d010      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d208      	bcs.n	8001aa6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a94:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	492b      	ldr	r1, [pc, #172]	; (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa6:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <HAL_RCC_ClockConfig+0x1ec>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d210      	bcs.n	8001ad6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab4:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <HAL_RCC_ClockConfig+0x1ec>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f023 0207 	bic.w	r2, r3, #7
 8001abc:	4923      	ldr	r1, [pc, #140]	; (8001b4c <HAL_RCC_ClockConfig+0x1ec>)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac4:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <HAL_RCC_ClockConfig+0x1ec>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d001      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e036      	b.n	8001b44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d008      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	4918      	ldr	r1, [pc, #96]	; (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d009      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4910      	ldr	r1, [pc, #64]	; (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b14:	f000 f824 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	490b      	ldr	r1, [pc, #44]	; (8001b54 <HAL_RCC_ClockConfig+0x1f4>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b30:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <HAL_RCC_ClockConfig+0x1f8>)
 8001b32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_RCC_ClockConfig+0x1fc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe ffcd 	bl	8000ad8 <HAL_InitTick>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b42:	7afb      	ldrb	r3, [r7, #11]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40022000 	.word	0x40022000
 8001b50:	40021000 	.word	0x40021000
 8001b54:	080039e0 	.word	0x080039e0
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	20000004 	.word	0x20000004

08001b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b6e:	4b3e      	ldr	r3, [pc, #248]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b78:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x34>
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d121      	bne.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d11e      	bne.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b94:	4b34      	ldr	r3, [pc, #208]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d107      	bne.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ba0:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	f003 030f 	and.w	r3, r3, #15
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	e005      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bb0:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bbc:	4a2b      	ldr	r2, [pc, #172]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10d      	bne.n	8001be8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bd0:	e00a      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d102      	bne.n	8001bde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bd8:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	e004      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001be4:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001be6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d134      	bne.n	8001c58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bee:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d003      	beq.n	8001c06 <HAL_RCC_GetSysClockFreq+0xa6>
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d003      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0xac>
 8001c04:	e005      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c06:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c08:	617b      	str	r3, [r7, #20]
      break;
 8001c0a:	e005      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c0e:	617b      	str	r3, [r7, #20]
      break;
 8001c10:	e002      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	617b      	str	r3, [r7, #20]
      break;
 8001c16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	3301      	adds	r3, #1
 8001c24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	fb03 f202 	mul.w	r2, r3, r2
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	0e5b      	lsrs	r3, r3, #25
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	3301      	adds	r3, #1
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c58:	69bb      	ldr	r3, [r7, #24]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3724      	adds	r7, #36	; 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	080039f8 	.word	0x080039f8
 8001c70:	00f42400 	.word	0x00f42400
 8001c74:	007a1200 	.word	0x007a1200

08001c78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000000 	.word	0x20000000

08001c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c94:	f7ff fff0 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	0a1b      	lsrs	r3, r3, #8
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	4904      	ldr	r1, [pc, #16]	; (8001cb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ca6:	5ccb      	ldrb	r3, [r1, r3]
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	080039f0 	.word	0x080039f0

08001cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cc0:	f7ff ffda 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	0adb      	lsrs	r3, r3, #11
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	4904      	ldr	r1, [pc, #16]	; (8001ce4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	080039f0 	.word	0x080039f0

08001ce8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cf4:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d00:	f7ff f9ee 	bl	80010e0 <HAL_PWREx_GetVoltageRange>
 8001d04:	6178      	str	r0, [r7, #20]
 8001d06:	e014      	b.n	8001d32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d08:	4b25      	ldr	r3, [pc, #148]	; (8001da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0c:	4a24      	ldr	r2, [pc, #144]	; (8001da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d12:	6593      	str	r3, [r2, #88]	; 0x58
 8001d14:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d20:	f7ff f9de 	bl	80010e0 <HAL_PWREx_GetVoltageRange>
 8001d24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d26:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2a:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d38:	d10b      	bne.n	8001d52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b80      	cmp	r3, #128	; 0x80
 8001d3e:	d919      	bls.n	8001d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2ba0      	cmp	r3, #160	; 0xa0
 8001d44:	d902      	bls.n	8001d4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d46:	2302      	movs	r3, #2
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	e013      	b.n	8001d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	e010      	b.n	8001d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b80      	cmp	r3, #128	; 0x80
 8001d56:	d902      	bls.n	8001d5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d58:	2303      	movs	r3, #3
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	e00a      	b.n	8001d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b80      	cmp	r3, #128	; 0x80
 8001d62:	d102      	bne.n	8001d6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d64:	2302      	movs	r3, #2
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	e004      	b.n	8001d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b70      	cmp	r3, #112	; 0x70
 8001d6e:	d101      	bne.n	8001d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d70:	2301      	movs	r3, #1
 8001d72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 0207 	bic.w	r2, r3, #7
 8001d7c:	4909      	ldr	r1, [pc, #36]	; (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d001      	beq.n	8001d96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40022000 	.word	0x40022000

08001da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001db0:	2300      	movs	r3, #0
 8001db2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001db4:	2300      	movs	r3, #0
 8001db6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d041      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dcc:	d02a      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001dce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dd2:	d824      	bhi.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dd8:	d008      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dde:	d81e      	bhi.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00a      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001de4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de8:	d010      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001dea:	e018      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001dec:	4b86      	ldr	r3, [pc, #536]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4a85      	ldr	r2, [pc, #532]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001df8:	e015      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 fabb 	bl	800237c <RCCEx_PLLSAI1_Config>
 8001e06:	4603      	mov	r3, r0
 8001e08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e0a:	e00c      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3320      	adds	r3, #32
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 fba6 	bl	8002564 <RCCEx_PLLSAI2_Config>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e1c:	e003      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	74fb      	strb	r3, [r7, #19]
      break;
 8001e22:	e000      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e26:	7cfb      	ldrb	r3, [r7, #19]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10b      	bne.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e2c:	4b76      	ldr	r3, [pc, #472]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e3a:	4973      	ldr	r1, [pc, #460]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e42:	e001      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e44:	7cfb      	ldrb	r3, [r7, #19]
 8001e46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d041      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e5c:	d02a      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e62:	d824      	bhi.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e68:	d008      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e6e:	d81e      	bhi.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00a      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e78:	d010      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e7a:	e018      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e7c:	4b62      	ldr	r3, [pc, #392]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4a61      	ldr	r2, [pc, #388]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e86:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e88:	e015      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 fa73 	bl	800237c <RCCEx_PLLSAI1_Config>
 8001e96:	4603      	mov	r3, r0
 8001e98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e9a:	e00c      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3320      	adds	r3, #32
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 fb5e 	bl	8002564 <RCCEx_PLLSAI2_Config>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001eac:	e003      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	74fb      	strb	r3, [r7, #19]
      break;
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eb6:	7cfb      	ldrb	r3, [r7, #19]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10b      	bne.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ebc:	4b52      	ldr	r3, [pc, #328]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001eca:	494f      	ldr	r1, [pc, #316]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ed2:	e001      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ed4:	7cfb      	ldrb	r3, [r7, #19]
 8001ed6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80a0 	beq.w	8002026 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001eea:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001efa:	2300      	movs	r3, #0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00d      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f00:	4b41      	ldr	r3, [pc, #260]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f04:	4a40      	ldr	r2, [pc, #256]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f0c:	4b3e      	ldr	r3, [pc, #248]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a3a      	ldr	r2, [pc, #232]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f28:	f7fe fe26 	bl	8000b78 <HAL_GetTick>
 8001f2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f2e:	e009      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f30:	f7fe fe22 	bl	8000b78 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d902      	bls.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	74fb      	strb	r3, [r7, #19]
        break;
 8001f42:	e005      	b.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f44:	4b31      	ldr	r3, [pc, #196]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0ef      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f50:	7cfb      	ldrb	r3, [r7, #19]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d15c      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f56:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d01f      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d019      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f74:	4b24      	ldr	r3, [pc, #144]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f80:	4b21      	ldr	r3, [pc, #132]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	4a20      	ldr	r2, [pc, #128]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f96:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fa0:	4a19      	ldr	r2, [pc, #100]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d016      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb2:	f7fe fde1 	bl	8000b78 <HAL_GetTick>
 8001fb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb8:	e00b      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7fe fddd 	bl	8000b78 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d902      	bls.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	74fb      	strb	r3, [r7, #19]
            break;
 8001fd0:	e006      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0ec      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ff6:	4904      	ldr	r1, [pc, #16]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ffe:	e009      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002000:	7cfb      	ldrb	r3, [r7, #19]
 8002002:	74bb      	strb	r3, [r7, #18]
 8002004:	e006      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002010:	7cfb      	ldrb	r3, [r7, #19]
 8002012:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002014:	7c7b      	ldrb	r3, [r7, #17]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d105      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201a:	4b9e      	ldr	r3, [pc, #632]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	4a9d      	ldr	r2, [pc, #628]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002024:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002032:	4b98      	ldr	r3, [pc, #608]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002038:	f023 0203 	bic.w	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002040:	4994      	ldr	r1, [pc, #592]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002054:	4b8f      	ldr	r3, [pc, #572]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205a:	f023 020c 	bic.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002062:	498c      	ldr	r1, [pc, #560]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002076:	4b87      	ldr	r3, [pc, #540]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	4983      	ldr	r1, [pc, #524]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00a      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002098:	4b7e      	ldr	r3, [pc, #504]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	497b      	ldr	r1, [pc, #492]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00a      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020ba:	4b76      	ldr	r3, [pc, #472]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c8:	4972      	ldr	r1, [pc, #456]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00a      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020dc:	4b6d      	ldr	r3, [pc, #436]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ea:	496a      	ldr	r1, [pc, #424]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020fe:	4b65      	ldr	r3, [pc, #404]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002104:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	4961      	ldr	r1, [pc, #388]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002120:	4b5c      	ldr	r3, [pc, #368]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002126:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212e:	4959      	ldr	r1, [pc, #356]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002142:	4b54      	ldr	r3, [pc, #336]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002148:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002150:	4950      	ldr	r1, [pc, #320]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002164:	4b4b      	ldr	r3, [pc, #300]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002172:	4948      	ldr	r1, [pc, #288]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002186:	4b43      	ldr	r3, [pc, #268]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	493f      	ldr	r1, [pc, #252]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d028      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021a8:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021b6:	4937      	ldr	r1, [pc, #220]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021c6:	d106      	bne.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c8:	4b32      	ldr	r3, [pc, #200]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4a31      	ldr	r2, [pc, #196]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021d2:	60d3      	str	r3, [r2, #12]
 80021d4:	e011      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021de:	d10c      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3304      	adds	r3, #4
 80021e4:	2101      	movs	r1, #1
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f8c8 	bl	800237c <RCCEx_PLLSAI1_Config>
 80021ec:	4603      	mov	r3, r0
 80021ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021f0:	7cfb      	ldrb	r3, [r7, #19]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021f6:	7cfb      	ldrb	r3, [r7, #19]
 80021f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d028      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002206:	4b23      	ldr	r3, [pc, #140]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002214:	491f      	ldr	r1, [pc, #124]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002224:	d106      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002226:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	4a1a      	ldr	r2, [pc, #104]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002230:	60d3      	str	r3, [r2, #12]
 8002232:	e011      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002238:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800223c:	d10c      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3304      	adds	r3, #4
 8002242:	2101      	movs	r1, #1
 8002244:	4618      	mov	r0, r3
 8002246:	f000 f899 	bl	800237c <RCCEx_PLLSAI1_Config>
 800224a:	4603      	mov	r3, r0
 800224c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800224e:	7cfb      	ldrb	r3, [r7, #19]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d02b      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002272:	4908      	ldr	r1, [pc, #32]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002282:	d109      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4a02      	ldr	r2, [pc, #8]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800228e:	60d3      	str	r3, [r2, #12]
 8002290:	e014      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022a0:	d10c      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3304      	adds	r3, #4
 80022a6:	2101      	movs	r1, #1
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f867 	bl	800237c <RCCEx_PLLSAI1_Config>
 80022ae:	4603      	mov	r3, r0
 80022b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022b2:	7cfb      	ldrb	r3, [r7, #19]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
 80022ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d02f      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022c8:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022d6:	4928      	ldr	r1, [pc, #160]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022e6:	d10d      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3304      	adds	r3, #4
 80022ec:	2102      	movs	r1, #2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f844 	bl	800237c <RCCEx_PLLSAI1_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022f8:	7cfb      	ldrb	r3, [r7, #19]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d014      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022fe:	7cfb      	ldrb	r3, [r7, #19]
 8002300:	74bb      	strb	r3, [r7, #18]
 8002302:	e011      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800230c:	d10c      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3320      	adds	r3, #32
 8002312:	2102      	movs	r1, #2
 8002314:	4618      	mov	r0, r3
 8002316:	f000 f925 	bl	8002564 <RCCEx_PLLSAI2_Config>
 800231a:	4603      	mov	r3, r0
 800231c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800231e:	7cfb      	ldrb	r3, [r7, #19]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002324:	7cfb      	ldrb	r3, [r7, #19]
 8002326:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00a      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002334:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002342:	490d      	ldr	r1, [pc, #52]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002366:	4904      	ldr	r1, [pc, #16]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800236e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000

0800237c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800238a:	4b75      	ldr	r3, [pc, #468]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d018      	beq.n	80023c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002396:	4b72      	ldr	r3, [pc, #456]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f003 0203 	and.w	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d10d      	bne.n	80023c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
       ||
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023ae:	4b6c      	ldr	r3, [pc, #432]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	091b      	lsrs	r3, r3, #4
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
       ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d047      	beq.n	8002452 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
 80023c6:	e044      	b.n	8002452 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d018      	beq.n	8002402 <RCCEx_PLLSAI1_Config+0x86>
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d825      	bhi.n	8002420 <RCCEx_PLLSAI1_Config+0xa4>
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d002      	beq.n	80023de <RCCEx_PLLSAI1_Config+0x62>
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d009      	beq.n	80023f0 <RCCEx_PLLSAI1_Config+0x74>
 80023dc:	e020      	b.n	8002420 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023de:	4b60      	ldr	r3, [pc, #384]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d11d      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ee:	e01a      	b.n	8002426 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023f0:	4b5b      	ldr	r3, [pc, #364]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d116      	bne.n	800242a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002400:	e013      	b.n	800242a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002402:	4b57      	ldr	r3, [pc, #348]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10f      	bne.n	800242e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800240e:	4b54      	ldr	r3, [pc, #336]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800241e:	e006      	b.n	800242e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
      break;
 8002424:	e004      	b.n	8002430 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002426:	bf00      	nop
 8002428:	e002      	b.n	8002430 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800242a:	bf00      	nop
 800242c:	e000      	b.n	8002430 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800242e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10d      	bne.n	8002452 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002436:	4b4a      	ldr	r3, [pc, #296]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6819      	ldr	r1, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	3b01      	subs	r3, #1
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	430b      	orrs	r3, r1
 800244c:	4944      	ldr	r1, [pc, #272]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 800244e:	4313      	orrs	r3, r2
 8002450:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d17d      	bne.n	8002554 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002458:	4b41      	ldr	r3, [pc, #260]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a40      	ldr	r2, [pc, #256]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 800245e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002464:	f7fe fb88 	bl	8000b78 <HAL_GetTick>
 8002468:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800246a:	e009      	b.n	8002480 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800246c:	f7fe fb84 	bl	8000b78 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d902      	bls.n	8002480 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	73fb      	strb	r3, [r7, #15]
        break;
 800247e:	e005      	b.n	800248c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002480:	4b37      	ldr	r3, [pc, #220]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ef      	bne.n	800246c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d160      	bne.n	8002554 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d111      	bne.n	80024bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002498:	4b31      	ldr	r3, [pc, #196]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80024a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6892      	ldr	r2, [r2, #8]
 80024a8:	0211      	lsls	r1, r2, #8
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68d2      	ldr	r2, [r2, #12]
 80024ae:	0912      	lsrs	r2, r2, #4
 80024b0:	0452      	lsls	r2, r2, #17
 80024b2:	430a      	orrs	r2, r1
 80024b4:	492a      	ldr	r1, [pc, #168]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	610b      	str	r3, [r1, #16]
 80024ba:	e027      	b.n	800250c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d112      	bne.n	80024e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024c2:	4b27      	ldr	r3, [pc, #156]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6892      	ldr	r2, [r2, #8]
 80024d2:	0211      	lsls	r1, r2, #8
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6912      	ldr	r2, [r2, #16]
 80024d8:	0852      	lsrs	r2, r2, #1
 80024da:	3a01      	subs	r2, #1
 80024dc:	0552      	lsls	r2, r2, #21
 80024de:	430a      	orrs	r2, r1
 80024e0:	491f      	ldr	r1, [pc, #124]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	610b      	str	r3, [r1, #16]
 80024e6:	e011      	b.n	800250c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024e8:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6892      	ldr	r2, [r2, #8]
 80024f8:	0211      	lsls	r1, r2, #8
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6952      	ldr	r2, [r2, #20]
 80024fe:	0852      	lsrs	r2, r2, #1
 8002500:	3a01      	subs	r2, #1
 8002502:	0652      	lsls	r2, r2, #25
 8002504:	430a      	orrs	r2, r1
 8002506:	4916      	ldr	r1, [pc, #88]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002508:	4313      	orrs	r3, r2
 800250a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800250c:	4b14      	ldr	r3, [pc, #80]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a13      	ldr	r2, [pc, #76]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002512:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002516:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002518:	f7fe fb2e 	bl	8000b78 <HAL_GetTick>
 800251c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800251e:	e009      	b.n	8002534 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002520:	f7fe fb2a 	bl	8000b78 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d902      	bls.n	8002534 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	73fb      	strb	r3, [r7, #15]
          break;
 8002532:	e005      	b.n	8002540 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0ef      	beq.n	8002520 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002548:	691a      	ldr	r2, [r3, #16]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	4904      	ldr	r1, [pc, #16]	; (8002560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002550:	4313      	orrs	r3, r2
 8002552:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000

08002564 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002572:	4b6a      	ldr	r3, [pc, #424]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d018      	beq.n	80025b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800257e:	4b67      	ldr	r3, [pc, #412]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f003 0203 	and.w	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d10d      	bne.n	80025aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
       ||
 8002592:	2b00      	cmp	r3, #0
 8002594:	d009      	beq.n	80025aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002596:	4b61      	ldr	r3, [pc, #388]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	091b      	lsrs	r3, r3, #4
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
       ||
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d047      	beq.n	800263a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
 80025ae:	e044      	b.n	800263a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d018      	beq.n	80025ea <RCCEx_PLLSAI2_Config+0x86>
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d825      	bhi.n	8002608 <RCCEx_PLLSAI2_Config+0xa4>
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d002      	beq.n	80025c6 <RCCEx_PLLSAI2_Config+0x62>
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d009      	beq.n	80025d8 <RCCEx_PLLSAI2_Config+0x74>
 80025c4:	e020      	b.n	8002608 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025c6:	4b55      	ldr	r3, [pc, #340]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d11d      	bne.n	800260e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d6:	e01a      	b.n	800260e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025d8:	4b50      	ldr	r3, [pc, #320]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d116      	bne.n	8002612 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e8:	e013      	b.n	8002612 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025ea:	4b4c      	ldr	r3, [pc, #304]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10f      	bne.n	8002616 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025f6:	4b49      	ldr	r3, [pc, #292]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d109      	bne.n	8002616 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002606:	e006      	b.n	8002616 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
      break;
 800260c:	e004      	b.n	8002618 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800260e:	bf00      	nop
 8002610:	e002      	b.n	8002618 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002612:	bf00      	nop
 8002614:	e000      	b.n	8002618 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002616:	bf00      	nop
    }

    if(status == HAL_OK)
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10d      	bne.n	800263a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800261e:	4b3f      	ldr	r3, [pc, #252]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6819      	ldr	r1, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	430b      	orrs	r3, r1
 8002634:	4939      	ldr	r1, [pc, #228]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002636:	4313      	orrs	r3, r2
 8002638:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d167      	bne.n	8002710 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002640:	4b36      	ldr	r3, [pc, #216]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a35      	ldr	r2, [pc, #212]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800264c:	f7fe fa94 	bl	8000b78 <HAL_GetTick>
 8002650:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002652:	e009      	b.n	8002668 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002654:	f7fe fa90 	bl	8000b78 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d902      	bls.n	8002668 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	73fb      	strb	r3, [r7, #15]
        break;
 8002666:	e005      	b.n	8002674 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002668:	4b2c      	ldr	r3, [pc, #176]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1ef      	bne.n	8002654 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d14a      	bne.n	8002710 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d111      	bne.n	80026a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002680:	4b26      	ldr	r3, [pc, #152]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6892      	ldr	r2, [r2, #8]
 8002690:	0211      	lsls	r1, r2, #8
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68d2      	ldr	r2, [r2, #12]
 8002696:	0912      	lsrs	r2, r2, #4
 8002698:	0452      	lsls	r2, r2, #17
 800269a:	430a      	orrs	r2, r1
 800269c:	491f      	ldr	r1, [pc, #124]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	614b      	str	r3, [r1, #20]
 80026a2:	e011      	b.n	80026c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026a4:	4b1d      	ldr	r3, [pc, #116]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6892      	ldr	r2, [r2, #8]
 80026b4:	0211      	lsls	r1, r2, #8
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6912      	ldr	r2, [r2, #16]
 80026ba:	0852      	lsrs	r2, r2, #1
 80026bc:	3a01      	subs	r2, #1
 80026be:	0652      	lsls	r2, r2, #25
 80026c0:	430a      	orrs	r2, r1
 80026c2:	4916      	ldr	r1, [pc, #88]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a13      	ldr	r2, [pc, #76]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7fe fa50 	bl	8000b78 <HAL_GetTick>
 80026d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026da:	e009      	b.n	80026f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026dc:	f7fe fa4c 	bl	8000b78 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d902      	bls.n	80026f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	73fb      	strb	r3, [r7, #15]
          break;
 80026ee:	e005      	b.n	80026fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026f0:	4b0a      	ldr	r3, [pc, #40]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ef      	beq.n	80026dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	4904      	ldr	r1, [pc, #16]	; (800271c <RCCEx_PLLSAI2_Config+0x1b8>)
 800270c:	4313      	orrs	r3, r2
 800270e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002710:	7bfb      	ldrb	r3, [r7, #15]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000

08002720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e040      	b.n	80027b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe f81a 	bl	800077c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2224      	movs	r2, #36	; 0x24
 800274c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0201 	bic.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f82c 	bl	80027bc <UART_SetConfig>
 8002764:	4603      	mov	r3, r0
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e022      	b.n	80027b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fad8 	bl	8002d2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800278a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800279a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fb5f 	bl	8002e70 <UART_CheckIdleState>
 80027b2:	4603      	mov	r3, r0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c0:	b08a      	sub	sp, #40	; 0x28
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	431a      	orrs	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	4ba4      	ldr	r3, [pc, #656]	; (8002a7c <UART_SetConfig+0x2c0>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027f4:	430b      	orrs	r3, r1
 80027f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a99      	ldr	r2, [pc, #612]	; (8002a80 <UART_SetConfig+0x2c4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d004      	beq.n	8002828 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002824:	4313      	orrs	r3, r2
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002838:	430a      	orrs	r2, r1
 800283a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a90      	ldr	r2, [pc, #576]	; (8002a84 <UART_SetConfig+0x2c8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d126      	bne.n	8002894 <UART_SetConfig+0xd8>
 8002846:	4b90      	ldr	r3, [pc, #576]	; (8002a88 <UART_SetConfig+0x2cc>)
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b03      	cmp	r3, #3
 8002852:	d81b      	bhi.n	800288c <UART_SetConfig+0xd0>
 8002854:	a201      	add	r2, pc, #4	; (adr r2, 800285c <UART_SetConfig+0xa0>)
 8002856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285a:	bf00      	nop
 800285c:	0800286d 	.word	0x0800286d
 8002860:	0800287d 	.word	0x0800287d
 8002864:	08002875 	.word	0x08002875
 8002868:	08002885 	.word	0x08002885
 800286c:	2301      	movs	r3, #1
 800286e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002872:	e116      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 8002874:	2302      	movs	r3, #2
 8002876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800287a:	e112      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 800287c:	2304      	movs	r3, #4
 800287e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002882:	e10e      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 8002884:	2308      	movs	r3, #8
 8002886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800288a:	e10a      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 800288c:	2310      	movs	r3, #16
 800288e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002892:	e106      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a7c      	ldr	r2, [pc, #496]	; (8002a8c <UART_SetConfig+0x2d0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d138      	bne.n	8002910 <UART_SetConfig+0x154>
 800289e:	4b7a      	ldr	r3, [pc, #488]	; (8002a88 <UART_SetConfig+0x2cc>)
 80028a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b0c      	cmp	r3, #12
 80028aa:	d82d      	bhi.n	8002908 <UART_SetConfig+0x14c>
 80028ac:	a201      	add	r2, pc, #4	; (adr r2, 80028b4 <UART_SetConfig+0xf8>)
 80028ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b2:	bf00      	nop
 80028b4:	080028e9 	.word	0x080028e9
 80028b8:	08002909 	.word	0x08002909
 80028bc:	08002909 	.word	0x08002909
 80028c0:	08002909 	.word	0x08002909
 80028c4:	080028f9 	.word	0x080028f9
 80028c8:	08002909 	.word	0x08002909
 80028cc:	08002909 	.word	0x08002909
 80028d0:	08002909 	.word	0x08002909
 80028d4:	080028f1 	.word	0x080028f1
 80028d8:	08002909 	.word	0x08002909
 80028dc:	08002909 	.word	0x08002909
 80028e0:	08002909 	.word	0x08002909
 80028e4:	08002901 	.word	0x08002901
 80028e8:	2300      	movs	r3, #0
 80028ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028ee:	e0d8      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 80028f0:	2302      	movs	r3, #2
 80028f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028f6:	e0d4      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 80028f8:	2304      	movs	r3, #4
 80028fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028fe:	e0d0      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 8002900:	2308      	movs	r3, #8
 8002902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002906:	e0cc      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 8002908:	2310      	movs	r3, #16
 800290a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800290e:	e0c8      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a5e      	ldr	r2, [pc, #376]	; (8002a90 <UART_SetConfig+0x2d4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d125      	bne.n	8002966 <UART_SetConfig+0x1aa>
 800291a:	4b5b      	ldr	r3, [pc, #364]	; (8002a88 <UART_SetConfig+0x2cc>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002920:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002924:	2b30      	cmp	r3, #48	; 0x30
 8002926:	d016      	beq.n	8002956 <UART_SetConfig+0x19a>
 8002928:	2b30      	cmp	r3, #48	; 0x30
 800292a:	d818      	bhi.n	800295e <UART_SetConfig+0x1a2>
 800292c:	2b20      	cmp	r3, #32
 800292e:	d00a      	beq.n	8002946 <UART_SetConfig+0x18a>
 8002930:	2b20      	cmp	r3, #32
 8002932:	d814      	bhi.n	800295e <UART_SetConfig+0x1a2>
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <UART_SetConfig+0x182>
 8002938:	2b10      	cmp	r3, #16
 800293a:	d008      	beq.n	800294e <UART_SetConfig+0x192>
 800293c:	e00f      	b.n	800295e <UART_SetConfig+0x1a2>
 800293e:	2300      	movs	r3, #0
 8002940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002944:	e0ad      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 8002946:	2302      	movs	r3, #2
 8002948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800294c:	e0a9      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 800294e:	2304      	movs	r3, #4
 8002950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002954:	e0a5      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 8002956:	2308      	movs	r3, #8
 8002958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800295c:	e0a1      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 800295e:	2310      	movs	r3, #16
 8002960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002964:	e09d      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a4a      	ldr	r2, [pc, #296]	; (8002a94 <UART_SetConfig+0x2d8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d125      	bne.n	80029bc <UART_SetConfig+0x200>
 8002970:	4b45      	ldr	r3, [pc, #276]	; (8002a88 <UART_SetConfig+0x2cc>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800297a:	2bc0      	cmp	r3, #192	; 0xc0
 800297c:	d016      	beq.n	80029ac <UART_SetConfig+0x1f0>
 800297e:	2bc0      	cmp	r3, #192	; 0xc0
 8002980:	d818      	bhi.n	80029b4 <UART_SetConfig+0x1f8>
 8002982:	2b80      	cmp	r3, #128	; 0x80
 8002984:	d00a      	beq.n	800299c <UART_SetConfig+0x1e0>
 8002986:	2b80      	cmp	r3, #128	; 0x80
 8002988:	d814      	bhi.n	80029b4 <UART_SetConfig+0x1f8>
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <UART_SetConfig+0x1d8>
 800298e:	2b40      	cmp	r3, #64	; 0x40
 8002990:	d008      	beq.n	80029a4 <UART_SetConfig+0x1e8>
 8002992:	e00f      	b.n	80029b4 <UART_SetConfig+0x1f8>
 8002994:	2300      	movs	r3, #0
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800299a:	e082      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 800299c:	2302      	movs	r3, #2
 800299e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029a2:	e07e      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 80029a4:	2304      	movs	r3, #4
 80029a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029aa:	e07a      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 80029ac:	2308      	movs	r3, #8
 80029ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029b2:	e076      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 80029b4:	2310      	movs	r3, #16
 80029b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029ba:	e072      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a35      	ldr	r2, [pc, #212]	; (8002a98 <UART_SetConfig+0x2dc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d12a      	bne.n	8002a1c <UART_SetConfig+0x260>
 80029c6:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <UART_SetConfig+0x2cc>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029d4:	d01a      	beq.n	8002a0c <UART_SetConfig+0x250>
 80029d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029da:	d81b      	bhi.n	8002a14 <UART_SetConfig+0x258>
 80029dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029e0:	d00c      	beq.n	80029fc <UART_SetConfig+0x240>
 80029e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029e6:	d815      	bhi.n	8002a14 <UART_SetConfig+0x258>
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <UART_SetConfig+0x238>
 80029ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f0:	d008      	beq.n	8002a04 <UART_SetConfig+0x248>
 80029f2:	e00f      	b.n	8002a14 <UART_SetConfig+0x258>
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029fa:	e052      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 80029fc:	2302      	movs	r3, #2
 80029fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a02:	e04e      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 8002a04:	2304      	movs	r3, #4
 8002a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a0a:	e04a      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 8002a0c:	2308      	movs	r3, #8
 8002a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a12:	e046      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 8002a14:	2310      	movs	r3, #16
 8002a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a1a:	e042      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a17      	ldr	r2, [pc, #92]	; (8002a80 <UART_SetConfig+0x2c4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d13a      	bne.n	8002a9c <UART_SetConfig+0x2e0>
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <UART_SetConfig+0x2cc>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a34:	d01a      	beq.n	8002a6c <UART_SetConfig+0x2b0>
 8002a36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a3a:	d81b      	bhi.n	8002a74 <UART_SetConfig+0x2b8>
 8002a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a40:	d00c      	beq.n	8002a5c <UART_SetConfig+0x2a0>
 8002a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a46:	d815      	bhi.n	8002a74 <UART_SetConfig+0x2b8>
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <UART_SetConfig+0x298>
 8002a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a50:	d008      	beq.n	8002a64 <UART_SetConfig+0x2a8>
 8002a52:	e00f      	b.n	8002a74 <UART_SetConfig+0x2b8>
 8002a54:	2300      	movs	r3, #0
 8002a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a5a:	e022      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a62:	e01e      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 8002a64:	2304      	movs	r3, #4
 8002a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a6a:	e01a      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 8002a6c:	2308      	movs	r3, #8
 8002a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a72:	e016      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 8002a74:	2310      	movs	r3, #16
 8002a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a7a:	e012      	b.n	8002aa2 <UART_SetConfig+0x2e6>
 8002a7c:	efff69f3 	.word	0xefff69f3
 8002a80:	40008000 	.word	0x40008000
 8002a84:	40013800 	.word	0x40013800
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40004400 	.word	0x40004400
 8002a90:	40004800 	.word	0x40004800
 8002a94:	40004c00 	.word	0x40004c00
 8002a98:	40005000 	.word	0x40005000
 8002a9c:	2310      	movs	r3, #16
 8002a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a9f      	ldr	r2, [pc, #636]	; (8002d24 <UART_SetConfig+0x568>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d17a      	bne.n	8002ba2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002aac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d824      	bhi.n	8002afe <UART_SetConfig+0x342>
 8002ab4:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <UART_SetConfig+0x300>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002ae1 	.word	0x08002ae1
 8002ac0:	08002aff 	.word	0x08002aff
 8002ac4:	08002ae9 	.word	0x08002ae9
 8002ac8:	08002aff 	.word	0x08002aff
 8002acc:	08002aef 	.word	0x08002aef
 8002ad0:	08002aff 	.word	0x08002aff
 8002ad4:	08002aff 	.word	0x08002aff
 8002ad8:	08002aff 	.word	0x08002aff
 8002adc:	08002af7 	.word	0x08002af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ae0:	f7ff f8d6 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 8002ae4:	61f8      	str	r0, [r7, #28]
        break;
 8002ae6:	e010      	b.n	8002b0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ae8:	4b8f      	ldr	r3, [pc, #572]	; (8002d28 <UART_SetConfig+0x56c>)
 8002aea:	61fb      	str	r3, [r7, #28]
        break;
 8002aec:	e00d      	b.n	8002b0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aee:	f7ff f837 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8002af2:	61f8      	str	r0, [r7, #28]
        break;
 8002af4:	e009      	b.n	8002b0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002afa:	61fb      	str	r3, [r7, #28]
        break;
 8002afc:	e005      	b.n	8002b0a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002b08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80fb 	beq.w	8002d08 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d305      	bcc.n	8002b2e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d903      	bls.n	8002b36 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002b34:	e0e8      	b.n	8002d08 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	461c      	mov	r4, r3
 8002b3c:	4615      	mov	r5, r2
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	022b      	lsls	r3, r5, #8
 8002b48:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002b4c:	0222      	lsls	r2, r4, #8
 8002b4e:	68f9      	ldr	r1, [r7, #12]
 8002b50:	6849      	ldr	r1, [r1, #4]
 8002b52:	0849      	lsrs	r1, r1, #1
 8002b54:	2000      	movs	r0, #0
 8002b56:	4688      	mov	r8, r1
 8002b58:	4681      	mov	r9, r0
 8002b5a:	eb12 0a08 	adds.w	sl, r2, r8
 8002b5e:	eb43 0b09 	adc.w	fp, r3, r9
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b70:	4650      	mov	r0, sl
 8002b72:	4659      	mov	r1, fp
 8002b74:	f7fd fb28 	bl	80001c8 <__aeabi_uldivmod>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b86:	d308      	bcc.n	8002b9a <UART_SetConfig+0x3de>
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b8e:	d204      	bcs.n	8002b9a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	60da      	str	r2, [r3, #12]
 8002b98:	e0b6      	b.n	8002d08 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ba0:	e0b2      	b.n	8002d08 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002baa:	d15e      	bne.n	8002c6a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002bac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d828      	bhi.n	8002c06 <UART_SetConfig+0x44a>
 8002bb4:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <UART_SetConfig+0x400>)
 8002bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bba:	bf00      	nop
 8002bbc:	08002be1 	.word	0x08002be1
 8002bc0:	08002be9 	.word	0x08002be9
 8002bc4:	08002bf1 	.word	0x08002bf1
 8002bc8:	08002c07 	.word	0x08002c07
 8002bcc:	08002bf7 	.word	0x08002bf7
 8002bd0:	08002c07 	.word	0x08002c07
 8002bd4:	08002c07 	.word	0x08002c07
 8002bd8:	08002c07 	.word	0x08002c07
 8002bdc:	08002bff 	.word	0x08002bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002be0:	f7ff f856 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 8002be4:	61f8      	str	r0, [r7, #28]
        break;
 8002be6:	e014      	b.n	8002c12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002be8:	f7ff f868 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 8002bec:	61f8      	str	r0, [r7, #28]
        break;
 8002bee:	e010      	b.n	8002c12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bf0:	4b4d      	ldr	r3, [pc, #308]	; (8002d28 <UART_SetConfig+0x56c>)
 8002bf2:	61fb      	str	r3, [r7, #28]
        break;
 8002bf4:	e00d      	b.n	8002c12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bf6:	f7fe ffb3 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8002bfa:	61f8      	str	r0, [r7, #28]
        break;
 8002bfc:	e009      	b.n	8002c12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c02:	61fb      	str	r3, [r7, #28]
        break;
 8002c04:	e005      	b.n	8002c12 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002c10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d077      	beq.n	8002d08 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005a      	lsls	r2, r3, #1
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	085b      	lsrs	r3, r3, #1
 8002c22:	441a      	add	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2b0f      	cmp	r3, #15
 8002c32:	d916      	bls.n	8002c62 <UART_SetConfig+0x4a6>
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3a:	d212      	bcs.n	8002c62 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	f023 030f 	bic.w	r3, r3, #15
 8002c44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	085b      	lsrs	r3, r3, #1
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	8afb      	ldrh	r3, [r7, #22]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	8afa      	ldrh	r2, [r7, #22]
 8002c5e:	60da      	str	r2, [r3, #12]
 8002c60:	e052      	b.n	8002d08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002c68:	e04e      	b.n	8002d08 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d827      	bhi.n	8002cc2 <UART_SetConfig+0x506>
 8002c72:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <UART_SetConfig+0x4bc>)
 8002c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c78:	08002c9d 	.word	0x08002c9d
 8002c7c:	08002ca5 	.word	0x08002ca5
 8002c80:	08002cad 	.word	0x08002cad
 8002c84:	08002cc3 	.word	0x08002cc3
 8002c88:	08002cb3 	.word	0x08002cb3
 8002c8c:	08002cc3 	.word	0x08002cc3
 8002c90:	08002cc3 	.word	0x08002cc3
 8002c94:	08002cc3 	.word	0x08002cc3
 8002c98:	08002cbb 	.word	0x08002cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c9c:	f7fe fff8 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 8002ca0:	61f8      	str	r0, [r7, #28]
        break;
 8002ca2:	e014      	b.n	8002cce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ca4:	f7ff f80a 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 8002ca8:	61f8      	str	r0, [r7, #28]
        break;
 8002caa:	e010      	b.n	8002cce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cac:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <UART_SetConfig+0x56c>)
 8002cae:	61fb      	str	r3, [r7, #28]
        break;
 8002cb0:	e00d      	b.n	8002cce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cb2:	f7fe ff55 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8002cb6:	61f8      	str	r0, [r7, #28]
        break;
 8002cb8:	e009      	b.n	8002cce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cbe:	61fb      	str	r3, [r7, #28]
        break;
 8002cc0:	e005      	b.n	8002cce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002ccc:	bf00      	nop
    }

    if (pclk != 0U)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d019      	beq.n	8002d08 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	085a      	lsrs	r2, r3, #1
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	441a      	add	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	2b0f      	cmp	r3, #15
 8002cec:	d909      	bls.n	8002d02 <UART_SetConfig+0x546>
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf4:	d205      	bcs.n	8002d02 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60da      	str	r2, [r3, #12]
 8002d00:	e002      	b.n	8002d08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3728      	adds	r7, #40	; 0x28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d22:	bf00      	nop
 8002d24:	40008000 	.word	0x40008000
 8002d28:	00f42400 	.word	0x00f42400

08002d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01a      	beq.n	8002e42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e2a:	d10a      	bne.n	8002e42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	605a      	str	r2, [r3, #4]
  }
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e80:	f7fd fe7a 	bl	8000b78 <HAL_GetTick>
 8002e84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d10e      	bne.n	8002eb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f82d 	bl	8002f02 <UART_WaitOnFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e023      	b.n	8002efa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d10e      	bne.n	8002ede <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ec0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f817 	bl	8002f02 <UART_WaitOnFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e00d      	b.n	8002efa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b09c      	sub	sp, #112	; 0x70
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f12:	e0a5      	b.n	8003060 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1a:	f000 80a1 	beq.w	8003060 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1e:	f7fd fe2b 	bl	8000b78 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d302      	bcc.n	8002f34 <UART_WaitOnFlagUntilTimeout+0x32>
 8002f2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d13e      	bne.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f3c:	e853 3f00 	ldrex	r3, [r3]
 8002f40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f48:	667b      	str	r3, [r7, #100]	; 0x64
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f5a:	e841 2300 	strex	r3, r2, [r1]
 8002f5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e6      	bne.n	8002f34 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3308      	adds	r3, #8
 8002f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f70:	e853 3f00 	ldrex	r3, [r3]
 8002f74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3308      	adds	r3, #8
 8002f84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f86:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002f8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e5      	bne.n	8002f66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e067      	b.n	8003082 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d04f      	beq.n	8003060 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fce:	d147      	bne.n	8003060 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fd8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	e853 3f00 	ldrex	r3, [r3]
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8002ffa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003000:	e841 2300 	strex	r3, r2, [r1]
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e6      	bne.n	8002fda <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3308      	adds	r3, #8
 8003012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	e853 3f00 	ldrex	r3, [r3]
 800301a:	613b      	str	r3, [r7, #16]
   return(result);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f023 0301 	bic.w	r3, r3, #1
 8003022:	66bb      	str	r3, [r7, #104]	; 0x68
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3308      	adds	r3, #8
 800302a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800302c:	623a      	str	r2, [r7, #32]
 800302e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003030:	69f9      	ldr	r1, [r7, #28]
 8003032:	6a3a      	ldr	r2, [r7, #32]
 8003034:	e841 2300 	strex	r3, r2, [r1]
 8003038:	61bb      	str	r3, [r7, #24]
   return(result);
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e5      	bne.n	800300c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e010      	b.n	8003082 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	69da      	ldr	r2, [r3, #28]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4013      	ands	r3, r2
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	429a      	cmp	r2, r3
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	429a      	cmp	r2, r3
 800307c:	f43f af4a 	beq.w	8002f14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3770      	adds	r7, #112	; 0x70
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <std>:
 800308c:	2300      	movs	r3, #0
 800308e:	b510      	push	{r4, lr}
 8003090:	4604      	mov	r4, r0
 8003092:	e9c0 3300 	strd	r3, r3, [r0]
 8003096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800309a:	6083      	str	r3, [r0, #8]
 800309c:	8181      	strh	r1, [r0, #12]
 800309e:	6643      	str	r3, [r0, #100]	; 0x64
 80030a0:	81c2      	strh	r2, [r0, #14]
 80030a2:	6183      	str	r3, [r0, #24]
 80030a4:	4619      	mov	r1, r3
 80030a6:	2208      	movs	r2, #8
 80030a8:	305c      	adds	r0, #92	; 0x5c
 80030aa:	f000 f9d3 	bl	8003454 <memset>
 80030ae:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <std+0x38>)
 80030b0:	6263      	str	r3, [r4, #36]	; 0x24
 80030b2:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <std+0x3c>)
 80030b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <std+0x40>)
 80030b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <std+0x44>)
 80030bc:	6224      	str	r4, [r4, #32]
 80030be:	6323      	str	r3, [r4, #48]	; 0x30
 80030c0:	bd10      	pop	{r4, pc}
 80030c2:	bf00      	nop
 80030c4:	080032a5 	.word	0x080032a5
 80030c8:	080032c7 	.word	0x080032c7
 80030cc:	080032ff 	.word	0x080032ff
 80030d0:	08003323 	.word	0x08003323

080030d4 <stdio_exit_handler>:
 80030d4:	4a02      	ldr	r2, [pc, #8]	; (80030e0 <stdio_exit_handler+0xc>)
 80030d6:	4903      	ldr	r1, [pc, #12]	; (80030e4 <stdio_exit_handler+0x10>)
 80030d8:	4803      	ldr	r0, [pc, #12]	; (80030e8 <stdio_exit_handler+0x14>)
 80030da:	f000 b869 	b.w	80031b0 <_fwalk_sglue>
 80030de:	bf00      	nop
 80030e0:	2000000c 	.word	0x2000000c
 80030e4:	08003845 	.word	0x08003845
 80030e8:	20000018 	.word	0x20000018

080030ec <cleanup_stdio>:
 80030ec:	6841      	ldr	r1, [r0, #4]
 80030ee:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <cleanup_stdio+0x34>)
 80030f0:	4299      	cmp	r1, r3
 80030f2:	b510      	push	{r4, lr}
 80030f4:	4604      	mov	r4, r0
 80030f6:	d001      	beq.n	80030fc <cleanup_stdio+0x10>
 80030f8:	f000 fba4 	bl	8003844 <_fflush_r>
 80030fc:	68a1      	ldr	r1, [r4, #8]
 80030fe:	4b09      	ldr	r3, [pc, #36]	; (8003124 <cleanup_stdio+0x38>)
 8003100:	4299      	cmp	r1, r3
 8003102:	d002      	beq.n	800310a <cleanup_stdio+0x1e>
 8003104:	4620      	mov	r0, r4
 8003106:	f000 fb9d 	bl	8003844 <_fflush_r>
 800310a:	68e1      	ldr	r1, [r4, #12]
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <cleanup_stdio+0x3c>)
 800310e:	4299      	cmp	r1, r3
 8003110:	d004      	beq.n	800311c <cleanup_stdio+0x30>
 8003112:	4620      	mov	r0, r4
 8003114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003118:	f000 bb94 	b.w	8003844 <_fflush_r>
 800311c:	bd10      	pop	{r4, pc}
 800311e:	bf00      	nop
 8003120:	20000110 	.word	0x20000110
 8003124:	20000178 	.word	0x20000178
 8003128:	200001e0 	.word	0x200001e0

0800312c <global_stdio_init.part.0>:
 800312c:	b510      	push	{r4, lr}
 800312e:	4b0b      	ldr	r3, [pc, #44]	; (800315c <global_stdio_init.part.0+0x30>)
 8003130:	4c0b      	ldr	r4, [pc, #44]	; (8003160 <global_stdio_init.part.0+0x34>)
 8003132:	4a0c      	ldr	r2, [pc, #48]	; (8003164 <global_stdio_init.part.0+0x38>)
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	4620      	mov	r0, r4
 8003138:	2200      	movs	r2, #0
 800313a:	2104      	movs	r1, #4
 800313c:	f7ff ffa6 	bl	800308c <std>
 8003140:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003144:	2201      	movs	r2, #1
 8003146:	2109      	movs	r1, #9
 8003148:	f7ff ffa0 	bl	800308c <std>
 800314c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003150:	2202      	movs	r2, #2
 8003152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003156:	2112      	movs	r1, #18
 8003158:	f7ff bf98 	b.w	800308c <std>
 800315c:	20000248 	.word	0x20000248
 8003160:	20000110 	.word	0x20000110
 8003164:	080030d5 	.word	0x080030d5

08003168 <__sfp_lock_acquire>:
 8003168:	4801      	ldr	r0, [pc, #4]	; (8003170 <__sfp_lock_acquire+0x8>)
 800316a:	f000 b9eb 	b.w	8003544 <__retarget_lock_acquire_recursive>
 800316e:	bf00      	nop
 8003170:	20000251 	.word	0x20000251

08003174 <__sfp_lock_release>:
 8003174:	4801      	ldr	r0, [pc, #4]	; (800317c <__sfp_lock_release+0x8>)
 8003176:	f000 b9e6 	b.w	8003546 <__retarget_lock_release_recursive>
 800317a:	bf00      	nop
 800317c:	20000251 	.word	0x20000251

08003180 <__sinit>:
 8003180:	b510      	push	{r4, lr}
 8003182:	4604      	mov	r4, r0
 8003184:	f7ff fff0 	bl	8003168 <__sfp_lock_acquire>
 8003188:	6a23      	ldr	r3, [r4, #32]
 800318a:	b11b      	cbz	r3, 8003194 <__sinit+0x14>
 800318c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003190:	f7ff bff0 	b.w	8003174 <__sfp_lock_release>
 8003194:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <__sinit+0x28>)
 8003196:	6223      	str	r3, [r4, #32]
 8003198:	4b04      	ldr	r3, [pc, #16]	; (80031ac <__sinit+0x2c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f5      	bne.n	800318c <__sinit+0xc>
 80031a0:	f7ff ffc4 	bl	800312c <global_stdio_init.part.0>
 80031a4:	e7f2      	b.n	800318c <__sinit+0xc>
 80031a6:	bf00      	nop
 80031a8:	080030ed 	.word	0x080030ed
 80031ac:	20000248 	.word	0x20000248

080031b0 <_fwalk_sglue>:
 80031b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031b4:	4607      	mov	r7, r0
 80031b6:	4688      	mov	r8, r1
 80031b8:	4614      	mov	r4, r2
 80031ba:	2600      	movs	r6, #0
 80031bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031c0:	f1b9 0901 	subs.w	r9, r9, #1
 80031c4:	d505      	bpl.n	80031d2 <_fwalk_sglue+0x22>
 80031c6:	6824      	ldr	r4, [r4, #0]
 80031c8:	2c00      	cmp	r4, #0
 80031ca:	d1f7      	bne.n	80031bc <_fwalk_sglue+0xc>
 80031cc:	4630      	mov	r0, r6
 80031ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031d2:	89ab      	ldrh	r3, [r5, #12]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d907      	bls.n	80031e8 <_fwalk_sglue+0x38>
 80031d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031dc:	3301      	adds	r3, #1
 80031de:	d003      	beq.n	80031e8 <_fwalk_sglue+0x38>
 80031e0:	4629      	mov	r1, r5
 80031e2:	4638      	mov	r0, r7
 80031e4:	47c0      	blx	r8
 80031e6:	4306      	orrs	r6, r0
 80031e8:	3568      	adds	r5, #104	; 0x68
 80031ea:	e7e9      	b.n	80031c0 <_fwalk_sglue+0x10>

080031ec <_puts_r>:
 80031ec:	6a03      	ldr	r3, [r0, #32]
 80031ee:	b570      	push	{r4, r5, r6, lr}
 80031f0:	6884      	ldr	r4, [r0, #8]
 80031f2:	4605      	mov	r5, r0
 80031f4:	460e      	mov	r6, r1
 80031f6:	b90b      	cbnz	r3, 80031fc <_puts_r+0x10>
 80031f8:	f7ff ffc2 	bl	8003180 <__sinit>
 80031fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031fe:	07db      	lsls	r3, r3, #31
 8003200:	d405      	bmi.n	800320e <_puts_r+0x22>
 8003202:	89a3      	ldrh	r3, [r4, #12]
 8003204:	0598      	lsls	r0, r3, #22
 8003206:	d402      	bmi.n	800320e <_puts_r+0x22>
 8003208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800320a:	f000 f99b 	bl	8003544 <__retarget_lock_acquire_recursive>
 800320e:	89a3      	ldrh	r3, [r4, #12]
 8003210:	0719      	lsls	r1, r3, #28
 8003212:	d513      	bpl.n	800323c <_puts_r+0x50>
 8003214:	6923      	ldr	r3, [r4, #16]
 8003216:	b18b      	cbz	r3, 800323c <_puts_r+0x50>
 8003218:	3e01      	subs	r6, #1
 800321a:	68a3      	ldr	r3, [r4, #8]
 800321c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003220:	3b01      	subs	r3, #1
 8003222:	60a3      	str	r3, [r4, #8]
 8003224:	b9e9      	cbnz	r1, 8003262 <_puts_r+0x76>
 8003226:	2b00      	cmp	r3, #0
 8003228:	da2e      	bge.n	8003288 <_puts_r+0x9c>
 800322a:	4622      	mov	r2, r4
 800322c:	210a      	movs	r1, #10
 800322e:	4628      	mov	r0, r5
 8003230:	f000 f87b 	bl	800332a <__swbuf_r>
 8003234:	3001      	adds	r0, #1
 8003236:	d007      	beq.n	8003248 <_puts_r+0x5c>
 8003238:	250a      	movs	r5, #10
 800323a:	e007      	b.n	800324c <_puts_r+0x60>
 800323c:	4621      	mov	r1, r4
 800323e:	4628      	mov	r0, r5
 8003240:	f000 f8b0 	bl	80033a4 <__swsetup_r>
 8003244:	2800      	cmp	r0, #0
 8003246:	d0e7      	beq.n	8003218 <_puts_r+0x2c>
 8003248:	f04f 35ff 	mov.w	r5, #4294967295
 800324c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800324e:	07da      	lsls	r2, r3, #31
 8003250:	d405      	bmi.n	800325e <_puts_r+0x72>
 8003252:	89a3      	ldrh	r3, [r4, #12]
 8003254:	059b      	lsls	r3, r3, #22
 8003256:	d402      	bmi.n	800325e <_puts_r+0x72>
 8003258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800325a:	f000 f974 	bl	8003546 <__retarget_lock_release_recursive>
 800325e:	4628      	mov	r0, r5
 8003260:	bd70      	pop	{r4, r5, r6, pc}
 8003262:	2b00      	cmp	r3, #0
 8003264:	da04      	bge.n	8003270 <_puts_r+0x84>
 8003266:	69a2      	ldr	r2, [r4, #24]
 8003268:	429a      	cmp	r2, r3
 800326a:	dc06      	bgt.n	800327a <_puts_r+0x8e>
 800326c:	290a      	cmp	r1, #10
 800326e:	d004      	beq.n	800327a <_puts_r+0x8e>
 8003270:	6823      	ldr	r3, [r4, #0]
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	6022      	str	r2, [r4, #0]
 8003276:	7019      	strb	r1, [r3, #0]
 8003278:	e7cf      	b.n	800321a <_puts_r+0x2e>
 800327a:	4622      	mov	r2, r4
 800327c:	4628      	mov	r0, r5
 800327e:	f000 f854 	bl	800332a <__swbuf_r>
 8003282:	3001      	adds	r0, #1
 8003284:	d1c9      	bne.n	800321a <_puts_r+0x2e>
 8003286:	e7df      	b.n	8003248 <_puts_r+0x5c>
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	250a      	movs	r5, #10
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	6022      	str	r2, [r4, #0]
 8003290:	701d      	strb	r5, [r3, #0]
 8003292:	e7db      	b.n	800324c <_puts_r+0x60>

08003294 <puts>:
 8003294:	4b02      	ldr	r3, [pc, #8]	; (80032a0 <puts+0xc>)
 8003296:	4601      	mov	r1, r0
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	f7ff bfa7 	b.w	80031ec <_puts_r>
 800329e:	bf00      	nop
 80032a0:	20000064 	.word	0x20000064

080032a4 <__sread>:
 80032a4:	b510      	push	{r4, lr}
 80032a6:	460c      	mov	r4, r1
 80032a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ac:	f000 f8fc 	bl	80034a8 <_read_r>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	bfab      	itete	ge
 80032b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80032b6:	89a3      	ldrhlt	r3, [r4, #12]
 80032b8:	181b      	addge	r3, r3, r0
 80032ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032be:	bfac      	ite	ge
 80032c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80032c2:	81a3      	strhlt	r3, [r4, #12]
 80032c4:	bd10      	pop	{r4, pc}

080032c6 <__swrite>:
 80032c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ca:	461f      	mov	r7, r3
 80032cc:	898b      	ldrh	r3, [r1, #12]
 80032ce:	05db      	lsls	r3, r3, #23
 80032d0:	4605      	mov	r5, r0
 80032d2:	460c      	mov	r4, r1
 80032d4:	4616      	mov	r6, r2
 80032d6:	d505      	bpl.n	80032e4 <__swrite+0x1e>
 80032d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032dc:	2302      	movs	r3, #2
 80032de:	2200      	movs	r2, #0
 80032e0:	f000 f8d0 	bl	8003484 <_lseek_r>
 80032e4:	89a3      	ldrh	r3, [r4, #12]
 80032e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032ee:	81a3      	strh	r3, [r4, #12]
 80032f0:	4632      	mov	r2, r6
 80032f2:	463b      	mov	r3, r7
 80032f4:	4628      	mov	r0, r5
 80032f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032fa:	f000 b8e7 	b.w	80034cc <_write_r>

080032fe <__sseek>:
 80032fe:	b510      	push	{r4, lr}
 8003300:	460c      	mov	r4, r1
 8003302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003306:	f000 f8bd 	bl	8003484 <_lseek_r>
 800330a:	1c43      	adds	r3, r0, #1
 800330c:	89a3      	ldrh	r3, [r4, #12]
 800330e:	bf15      	itete	ne
 8003310:	6560      	strne	r0, [r4, #84]	; 0x54
 8003312:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003316:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800331a:	81a3      	strheq	r3, [r4, #12]
 800331c:	bf18      	it	ne
 800331e:	81a3      	strhne	r3, [r4, #12]
 8003320:	bd10      	pop	{r4, pc}

08003322 <__sclose>:
 8003322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003326:	f000 b89d 	b.w	8003464 <_close_r>

0800332a <__swbuf_r>:
 800332a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332c:	460e      	mov	r6, r1
 800332e:	4614      	mov	r4, r2
 8003330:	4605      	mov	r5, r0
 8003332:	b118      	cbz	r0, 800333c <__swbuf_r+0x12>
 8003334:	6a03      	ldr	r3, [r0, #32]
 8003336:	b90b      	cbnz	r3, 800333c <__swbuf_r+0x12>
 8003338:	f7ff ff22 	bl	8003180 <__sinit>
 800333c:	69a3      	ldr	r3, [r4, #24]
 800333e:	60a3      	str	r3, [r4, #8]
 8003340:	89a3      	ldrh	r3, [r4, #12]
 8003342:	071a      	lsls	r2, r3, #28
 8003344:	d525      	bpl.n	8003392 <__swbuf_r+0x68>
 8003346:	6923      	ldr	r3, [r4, #16]
 8003348:	b31b      	cbz	r3, 8003392 <__swbuf_r+0x68>
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	6922      	ldr	r2, [r4, #16]
 800334e:	1a98      	subs	r0, r3, r2
 8003350:	6963      	ldr	r3, [r4, #20]
 8003352:	b2f6      	uxtb	r6, r6
 8003354:	4283      	cmp	r3, r0
 8003356:	4637      	mov	r7, r6
 8003358:	dc04      	bgt.n	8003364 <__swbuf_r+0x3a>
 800335a:	4621      	mov	r1, r4
 800335c:	4628      	mov	r0, r5
 800335e:	f000 fa71 	bl	8003844 <_fflush_r>
 8003362:	b9e0      	cbnz	r0, 800339e <__swbuf_r+0x74>
 8003364:	68a3      	ldr	r3, [r4, #8]
 8003366:	3b01      	subs	r3, #1
 8003368:	60a3      	str	r3, [r4, #8]
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	6022      	str	r2, [r4, #0]
 8003370:	701e      	strb	r6, [r3, #0]
 8003372:	6962      	ldr	r2, [r4, #20]
 8003374:	1c43      	adds	r3, r0, #1
 8003376:	429a      	cmp	r2, r3
 8003378:	d004      	beq.n	8003384 <__swbuf_r+0x5a>
 800337a:	89a3      	ldrh	r3, [r4, #12]
 800337c:	07db      	lsls	r3, r3, #31
 800337e:	d506      	bpl.n	800338e <__swbuf_r+0x64>
 8003380:	2e0a      	cmp	r6, #10
 8003382:	d104      	bne.n	800338e <__swbuf_r+0x64>
 8003384:	4621      	mov	r1, r4
 8003386:	4628      	mov	r0, r5
 8003388:	f000 fa5c 	bl	8003844 <_fflush_r>
 800338c:	b938      	cbnz	r0, 800339e <__swbuf_r+0x74>
 800338e:	4638      	mov	r0, r7
 8003390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003392:	4621      	mov	r1, r4
 8003394:	4628      	mov	r0, r5
 8003396:	f000 f805 	bl	80033a4 <__swsetup_r>
 800339a:	2800      	cmp	r0, #0
 800339c:	d0d5      	beq.n	800334a <__swbuf_r+0x20>
 800339e:	f04f 37ff 	mov.w	r7, #4294967295
 80033a2:	e7f4      	b.n	800338e <__swbuf_r+0x64>

080033a4 <__swsetup_r>:
 80033a4:	b538      	push	{r3, r4, r5, lr}
 80033a6:	4b2a      	ldr	r3, [pc, #168]	; (8003450 <__swsetup_r+0xac>)
 80033a8:	4605      	mov	r5, r0
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	460c      	mov	r4, r1
 80033ae:	b118      	cbz	r0, 80033b8 <__swsetup_r+0x14>
 80033b0:	6a03      	ldr	r3, [r0, #32]
 80033b2:	b90b      	cbnz	r3, 80033b8 <__swsetup_r+0x14>
 80033b4:	f7ff fee4 	bl	8003180 <__sinit>
 80033b8:	89a3      	ldrh	r3, [r4, #12]
 80033ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033be:	0718      	lsls	r0, r3, #28
 80033c0:	d422      	bmi.n	8003408 <__swsetup_r+0x64>
 80033c2:	06d9      	lsls	r1, r3, #27
 80033c4:	d407      	bmi.n	80033d6 <__swsetup_r+0x32>
 80033c6:	2309      	movs	r3, #9
 80033c8:	602b      	str	r3, [r5, #0]
 80033ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80033ce:	81a3      	strh	r3, [r4, #12]
 80033d0:	f04f 30ff 	mov.w	r0, #4294967295
 80033d4:	e034      	b.n	8003440 <__swsetup_r+0x9c>
 80033d6:	0758      	lsls	r0, r3, #29
 80033d8:	d512      	bpl.n	8003400 <__swsetup_r+0x5c>
 80033da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033dc:	b141      	cbz	r1, 80033f0 <__swsetup_r+0x4c>
 80033de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033e2:	4299      	cmp	r1, r3
 80033e4:	d002      	beq.n	80033ec <__swsetup_r+0x48>
 80033e6:	4628      	mov	r0, r5
 80033e8:	f000 f8ae 	bl	8003548 <_free_r>
 80033ec:	2300      	movs	r3, #0
 80033ee:	6363      	str	r3, [r4, #52]	; 0x34
 80033f0:	89a3      	ldrh	r3, [r4, #12]
 80033f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80033f6:	81a3      	strh	r3, [r4, #12]
 80033f8:	2300      	movs	r3, #0
 80033fa:	6063      	str	r3, [r4, #4]
 80033fc:	6923      	ldr	r3, [r4, #16]
 80033fe:	6023      	str	r3, [r4, #0]
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	f043 0308 	orr.w	r3, r3, #8
 8003406:	81a3      	strh	r3, [r4, #12]
 8003408:	6923      	ldr	r3, [r4, #16]
 800340a:	b94b      	cbnz	r3, 8003420 <__swsetup_r+0x7c>
 800340c:	89a3      	ldrh	r3, [r4, #12]
 800340e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003416:	d003      	beq.n	8003420 <__swsetup_r+0x7c>
 8003418:	4621      	mov	r1, r4
 800341a:	4628      	mov	r0, r5
 800341c:	f000 fa60 	bl	80038e0 <__smakebuf_r>
 8003420:	89a0      	ldrh	r0, [r4, #12]
 8003422:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003426:	f010 0301 	ands.w	r3, r0, #1
 800342a:	d00a      	beq.n	8003442 <__swsetup_r+0x9e>
 800342c:	2300      	movs	r3, #0
 800342e:	60a3      	str	r3, [r4, #8]
 8003430:	6963      	ldr	r3, [r4, #20]
 8003432:	425b      	negs	r3, r3
 8003434:	61a3      	str	r3, [r4, #24]
 8003436:	6923      	ldr	r3, [r4, #16]
 8003438:	b943      	cbnz	r3, 800344c <__swsetup_r+0xa8>
 800343a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800343e:	d1c4      	bne.n	80033ca <__swsetup_r+0x26>
 8003440:	bd38      	pop	{r3, r4, r5, pc}
 8003442:	0781      	lsls	r1, r0, #30
 8003444:	bf58      	it	pl
 8003446:	6963      	ldrpl	r3, [r4, #20]
 8003448:	60a3      	str	r3, [r4, #8]
 800344a:	e7f4      	b.n	8003436 <__swsetup_r+0x92>
 800344c:	2000      	movs	r0, #0
 800344e:	e7f7      	b.n	8003440 <__swsetup_r+0x9c>
 8003450:	20000064 	.word	0x20000064

08003454 <memset>:
 8003454:	4402      	add	r2, r0
 8003456:	4603      	mov	r3, r0
 8003458:	4293      	cmp	r3, r2
 800345a:	d100      	bne.n	800345e <memset+0xa>
 800345c:	4770      	bx	lr
 800345e:	f803 1b01 	strb.w	r1, [r3], #1
 8003462:	e7f9      	b.n	8003458 <memset+0x4>

08003464 <_close_r>:
 8003464:	b538      	push	{r3, r4, r5, lr}
 8003466:	4d06      	ldr	r5, [pc, #24]	; (8003480 <_close_r+0x1c>)
 8003468:	2300      	movs	r3, #0
 800346a:	4604      	mov	r4, r0
 800346c:	4608      	mov	r0, r1
 800346e:	602b      	str	r3, [r5, #0]
 8003470:	f7fd fa6b 	bl	800094a <_close>
 8003474:	1c43      	adds	r3, r0, #1
 8003476:	d102      	bne.n	800347e <_close_r+0x1a>
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	b103      	cbz	r3, 800347e <_close_r+0x1a>
 800347c:	6023      	str	r3, [r4, #0]
 800347e:	bd38      	pop	{r3, r4, r5, pc}
 8003480:	2000024c 	.word	0x2000024c

08003484 <_lseek_r>:
 8003484:	b538      	push	{r3, r4, r5, lr}
 8003486:	4d07      	ldr	r5, [pc, #28]	; (80034a4 <_lseek_r+0x20>)
 8003488:	4604      	mov	r4, r0
 800348a:	4608      	mov	r0, r1
 800348c:	4611      	mov	r1, r2
 800348e:	2200      	movs	r2, #0
 8003490:	602a      	str	r2, [r5, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	f7fd fa80 	bl	8000998 <_lseek>
 8003498:	1c43      	adds	r3, r0, #1
 800349a:	d102      	bne.n	80034a2 <_lseek_r+0x1e>
 800349c:	682b      	ldr	r3, [r5, #0]
 800349e:	b103      	cbz	r3, 80034a2 <_lseek_r+0x1e>
 80034a0:	6023      	str	r3, [r4, #0]
 80034a2:	bd38      	pop	{r3, r4, r5, pc}
 80034a4:	2000024c 	.word	0x2000024c

080034a8 <_read_r>:
 80034a8:	b538      	push	{r3, r4, r5, lr}
 80034aa:	4d07      	ldr	r5, [pc, #28]	; (80034c8 <_read_r+0x20>)
 80034ac:	4604      	mov	r4, r0
 80034ae:	4608      	mov	r0, r1
 80034b0:	4611      	mov	r1, r2
 80034b2:	2200      	movs	r2, #0
 80034b4:	602a      	str	r2, [r5, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	f7fd fa0e 	bl	80008d8 <_read>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	d102      	bne.n	80034c6 <_read_r+0x1e>
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	b103      	cbz	r3, 80034c6 <_read_r+0x1e>
 80034c4:	6023      	str	r3, [r4, #0]
 80034c6:	bd38      	pop	{r3, r4, r5, pc}
 80034c8:	2000024c 	.word	0x2000024c

080034cc <_write_r>:
 80034cc:	b538      	push	{r3, r4, r5, lr}
 80034ce:	4d07      	ldr	r5, [pc, #28]	; (80034ec <_write_r+0x20>)
 80034d0:	4604      	mov	r4, r0
 80034d2:	4608      	mov	r0, r1
 80034d4:	4611      	mov	r1, r2
 80034d6:	2200      	movs	r2, #0
 80034d8:	602a      	str	r2, [r5, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	f7fd fa19 	bl	8000912 <_write>
 80034e0:	1c43      	adds	r3, r0, #1
 80034e2:	d102      	bne.n	80034ea <_write_r+0x1e>
 80034e4:	682b      	ldr	r3, [r5, #0]
 80034e6:	b103      	cbz	r3, 80034ea <_write_r+0x1e>
 80034e8:	6023      	str	r3, [r4, #0]
 80034ea:	bd38      	pop	{r3, r4, r5, pc}
 80034ec:	2000024c 	.word	0x2000024c

080034f0 <__errno>:
 80034f0:	4b01      	ldr	r3, [pc, #4]	; (80034f8 <__errno+0x8>)
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000064 	.word	0x20000064

080034fc <__libc_init_array>:
 80034fc:	b570      	push	{r4, r5, r6, lr}
 80034fe:	4d0d      	ldr	r5, [pc, #52]	; (8003534 <__libc_init_array+0x38>)
 8003500:	4c0d      	ldr	r4, [pc, #52]	; (8003538 <__libc_init_array+0x3c>)
 8003502:	1b64      	subs	r4, r4, r5
 8003504:	10a4      	asrs	r4, r4, #2
 8003506:	2600      	movs	r6, #0
 8003508:	42a6      	cmp	r6, r4
 800350a:	d109      	bne.n	8003520 <__libc_init_array+0x24>
 800350c:	4d0b      	ldr	r5, [pc, #44]	; (800353c <__libc_init_array+0x40>)
 800350e:	4c0c      	ldr	r4, [pc, #48]	; (8003540 <__libc_init_array+0x44>)
 8003510:	f000 fa54 	bl	80039bc <_init>
 8003514:	1b64      	subs	r4, r4, r5
 8003516:	10a4      	asrs	r4, r4, #2
 8003518:	2600      	movs	r6, #0
 800351a:	42a6      	cmp	r6, r4
 800351c:	d105      	bne.n	800352a <__libc_init_array+0x2e>
 800351e:	bd70      	pop	{r4, r5, r6, pc}
 8003520:	f855 3b04 	ldr.w	r3, [r5], #4
 8003524:	4798      	blx	r3
 8003526:	3601      	adds	r6, #1
 8003528:	e7ee      	b.n	8003508 <__libc_init_array+0xc>
 800352a:	f855 3b04 	ldr.w	r3, [r5], #4
 800352e:	4798      	blx	r3
 8003530:	3601      	adds	r6, #1
 8003532:	e7f2      	b.n	800351a <__libc_init_array+0x1e>
 8003534:	08003a30 	.word	0x08003a30
 8003538:	08003a30 	.word	0x08003a30
 800353c:	08003a30 	.word	0x08003a30
 8003540:	08003a34 	.word	0x08003a34

08003544 <__retarget_lock_acquire_recursive>:
 8003544:	4770      	bx	lr

08003546 <__retarget_lock_release_recursive>:
 8003546:	4770      	bx	lr

08003548 <_free_r>:
 8003548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800354a:	2900      	cmp	r1, #0
 800354c:	d044      	beq.n	80035d8 <_free_r+0x90>
 800354e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003552:	9001      	str	r0, [sp, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	f1a1 0404 	sub.w	r4, r1, #4
 800355a:	bfb8      	it	lt
 800355c:	18e4      	addlt	r4, r4, r3
 800355e:	f000 f8df 	bl	8003720 <__malloc_lock>
 8003562:	4a1e      	ldr	r2, [pc, #120]	; (80035dc <_free_r+0x94>)
 8003564:	9801      	ldr	r0, [sp, #4]
 8003566:	6813      	ldr	r3, [r2, #0]
 8003568:	b933      	cbnz	r3, 8003578 <_free_r+0x30>
 800356a:	6063      	str	r3, [r4, #4]
 800356c:	6014      	str	r4, [r2, #0]
 800356e:	b003      	add	sp, #12
 8003570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003574:	f000 b8da 	b.w	800372c <__malloc_unlock>
 8003578:	42a3      	cmp	r3, r4
 800357a:	d908      	bls.n	800358e <_free_r+0x46>
 800357c:	6825      	ldr	r5, [r4, #0]
 800357e:	1961      	adds	r1, r4, r5
 8003580:	428b      	cmp	r3, r1
 8003582:	bf01      	itttt	eq
 8003584:	6819      	ldreq	r1, [r3, #0]
 8003586:	685b      	ldreq	r3, [r3, #4]
 8003588:	1949      	addeq	r1, r1, r5
 800358a:	6021      	streq	r1, [r4, #0]
 800358c:	e7ed      	b.n	800356a <_free_r+0x22>
 800358e:	461a      	mov	r2, r3
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	b10b      	cbz	r3, 8003598 <_free_r+0x50>
 8003594:	42a3      	cmp	r3, r4
 8003596:	d9fa      	bls.n	800358e <_free_r+0x46>
 8003598:	6811      	ldr	r1, [r2, #0]
 800359a:	1855      	adds	r5, r2, r1
 800359c:	42a5      	cmp	r5, r4
 800359e:	d10b      	bne.n	80035b8 <_free_r+0x70>
 80035a0:	6824      	ldr	r4, [r4, #0]
 80035a2:	4421      	add	r1, r4
 80035a4:	1854      	adds	r4, r2, r1
 80035a6:	42a3      	cmp	r3, r4
 80035a8:	6011      	str	r1, [r2, #0]
 80035aa:	d1e0      	bne.n	800356e <_free_r+0x26>
 80035ac:	681c      	ldr	r4, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	6053      	str	r3, [r2, #4]
 80035b2:	440c      	add	r4, r1
 80035b4:	6014      	str	r4, [r2, #0]
 80035b6:	e7da      	b.n	800356e <_free_r+0x26>
 80035b8:	d902      	bls.n	80035c0 <_free_r+0x78>
 80035ba:	230c      	movs	r3, #12
 80035bc:	6003      	str	r3, [r0, #0]
 80035be:	e7d6      	b.n	800356e <_free_r+0x26>
 80035c0:	6825      	ldr	r5, [r4, #0]
 80035c2:	1961      	adds	r1, r4, r5
 80035c4:	428b      	cmp	r3, r1
 80035c6:	bf04      	itt	eq
 80035c8:	6819      	ldreq	r1, [r3, #0]
 80035ca:	685b      	ldreq	r3, [r3, #4]
 80035cc:	6063      	str	r3, [r4, #4]
 80035ce:	bf04      	itt	eq
 80035d0:	1949      	addeq	r1, r1, r5
 80035d2:	6021      	streq	r1, [r4, #0]
 80035d4:	6054      	str	r4, [r2, #4]
 80035d6:	e7ca      	b.n	800356e <_free_r+0x26>
 80035d8:	b003      	add	sp, #12
 80035da:	bd30      	pop	{r4, r5, pc}
 80035dc:	20000254 	.word	0x20000254

080035e0 <sbrk_aligned>:
 80035e0:	b570      	push	{r4, r5, r6, lr}
 80035e2:	4e0e      	ldr	r6, [pc, #56]	; (800361c <sbrk_aligned+0x3c>)
 80035e4:	460c      	mov	r4, r1
 80035e6:	6831      	ldr	r1, [r6, #0]
 80035e8:	4605      	mov	r5, r0
 80035ea:	b911      	cbnz	r1, 80035f2 <sbrk_aligned+0x12>
 80035ec:	f000 f9d6 	bl	800399c <_sbrk_r>
 80035f0:	6030      	str	r0, [r6, #0]
 80035f2:	4621      	mov	r1, r4
 80035f4:	4628      	mov	r0, r5
 80035f6:	f000 f9d1 	bl	800399c <_sbrk_r>
 80035fa:	1c43      	adds	r3, r0, #1
 80035fc:	d00a      	beq.n	8003614 <sbrk_aligned+0x34>
 80035fe:	1cc4      	adds	r4, r0, #3
 8003600:	f024 0403 	bic.w	r4, r4, #3
 8003604:	42a0      	cmp	r0, r4
 8003606:	d007      	beq.n	8003618 <sbrk_aligned+0x38>
 8003608:	1a21      	subs	r1, r4, r0
 800360a:	4628      	mov	r0, r5
 800360c:	f000 f9c6 	bl	800399c <_sbrk_r>
 8003610:	3001      	adds	r0, #1
 8003612:	d101      	bne.n	8003618 <sbrk_aligned+0x38>
 8003614:	f04f 34ff 	mov.w	r4, #4294967295
 8003618:	4620      	mov	r0, r4
 800361a:	bd70      	pop	{r4, r5, r6, pc}
 800361c:	20000258 	.word	0x20000258

08003620 <_malloc_r>:
 8003620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003624:	1ccd      	adds	r5, r1, #3
 8003626:	f025 0503 	bic.w	r5, r5, #3
 800362a:	3508      	adds	r5, #8
 800362c:	2d0c      	cmp	r5, #12
 800362e:	bf38      	it	cc
 8003630:	250c      	movcc	r5, #12
 8003632:	2d00      	cmp	r5, #0
 8003634:	4607      	mov	r7, r0
 8003636:	db01      	blt.n	800363c <_malloc_r+0x1c>
 8003638:	42a9      	cmp	r1, r5
 800363a:	d905      	bls.n	8003648 <_malloc_r+0x28>
 800363c:	230c      	movs	r3, #12
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	2600      	movs	r6, #0
 8003642:	4630      	mov	r0, r6
 8003644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003648:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800371c <_malloc_r+0xfc>
 800364c:	f000 f868 	bl	8003720 <__malloc_lock>
 8003650:	f8d8 3000 	ldr.w	r3, [r8]
 8003654:	461c      	mov	r4, r3
 8003656:	bb5c      	cbnz	r4, 80036b0 <_malloc_r+0x90>
 8003658:	4629      	mov	r1, r5
 800365a:	4638      	mov	r0, r7
 800365c:	f7ff ffc0 	bl	80035e0 <sbrk_aligned>
 8003660:	1c43      	adds	r3, r0, #1
 8003662:	4604      	mov	r4, r0
 8003664:	d155      	bne.n	8003712 <_malloc_r+0xf2>
 8003666:	f8d8 4000 	ldr.w	r4, [r8]
 800366a:	4626      	mov	r6, r4
 800366c:	2e00      	cmp	r6, #0
 800366e:	d145      	bne.n	80036fc <_malloc_r+0xdc>
 8003670:	2c00      	cmp	r4, #0
 8003672:	d048      	beq.n	8003706 <_malloc_r+0xe6>
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	4631      	mov	r1, r6
 8003678:	4638      	mov	r0, r7
 800367a:	eb04 0903 	add.w	r9, r4, r3
 800367e:	f000 f98d 	bl	800399c <_sbrk_r>
 8003682:	4581      	cmp	r9, r0
 8003684:	d13f      	bne.n	8003706 <_malloc_r+0xe6>
 8003686:	6821      	ldr	r1, [r4, #0]
 8003688:	1a6d      	subs	r5, r5, r1
 800368a:	4629      	mov	r1, r5
 800368c:	4638      	mov	r0, r7
 800368e:	f7ff ffa7 	bl	80035e0 <sbrk_aligned>
 8003692:	3001      	adds	r0, #1
 8003694:	d037      	beq.n	8003706 <_malloc_r+0xe6>
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	442b      	add	r3, r5
 800369a:	6023      	str	r3, [r4, #0]
 800369c:	f8d8 3000 	ldr.w	r3, [r8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d038      	beq.n	8003716 <_malloc_r+0xf6>
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	42a2      	cmp	r2, r4
 80036a8:	d12b      	bne.n	8003702 <_malloc_r+0xe2>
 80036aa:	2200      	movs	r2, #0
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	e00f      	b.n	80036d0 <_malloc_r+0xb0>
 80036b0:	6822      	ldr	r2, [r4, #0]
 80036b2:	1b52      	subs	r2, r2, r5
 80036b4:	d41f      	bmi.n	80036f6 <_malloc_r+0xd6>
 80036b6:	2a0b      	cmp	r2, #11
 80036b8:	d917      	bls.n	80036ea <_malloc_r+0xca>
 80036ba:	1961      	adds	r1, r4, r5
 80036bc:	42a3      	cmp	r3, r4
 80036be:	6025      	str	r5, [r4, #0]
 80036c0:	bf18      	it	ne
 80036c2:	6059      	strne	r1, [r3, #4]
 80036c4:	6863      	ldr	r3, [r4, #4]
 80036c6:	bf08      	it	eq
 80036c8:	f8c8 1000 	streq.w	r1, [r8]
 80036cc:	5162      	str	r2, [r4, r5]
 80036ce:	604b      	str	r3, [r1, #4]
 80036d0:	4638      	mov	r0, r7
 80036d2:	f104 060b 	add.w	r6, r4, #11
 80036d6:	f000 f829 	bl	800372c <__malloc_unlock>
 80036da:	f026 0607 	bic.w	r6, r6, #7
 80036de:	1d23      	adds	r3, r4, #4
 80036e0:	1af2      	subs	r2, r6, r3
 80036e2:	d0ae      	beq.n	8003642 <_malloc_r+0x22>
 80036e4:	1b9b      	subs	r3, r3, r6
 80036e6:	50a3      	str	r3, [r4, r2]
 80036e8:	e7ab      	b.n	8003642 <_malloc_r+0x22>
 80036ea:	42a3      	cmp	r3, r4
 80036ec:	6862      	ldr	r2, [r4, #4]
 80036ee:	d1dd      	bne.n	80036ac <_malloc_r+0x8c>
 80036f0:	f8c8 2000 	str.w	r2, [r8]
 80036f4:	e7ec      	b.n	80036d0 <_malloc_r+0xb0>
 80036f6:	4623      	mov	r3, r4
 80036f8:	6864      	ldr	r4, [r4, #4]
 80036fa:	e7ac      	b.n	8003656 <_malloc_r+0x36>
 80036fc:	4634      	mov	r4, r6
 80036fe:	6876      	ldr	r6, [r6, #4]
 8003700:	e7b4      	b.n	800366c <_malloc_r+0x4c>
 8003702:	4613      	mov	r3, r2
 8003704:	e7cc      	b.n	80036a0 <_malloc_r+0x80>
 8003706:	230c      	movs	r3, #12
 8003708:	603b      	str	r3, [r7, #0]
 800370a:	4638      	mov	r0, r7
 800370c:	f000 f80e 	bl	800372c <__malloc_unlock>
 8003710:	e797      	b.n	8003642 <_malloc_r+0x22>
 8003712:	6025      	str	r5, [r4, #0]
 8003714:	e7dc      	b.n	80036d0 <_malloc_r+0xb0>
 8003716:	605b      	str	r3, [r3, #4]
 8003718:	deff      	udf	#255	; 0xff
 800371a:	bf00      	nop
 800371c:	20000254 	.word	0x20000254

08003720 <__malloc_lock>:
 8003720:	4801      	ldr	r0, [pc, #4]	; (8003728 <__malloc_lock+0x8>)
 8003722:	f7ff bf0f 	b.w	8003544 <__retarget_lock_acquire_recursive>
 8003726:	bf00      	nop
 8003728:	20000250 	.word	0x20000250

0800372c <__malloc_unlock>:
 800372c:	4801      	ldr	r0, [pc, #4]	; (8003734 <__malloc_unlock+0x8>)
 800372e:	f7ff bf0a 	b.w	8003546 <__retarget_lock_release_recursive>
 8003732:	bf00      	nop
 8003734:	20000250 	.word	0x20000250

08003738 <__sflush_r>:
 8003738:	898a      	ldrh	r2, [r1, #12]
 800373a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800373e:	4605      	mov	r5, r0
 8003740:	0710      	lsls	r0, r2, #28
 8003742:	460c      	mov	r4, r1
 8003744:	d458      	bmi.n	80037f8 <__sflush_r+0xc0>
 8003746:	684b      	ldr	r3, [r1, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	dc05      	bgt.n	8003758 <__sflush_r+0x20>
 800374c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	dc02      	bgt.n	8003758 <__sflush_r+0x20>
 8003752:	2000      	movs	r0, #0
 8003754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800375a:	2e00      	cmp	r6, #0
 800375c:	d0f9      	beq.n	8003752 <__sflush_r+0x1a>
 800375e:	2300      	movs	r3, #0
 8003760:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003764:	682f      	ldr	r7, [r5, #0]
 8003766:	6a21      	ldr	r1, [r4, #32]
 8003768:	602b      	str	r3, [r5, #0]
 800376a:	d032      	beq.n	80037d2 <__sflush_r+0x9a>
 800376c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800376e:	89a3      	ldrh	r3, [r4, #12]
 8003770:	075a      	lsls	r2, r3, #29
 8003772:	d505      	bpl.n	8003780 <__sflush_r+0x48>
 8003774:	6863      	ldr	r3, [r4, #4]
 8003776:	1ac0      	subs	r0, r0, r3
 8003778:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800377a:	b10b      	cbz	r3, 8003780 <__sflush_r+0x48>
 800377c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800377e:	1ac0      	subs	r0, r0, r3
 8003780:	2300      	movs	r3, #0
 8003782:	4602      	mov	r2, r0
 8003784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003786:	6a21      	ldr	r1, [r4, #32]
 8003788:	4628      	mov	r0, r5
 800378a:	47b0      	blx	r6
 800378c:	1c43      	adds	r3, r0, #1
 800378e:	89a3      	ldrh	r3, [r4, #12]
 8003790:	d106      	bne.n	80037a0 <__sflush_r+0x68>
 8003792:	6829      	ldr	r1, [r5, #0]
 8003794:	291d      	cmp	r1, #29
 8003796:	d82b      	bhi.n	80037f0 <__sflush_r+0xb8>
 8003798:	4a29      	ldr	r2, [pc, #164]	; (8003840 <__sflush_r+0x108>)
 800379a:	410a      	asrs	r2, r1
 800379c:	07d6      	lsls	r6, r2, #31
 800379e:	d427      	bmi.n	80037f0 <__sflush_r+0xb8>
 80037a0:	2200      	movs	r2, #0
 80037a2:	6062      	str	r2, [r4, #4]
 80037a4:	04d9      	lsls	r1, r3, #19
 80037a6:	6922      	ldr	r2, [r4, #16]
 80037a8:	6022      	str	r2, [r4, #0]
 80037aa:	d504      	bpl.n	80037b6 <__sflush_r+0x7e>
 80037ac:	1c42      	adds	r2, r0, #1
 80037ae:	d101      	bne.n	80037b4 <__sflush_r+0x7c>
 80037b0:	682b      	ldr	r3, [r5, #0]
 80037b2:	b903      	cbnz	r3, 80037b6 <__sflush_r+0x7e>
 80037b4:	6560      	str	r0, [r4, #84]	; 0x54
 80037b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037b8:	602f      	str	r7, [r5, #0]
 80037ba:	2900      	cmp	r1, #0
 80037bc:	d0c9      	beq.n	8003752 <__sflush_r+0x1a>
 80037be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037c2:	4299      	cmp	r1, r3
 80037c4:	d002      	beq.n	80037cc <__sflush_r+0x94>
 80037c6:	4628      	mov	r0, r5
 80037c8:	f7ff febe 	bl	8003548 <_free_r>
 80037cc:	2000      	movs	r0, #0
 80037ce:	6360      	str	r0, [r4, #52]	; 0x34
 80037d0:	e7c0      	b.n	8003754 <__sflush_r+0x1c>
 80037d2:	2301      	movs	r3, #1
 80037d4:	4628      	mov	r0, r5
 80037d6:	47b0      	blx	r6
 80037d8:	1c41      	adds	r1, r0, #1
 80037da:	d1c8      	bne.n	800376e <__sflush_r+0x36>
 80037dc:	682b      	ldr	r3, [r5, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0c5      	beq.n	800376e <__sflush_r+0x36>
 80037e2:	2b1d      	cmp	r3, #29
 80037e4:	d001      	beq.n	80037ea <__sflush_r+0xb2>
 80037e6:	2b16      	cmp	r3, #22
 80037e8:	d101      	bne.n	80037ee <__sflush_r+0xb6>
 80037ea:	602f      	str	r7, [r5, #0]
 80037ec:	e7b1      	b.n	8003752 <__sflush_r+0x1a>
 80037ee:	89a3      	ldrh	r3, [r4, #12]
 80037f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037f4:	81a3      	strh	r3, [r4, #12]
 80037f6:	e7ad      	b.n	8003754 <__sflush_r+0x1c>
 80037f8:	690f      	ldr	r7, [r1, #16]
 80037fa:	2f00      	cmp	r7, #0
 80037fc:	d0a9      	beq.n	8003752 <__sflush_r+0x1a>
 80037fe:	0793      	lsls	r3, r2, #30
 8003800:	680e      	ldr	r6, [r1, #0]
 8003802:	bf08      	it	eq
 8003804:	694b      	ldreq	r3, [r1, #20]
 8003806:	600f      	str	r7, [r1, #0]
 8003808:	bf18      	it	ne
 800380a:	2300      	movne	r3, #0
 800380c:	eba6 0807 	sub.w	r8, r6, r7
 8003810:	608b      	str	r3, [r1, #8]
 8003812:	f1b8 0f00 	cmp.w	r8, #0
 8003816:	dd9c      	ble.n	8003752 <__sflush_r+0x1a>
 8003818:	6a21      	ldr	r1, [r4, #32]
 800381a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800381c:	4643      	mov	r3, r8
 800381e:	463a      	mov	r2, r7
 8003820:	4628      	mov	r0, r5
 8003822:	47b0      	blx	r6
 8003824:	2800      	cmp	r0, #0
 8003826:	dc06      	bgt.n	8003836 <__sflush_r+0xfe>
 8003828:	89a3      	ldrh	r3, [r4, #12]
 800382a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800382e:	81a3      	strh	r3, [r4, #12]
 8003830:	f04f 30ff 	mov.w	r0, #4294967295
 8003834:	e78e      	b.n	8003754 <__sflush_r+0x1c>
 8003836:	4407      	add	r7, r0
 8003838:	eba8 0800 	sub.w	r8, r8, r0
 800383c:	e7e9      	b.n	8003812 <__sflush_r+0xda>
 800383e:	bf00      	nop
 8003840:	dfbffffe 	.word	0xdfbffffe

08003844 <_fflush_r>:
 8003844:	b538      	push	{r3, r4, r5, lr}
 8003846:	690b      	ldr	r3, [r1, #16]
 8003848:	4605      	mov	r5, r0
 800384a:	460c      	mov	r4, r1
 800384c:	b913      	cbnz	r3, 8003854 <_fflush_r+0x10>
 800384e:	2500      	movs	r5, #0
 8003850:	4628      	mov	r0, r5
 8003852:	bd38      	pop	{r3, r4, r5, pc}
 8003854:	b118      	cbz	r0, 800385e <_fflush_r+0x1a>
 8003856:	6a03      	ldr	r3, [r0, #32]
 8003858:	b90b      	cbnz	r3, 800385e <_fflush_r+0x1a>
 800385a:	f7ff fc91 	bl	8003180 <__sinit>
 800385e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f3      	beq.n	800384e <_fflush_r+0xa>
 8003866:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003868:	07d0      	lsls	r0, r2, #31
 800386a:	d404      	bmi.n	8003876 <_fflush_r+0x32>
 800386c:	0599      	lsls	r1, r3, #22
 800386e:	d402      	bmi.n	8003876 <_fflush_r+0x32>
 8003870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003872:	f7ff fe67 	bl	8003544 <__retarget_lock_acquire_recursive>
 8003876:	4628      	mov	r0, r5
 8003878:	4621      	mov	r1, r4
 800387a:	f7ff ff5d 	bl	8003738 <__sflush_r>
 800387e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003880:	07da      	lsls	r2, r3, #31
 8003882:	4605      	mov	r5, r0
 8003884:	d4e4      	bmi.n	8003850 <_fflush_r+0xc>
 8003886:	89a3      	ldrh	r3, [r4, #12]
 8003888:	059b      	lsls	r3, r3, #22
 800388a:	d4e1      	bmi.n	8003850 <_fflush_r+0xc>
 800388c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800388e:	f7ff fe5a 	bl	8003546 <__retarget_lock_release_recursive>
 8003892:	e7dd      	b.n	8003850 <_fflush_r+0xc>

08003894 <__swhatbuf_r>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	460c      	mov	r4, r1
 8003898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800389c:	2900      	cmp	r1, #0
 800389e:	b096      	sub	sp, #88	; 0x58
 80038a0:	4615      	mov	r5, r2
 80038a2:	461e      	mov	r6, r3
 80038a4:	da0d      	bge.n	80038c2 <__swhatbuf_r+0x2e>
 80038a6:	89a3      	ldrh	r3, [r4, #12]
 80038a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80038ac:	f04f 0100 	mov.w	r1, #0
 80038b0:	bf0c      	ite	eq
 80038b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80038b6:	2340      	movne	r3, #64	; 0x40
 80038b8:	2000      	movs	r0, #0
 80038ba:	6031      	str	r1, [r6, #0]
 80038bc:	602b      	str	r3, [r5, #0]
 80038be:	b016      	add	sp, #88	; 0x58
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	466a      	mov	r2, sp
 80038c4:	f000 f848 	bl	8003958 <_fstat_r>
 80038c8:	2800      	cmp	r0, #0
 80038ca:	dbec      	blt.n	80038a6 <__swhatbuf_r+0x12>
 80038cc:	9901      	ldr	r1, [sp, #4]
 80038ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80038d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80038d6:	4259      	negs	r1, r3
 80038d8:	4159      	adcs	r1, r3
 80038da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038de:	e7eb      	b.n	80038b8 <__swhatbuf_r+0x24>

080038e0 <__smakebuf_r>:
 80038e0:	898b      	ldrh	r3, [r1, #12]
 80038e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038e4:	079d      	lsls	r5, r3, #30
 80038e6:	4606      	mov	r6, r0
 80038e8:	460c      	mov	r4, r1
 80038ea:	d507      	bpl.n	80038fc <__smakebuf_r+0x1c>
 80038ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80038f0:	6023      	str	r3, [r4, #0]
 80038f2:	6123      	str	r3, [r4, #16]
 80038f4:	2301      	movs	r3, #1
 80038f6:	6163      	str	r3, [r4, #20]
 80038f8:	b002      	add	sp, #8
 80038fa:	bd70      	pop	{r4, r5, r6, pc}
 80038fc:	ab01      	add	r3, sp, #4
 80038fe:	466a      	mov	r2, sp
 8003900:	f7ff ffc8 	bl	8003894 <__swhatbuf_r>
 8003904:	9900      	ldr	r1, [sp, #0]
 8003906:	4605      	mov	r5, r0
 8003908:	4630      	mov	r0, r6
 800390a:	f7ff fe89 	bl	8003620 <_malloc_r>
 800390e:	b948      	cbnz	r0, 8003924 <__smakebuf_r+0x44>
 8003910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003914:	059a      	lsls	r2, r3, #22
 8003916:	d4ef      	bmi.n	80038f8 <__smakebuf_r+0x18>
 8003918:	f023 0303 	bic.w	r3, r3, #3
 800391c:	f043 0302 	orr.w	r3, r3, #2
 8003920:	81a3      	strh	r3, [r4, #12]
 8003922:	e7e3      	b.n	80038ec <__smakebuf_r+0xc>
 8003924:	89a3      	ldrh	r3, [r4, #12]
 8003926:	6020      	str	r0, [r4, #0]
 8003928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800392c:	81a3      	strh	r3, [r4, #12]
 800392e:	9b00      	ldr	r3, [sp, #0]
 8003930:	6163      	str	r3, [r4, #20]
 8003932:	9b01      	ldr	r3, [sp, #4]
 8003934:	6120      	str	r0, [r4, #16]
 8003936:	b15b      	cbz	r3, 8003950 <__smakebuf_r+0x70>
 8003938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800393c:	4630      	mov	r0, r6
 800393e:	f000 f81d 	bl	800397c <_isatty_r>
 8003942:	b128      	cbz	r0, 8003950 <__smakebuf_r+0x70>
 8003944:	89a3      	ldrh	r3, [r4, #12]
 8003946:	f023 0303 	bic.w	r3, r3, #3
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	81a3      	strh	r3, [r4, #12]
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	431d      	orrs	r5, r3
 8003954:	81a5      	strh	r5, [r4, #12]
 8003956:	e7cf      	b.n	80038f8 <__smakebuf_r+0x18>

08003958 <_fstat_r>:
 8003958:	b538      	push	{r3, r4, r5, lr}
 800395a:	4d07      	ldr	r5, [pc, #28]	; (8003978 <_fstat_r+0x20>)
 800395c:	2300      	movs	r3, #0
 800395e:	4604      	mov	r4, r0
 8003960:	4608      	mov	r0, r1
 8003962:	4611      	mov	r1, r2
 8003964:	602b      	str	r3, [r5, #0]
 8003966:	f7fc fffc 	bl	8000962 <_fstat>
 800396a:	1c43      	adds	r3, r0, #1
 800396c:	d102      	bne.n	8003974 <_fstat_r+0x1c>
 800396e:	682b      	ldr	r3, [r5, #0]
 8003970:	b103      	cbz	r3, 8003974 <_fstat_r+0x1c>
 8003972:	6023      	str	r3, [r4, #0]
 8003974:	bd38      	pop	{r3, r4, r5, pc}
 8003976:	bf00      	nop
 8003978:	2000024c 	.word	0x2000024c

0800397c <_isatty_r>:
 800397c:	b538      	push	{r3, r4, r5, lr}
 800397e:	4d06      	ldr	r5, [pc, #24]	; (8003998 <_isatty_r+0x1c>)
 8003980:	2300      	movs	r3, #0
 8003982:	4604      	mov	r4, r0
 8003984:	4608      	mov	r0, r1
 8003986:	602b      	str	r3, [r5, #0]
 8003988:	f7fc fffb 	bl	8000982 <_isatty>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	d102      	bne.n	8003996 <_isatty_r+0x1a>
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	b103      	cbz	r3, 8003996 <_isatty_r+0x1a>
 8003994:	6023      	str	r3, [r4, #0]
 8003996:	bd38      	pop	{r3, r4, r5, pc}
 8003998:	2000024c 	.word	0x2000024c

0800399c <_sbrk_r>:
 800399c:	b538      	push	{r3, r4, r5, lr}
 800399e:	4d06      	ldr	r5, [pc, #24]	; (80039b8 <_sbrk_r+0x1c>)
 80039a0:	2300      	movs	r3, #0
 80039a2:	4604      	mov	r4, r0
 80039a4:	4608      	mov	r0, r1
 80039a6:	602b      	str	r3, [r5, #0]
 80039a8:	f7fd f804 	bl	80009b4 <_sbrk>
 80039ac:	1c43      	adds	r3, r0, #1
 80039ae:	d102      	bne.n	80039b6 <_sbrk_r+0x1a>
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	b103      	cbz	r3, 80039b6 <_sbrk_r+0x1a>
 80039b4:	6023      	str	r3, [r4, #0]
 80039b6:	bd38      	pop	{r3, r4, r5, pc}
 80039b8:	2000024c 	.word	0x2000024c

080039bc <_init>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	bf00      	nop
 80039c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c2:	bc08      	pop	{r3}
 80039c4:	469e      	mov	lr, r3
 80039c6:	4770      	bx	lr

080039c8 <_fini>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	bf00      	nop
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr
